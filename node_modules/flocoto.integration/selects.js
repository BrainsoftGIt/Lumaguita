"use strict";
var selects;
(function (selects) {
    class Source {
        constructor(opts) {
        }
    }
    function filterable(opts) {
        if (!opts)
            opts = {};
        if (!opts.filterSession)
            opts.filterSession = [];
        if (!opts.filtersBody)
            opts.filtersBody = {};
        if (!opts.filters)
            opts.filters = {};
        return opts;
    }
    function extractable(opts) {
        if (!opts)
            opts = {};
        if (!opts.rootPath)
            opts.rootPath = [];
        if (!opts.itemPath)
            opts.itemPath = [];
        return opts;
    }
    function selectsFixed(opts) {
        let fixed = {
            name: opts.name,
            fixedSource: opts.options,
            sourceType: "fixed"
        };
        return fixed;
    }
    selects.selectsFixed = selectsFixed;
    function selectsDatabase(opts) {
        Object.assign(opts, filterable(opts));
        Object.assign(opts, extractable(opts));
        return {
            name: opts.name,
            sourceType: "database",
            databaseSource: opts
        };
    }
    selects.selectsDatabase = selectsDatabase;
    function selectsDocuments(opts) {
        Object.assign(opts, extractable(opts));
        if (!opts.documentType)
            opts.documentType = "text/json";
        return {
            name: opts.name,
            sourceType: "document",
            documentSource: Object.assign({}, opts)
        };
    }
    selects.selectsDocuments = selectsDocuments;
    function selectsRedirects(opts) {
        Object.assign(opts, filterable(opts));
        Object.assign(opts, extractable(opts));
        if (!opts.resolvedStatus)
            opts.resolvedStatus = 200;
        if (!opts.returnType)
            opts.returnType = "object";
        return {
            name: opts.name,
            sourceType: "redirect",
            redirectSource: opts
        };
    }
    selects.selectsRedirects = selectsRedirects;
    function selectsAPI(opts) {
        Object.assign(opts, filterable(opts));
        Object.assign(opts, extractable(opts));
        if (!opts.resolvedStatus)
            opts.resolvedStatus = 200;
        if (!opts.method)
            opts.method = "GET";
        if (!opts.returnType)
            opts.returnType = "object";
        return {
            name: opts.name,
            sourceType: "api",
            apiSource: opts
        };
    }
    selects.selectsAPI = selectsAPI;
})(selects || (selects = {}));
module.exports = selects;
//# sourceMappingURL=selects.js.map