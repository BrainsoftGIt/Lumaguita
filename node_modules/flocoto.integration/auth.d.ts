/// <reference types="cookie-parser" />
import e from "express";
import { AuthSession, PublicInfo } from "./integration";
import { AuthRole } from "./data";
declare module "express-session" {
    interface SessionData {
        flocotoDefaults?: {
            [session: string]: flocoto_auth.AuthDefaults;
        };
    }
}
declare namespace flocoto_auth {
    type HasSession = AuthSession & AuthSessionCurrent & {
        public: PublicInfo;
    };
    type AuthDefaults = {
        [role in keyof AuthRole]?: AuthRole[role];
    };
    type AuthSessionSets = {
        [props in keyof AuthSession]?: AuthSession[props];
    };
    interface AuthCurrent {
        readonly __auth_uid: string;
        readonly __user_auth: string;
        readonly __branch_auth: string;
        readonly __espaco_auth?: string;
        readonly __cargo_auth?: string;
        readonly __trabalha_auth?: string;
    }
    interface AuthSessionCurrent {
        current(): AuthCurrent & {
            into<T>(into: T): T & AuthCurrent;
        };
        sets(sets: AuthDefaults): AuthCurrent;
        unsets(): void;
        update(sets: AuthSessionSets): AuthSession & AuthSessionCurrent;
        snapshot(): SnapshotSession;
    }
    type SnapshotSession = AuthSession & {
        public: PublicInfo;
        current: AuthCurrent;
    };
    function hasSession(req: e.Request, session?: "default" | string | e.Response, res?: e.Response | string | "default"): HasSession;
}
export = flocoto_auth;
//# sourceMappingURL=auth.d.ts.map