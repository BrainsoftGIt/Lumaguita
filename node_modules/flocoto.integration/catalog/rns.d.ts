import { db } from "kitres";
import tns from "./tns";

namespace rns {
  export type TypeProperties = "*" | "auth.espaco.espaco_meta";

  export interface TypeOfMaps<T extends { [K in TypeProperties]?: T[K] }> {
    "auth.cargo": Table._Auth.cargo.PropsTyped<T>;
    "auth.cargo:Props": Table._Auth.cargo.PropsTyped<T>;
    "auth.cargo:Refs": Table._Auth.cargo.RefsTyped<T>;
    "auth.cargo:NOTNULL": Table._Auth.cargo.NOTNULLTyped<T>;
    "auth.cargo:Entry": Table._Auth.cargo.EntryTyped<T>;
    "auth.espaco": Table._Auth.espaco.PropsTyped<T>;
    "auth.espaco:Props": Table._Auth.espaco.PropsTyped<T>;
    "auth.espaco:Refs": Table._Auth.espaco.RefsTyped<T>;
    "auth.espaco:NOTNULL": Table._Auth.espaco.NOTNULLTyped<T>;
    "auth.espaco:Entry": Table._Auth.espaco.EntryTyped<T>;
    "auth.trabalha": Table._Auth.trabalha.PropsTyped<T>;
    "auth.trabalha:Props": Table._Auth.trabalha.PropsTyped<T>;
    "auth.trabalha:Refs": Table._Auth.trabalha.RefsTyped<T>;
    "auth.trabalha:NOTNULL": Table._Auth.trabalha.NOTNULLTyped<T>;
    "auth.trabalha:Entry": Table._Auth.trabalha.EntryTyped<T>;
  }

  export interface TableMaps<T extends { [K in TypeProperties]?: T[K] }> {
    auth: maps._Auth.TableMaps<T>;
  }

  export interface TableRefsMaps<T extends { [K in TypeProperties]?: T[K] }> {
    "auth.cargo": Table._Auth.cargo.PropsTyped<T>;
    "auth.espaco": Table._Auth.espaco.PropsTyped<T>;
    "auth.trabalha": Table._Auth.trabalha.PropsTyped<T>;
  }

  export interface ViewMaps<T extends { [K in TypeProperties]?: T[K] }> {}

  export interface ViewRefsMaps<T extends { [K in TypeProperties]?: T[K] }> {}

  export interface CompositeMaps<T extends { [K in TypeProperties]?: T[K] }> {}

  export interface CompositeRefsMaps<
    T extends { [K in TypeProperties]?: T[K] },
  > {}

  export interface MaterializeMaps<
    T extends { [K in TypeProperties]?: T[K] },
  > {}

  export interface MaterializeRefsMaps<
    T extends { [K in TypeProperties]?: T[K] },
  > {}

  export interface RelationMaps<T extends { [K in TypeProperties]?: T[K] }> {
    auth: maps._Auth.RelationMaps<T>;
  }

  export interface RelationRefsMaps<
    T extends { [K in TypeProperties]?: T[K] },
  > {
    "auth.cargo": Table._Auth.cargo.PropsTyped<T>;
    "auth.espaco": Table._Auth.espaco.PropsTyped<T>;
    "auth.trabalha": Table._Auth.trabalha.PropsTyped<T>;
  }

  export interface EnumMaps<T extends { [K in TypeProperties]?: T[K] }> {}

  export interface EnumRefsMaps<T extends { [K in TypeProperties]?: T[K] }> {}

  export namespace Type {
    export namespace _Pg_Catalog {}
  }

  export namespace Table {
    export namespace _Auth {
      export namespace cargo {
        export interface PropsTyped<T extends { [K in never]?: T[K] }> {
          cargo_update?: tns.TypeOf<"timestamptz">;
          cargo_uid?: tns.TypeOf<"uuid">;
          cargo_user_update?: tns.TypeOf<"uuid">;
          cargo_nome?: tns.TypeOf<"varchar">;
          cargo_espaco_auth?: tns.TypeOf<"uuid">;
          cargo_user_uid?: tns.TypeOf<"uuid">;
          cargo_estado?: tns.TypeOf<"int4">;
          cargo_cargo_uid?: tns.TypeOf<"uuid">;
          cargo_date?: tns.TypeOf<"timestamptz">;
          cargo_detalhes?: tns.TypeOf<"varchar">;
          _branch_uid?: tns.TypeOf<"uuid">;
        }

        export interface RefsTyped<T extends { [K in never]?: T[K] }> {}

        export interface NOTNULLTyped<T extends { [K in never]?: T[K] }> {
          cargo_uid: tns.TypeOf<"uuid">;
          cargo_nome: tns.TypeOf<"varchar">;
          cargo_espaco_auth: tns.TypeOf<"uuid">;
          cargo_user_uid: tns.TypeOf<"uuid">;
          cargo_estado: tns.TypeOf<"int4">;
          cargo_date: tns.TypeOf<"timestamptz">;
          _branch_uid: tns.TypeOf<"uuid">;
        }

        export interface EntryTyped<T extends { [K in never]?: T[K] }> {
          cargo_update?: tns.TypeOf<"timestamptz">;
          cargo_uid: tns.TypeOf<"uuid">;
          cargo_user_update?: tns.TypeOf<"uuid">;
          cargo_nome: tns.TypeOf<"varchar">;
          cargo_espaco_auth: tns.TypeOf<"uuid">;
          cargo_user_uid: tns.TypeOf<"uuid">;
          cargo_estado: tns.TypeOf<"int4">;
          cargo_cargo_uid?: tns.TypeOf<"uuid">;
          cargo_date: tns.TypeOf<"timestamptz">;
          cargo_detalhes?: tns.TypeOf<"varchar">;
          _branch_uid: tns.TypeOf<"uuid">;
        }

        export type Props = PropsTyped<any>;
        export type Refs = RefsTyped<any>;
        export type NOTNULL = NOTNULLTyped<any>;
        export type Entry = EntryTyped<any>;
      }

      export namespace espaco {
        export interface PropsTyped<
          T extends { [K in "auth.espaco.espaco_meta"]?: T[K] },
        > {
          espaco_meta?: T["auth.espaco.espaco_meta"] extends never
            ? tns.TypeOf<"jsonb">
            : T["auth.espaco.espaco_meta"];
          espaco_espaco_auth?: tns.TypeOf<"uuid">;
          espaco_update?: tns.TypeOf<"timestamptz">;
          espaco_espaco_uid?: tns.TypeOf<"uuid">;
          espaco_colaborador_uid?: tns.TypeOf<"uuid">;
          espaco_date?: tns.TypeOf<"timestamptz">;
          _branch_uid?: tns.TypeOf<"uuid">;
          espaco_nome?: tns.TypeOf<"varchar">;
          espaco_code?: tns.TypeOf<"varchar">;
          espaco_estado?: tns.TypeOf<"int2">;
          espaco_uid?: tns.TypeOf<"uuid">;
          espaco_colaborador_autalizacao?: tns.TypeOf<"uuid">;
        }

        export interface RefsTyped<T extends { [K in never]?: T[K] }> {}

        export interface NOTNULLTyped<T extends { [K in never]?: T[K] }> {
          espaco_date: tns.TypeOf<"timestamptz">;
          espaco_estado: tns.TypeOf<"int2">;
          espaco_uid: tns.TypeOf<"uuid">;
        }

        export interface EntryTyped<
          T extends { [K in "auth.espaco.espaco_meta"]?: T[K] },
        > {
          espaco_meta?: T["auth.espaco.espaco_meta"] extends never
            ? tns.TypeOf<"jsonb">
            : T["auth.espaco.espaco_meta"];
          espaco_espaco_auth?: tns.TypeOf<"uuid">;
          espaco_update?: tns.TypeOf<"timestamptz">;
          espaco_espaco_uid?: tns.TypeOf<"uuid">;
          espaco_colaborador_uid?: tns.TypeOf<"uuid">;
          espaco_date: tns.TypeOf<"timestamptz">;
          _branch_uid?: tns.TypeOf<"uuid">;
          espaco_nome?: tns.TypeOf<"varchar">;
          espaco_code?: tns.TypeOf<"varchar">;
          espaco_estado: tns.TypeOf<"int2">;
          espaco_uid: tns.TypeOf<"uuid">;
          espaco_colaborador_autalizacao?: tns.TypeOf<"uuid">;
        }

        export type Props = PropsTyped<any>;
        export type Refs = RefsTyped<any>;
        export type NOTNULL = NOTNULLTyped<any>;
        export type Entry = EntryTyped<any>;
      }

      export namespace trabalha {
        export interface PropsTyped<T extends { [K in never]?: T[K] }> {
          trabalha_user_uid?: tns.TypeOf<"uuid">;
          trabalha_espaco_work?: tns.TypeOf<"uuid">;
          trabalha_estado?: tns.TypeOf<"int2">;
          trabalha_date?: tns.TypeOf<"timestamptz">;
          trabalha_fim?: tns.TypeOf<"timestamptz">;
          trabalha_uid?: tns.TypeOf<"uuid">;
          trabalha_user_update?: tns.TypeOf<"uuid">;
          trabalha_espaco_auth?: tns.TypeOf<"uuid">;
          trabalha_user_owner?: tns.TypeOf<"uuid">;
          trabalha_cargo_uid?: tns.TypeOf<"uuid">;
          _branch_uid?: tns.TypeOf<"uuid">;
          trabalha_datautpade?: tns.TypeOf<"timestamptz">;
          trabalha_inicio?: tns.TypeOf<"timestamptz">;
          trabalha_default?: tns.TypeOf<"bool">;
        }

        export interface RefsTyped<T extends { [K in never]?: T[K] }> {}

        export interface NOTNULLTyped<T extends { [K in never]?: T[K] }> {
          trabalha_user_uid: tns.TypeOf<"uuid">;
          trabalha_espaco_work: tns.TypeOf<"uuid">;
          trabalha_estado: tns.TypeOf<"int2">;
          trabalha_date: tns.TypeOf<"timestamptz">;
          trabalha_uid: tns.TypeOf<"uuid">;
          trabalha_espaco_auth: tns.TypeOf<"uuid">;
          trabalha_user_owner: tns.TypeOf<"uuid">;
          _branch_uid: tns.TypeOf<"uuid">;
        }

        export interface EntryTyped<T extends { [K in never]?: T[K] }> {
          trabalha_user_uid: tns.TypeOf<"uuid">;
          trabalha_espaco_work: tns.TypeOf<"uuid">;
          trabalha_estado: tns.TypeOf<"int2">;
          trabalha_date: tns.TypeOf<"timestamptz">;
          trabalha_fim?: tns.TypeOf<"timestamptz">;
          trabalha_uid: tns.TypeOf<"uuid">;
          trabalha_user_update?: tns.TypeOf<"uuid">;
          trabalha_espaco_auth: tns.TypeOf<"uuid">;
          trabalha_user_owner: tns.TypeOf<"uuid">;
          trabalha_cargo_uid?: tns.TypeOf<"uuid">;
          _branch_uid: tns.TypeOf<"uuid">;
          trabalha_datautpade?: tns.TypeOf<"timestamptz">;
          trabalha_inicio?: tns.TypeOf<"timestamptz">;
          trabalha_default?: tns.TypeOf<"bool">;
        }

        export type Props = PropsTyped<any>;
        export type Refs = RefsTyped<any>;
        export type NOTNULL = NOTNULLTyped<any>;
        export type Entry = EntryTyped<any>;
      }
    }
  }

  export namespace maps {
    export namespace _Auth {
      export interface TableMaps<T extends { [K in TypeProperties]?: T[K] }> {
        cargo: Table._Auth.cargo.PropsTyped<T>;
        espaco: Table._Auth.espaco.PropsTyped<T>;
        trabalha: Table._Auth.trabalha.PropsTyped<T>;
      }

      export interface RelationMaps<
        T extends { [K in TypeProperties]?: T[K] },
      > {
        cargo: Table._Auth.cargo.PropsTyped<T>;
        espaco: Table._Auth.espaco.PropsTyped<T>;
        trabalha: Table._Auth.trabalha.PropsTyped<T>;
      }
    }
  }
}

export default rns;
