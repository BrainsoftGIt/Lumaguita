"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
var menu;
(function (menu_1) {
    class Resource {
        constructor(opts, classname) {
            Object.assign(this, opts);
            this.classname = classname;
        }
    }
    menu_1.Resource = Resource;
    class MenuResource extends Resource {
        constructor(opts) {
            super(opts, "auth.menu");
        }
        get level() {
            if (this.super)
                return this.super.level + 1;
            return 1;
        }
        family() {
            if (!this.super)
                return [this];
            return [...this.super.family(), this];
        }
        map() {
            var _a;
            return {
                classname: this.classname,
                menu_id: this.id,
                menu_menu_id: (_a = this === null || this === void 0 ? void 0 : this.super) === null || _a === void 0 ? void 0 : _a.id,
                menu_codigo: this.code,
                menu_nivel: this.level,
                menu_icon: this.icon,
                menu_public: this.public,
                menu_nome: this.name,
                menu_link: this.url,
                menu_estado: this.status,
                menu_position: this.position,
                menu_app: this.application,
                menu_viewports: this.viewports
            };
        }
    }
    menu_1.MenuResource = MenuResource;
    class ViewportResource extends Resource {
        constructor(opts) {
            super(opts, "auth.viewport");
        }
        map() {
            return {
                classname: this.classname,
                viewport_identifier: this.id,
                viewport_name: this.name,
                viewport_desc: this.desc,
                viewport_application: this.application,
                viewport_from: this.from,
                viewport_proxypath: this.proxypath,
                viewport_status: this.status,
                viewport_visible: this.visible,
                viewport_session: this.session
            };
        }
    }
    menu_1.ViewportResource = ViewportResource;
    function extractMenus(_container, source) {
        const container = _container;
        if (!container)
            return [];
        if (container.classname === "auth.menu" && typeof container["family"] === "function") {
            container.source = source;
            return [...(container["family"]().map(menu => {
                    if (!menu.source)
                        menu.source = source;
                    return menu;
                }))];
        }
        if (container.classname === "auth.viewport") {
            container.source = source;
            return [container];
        }
        if (Array.isArray(container)) {
            let _menu = [];
            container.forEach((element) => {
                _menu.push(...extractMenus(element, source));
            });
            return _menu;
        }
        if (typeof container === "object") {
            let _menu = [];
            Object.entries(container).forEach(([key, element]) => {
                _menu.push(...extractMenus(element, source));
            });
            return _menu;
        }
        return [];
    }
    function collectResources(dirname, opts, collected) {
        let res = [];
        let filter = new RegExp(`((^)*.${"res.js"})$`);
        let _collected = (error, resource) => {
            if (error) {
                return collected(error, resource);
            }
            resource = resource.map(value => {
                let menu = value;
                if (menu.classname === "auth.menu" && !!menu.icon && !path_1.default.isAbsolute(menu.icon)) {
                    menu.icon = path_1.default.join(path_1.default.dirname(value.source), menu.icon);
                }
                value.application = opts.application;
                return value.map();
            });
            collected(error, resource);
        };
        fs_1.default.readdir(dirname, { recursive: opts === null || opts === void 0 ? void 0 : opts.recursive }, (err, files) => {
            if (err) {
                _collected(err, null);
                return;
            }
            for (let i = 0; i < files.length; i++) {
                let filename = files[i];
                let path = path_1.default.join(dirname, filename);
                let state = fs_1.default.statSync(path);
                if (!state.isFile())
                    continue;
                if (!filter.test(filename))
                    continue;
                try {
                    const menuContainer = require(path);
                    let resources = extractMenus(menuContainer, path);
                    resources.forEach(menuItem => {
                        res.push(menuItem);
                    });
                }
                catch (e) {
                    _collected(e, null);
                    return;
                }
            }
            _collected(null, [...res]);
        });
    }
    menu_1.collectResources = collectResources;
    function menu(opts) {
        if (opts instanceof MenuResource)
            return opts;
        return new MenuResource(opts);
    }
    menu_1.menu = menu;
    function viewport(opts) {
        if (opts instanceof ViewportResource)
            return opts;
        return new ViewportResource(opts);
    }
    menu_1.viewport = viewport;
})(menu || (menu = {}));
module.exports = menu;
//# sourceMappingURL=res.js.map