declare namespace menu {
    type MenuResourceOptions = {
        id: number;
        name: string;
        code: string;
        public?: boolean;
        url?: string;
        icon?: string;
        status?: number;
        position?: number;
        application?: string;
        viewports?: string[];
        super?: MenuResource;
    };
    abstract class Resource {
        classname: string;
        application: string;
        source: string;
        protected constructor(opts: any, classname: string);
        abstract map(): {
            classname: string;
            [p: string]: any;
        };
    }
    class MenuResource extends Resource implements MenuResourceOptions {
        id: number;
        name: string;
        code: string;
        url?: string;
        icon?: string;
        public?: boolean;
        status?: number;
        position?: number;
        application: string;
        viewports?: string[];
        super?: MenuResource;
        constructor(opts: MenuResourceOptions);
        get level(): any;
        family(): any;
        map(): {
            classname: string;
            menu_id: number;
            menu_menu_id: number;
            menu_codigo: string;
            menu_nivel: any;
            menu_icon: string;
            menu_public: boolean;
            menu_nome: string;
            menu_link: string;
            menu_estado: number;
            menu_position: number;
            menu_app: string;
            menu_viewports: string[];
        };
    }
    interface ViewportResourceOptions {
        id?: string;
        name?: string;
        desc?: string;
        from?: string;
        proxypath?: string;
        status: number;
        visible: boolean;
        session: boolean;
    }
    class ViewportResource extends Resource {
        id?: string;
        name?: string;
        application: string;
        desc?: string;
        from?: string;
        proxypath?: string;
        status: number;
        visible: boolean;
        session: boolean;
        constructor(opts: ViewportResourceOptions);
        map(): {
            classname: string;
            viewport_identifier: string;
            viewport_name: string;
            viewport_desc: string;
            viewport_application: string;
            viewport_from: string;
            viewport_proxypath: string;
            viewport_status: number;
            viewport_visible: boolean;
            viewport_session: boolean;
        };
    }
    type CollectMenuItemOptions = {
        recursive?: boolean;
        application: string;
    };
    interface CollectMenuItemEvent {
        error(filename: string, error?: Error): void;
        collect(menu: Resource, filename: string): void;
        end(menu: Set<Resource>): void;
    }
    function collectResources(dirname: string, opts?: CollectMenuItemOptions, collected?: (error: Error, resource: Resource[]) => void): void;
    function menu(opts: MenuResourceOptions): MenuResource;
    function viewport(opts: ViewportResourceOptions): ViewportResource;
}
export = menu;
//# sourceMappingURL=res.d.ts.map