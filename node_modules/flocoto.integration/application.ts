import {fork, ProcessEnvOptions} from "child_process";
import Path from "path";

import __integration from "./integration";

namespace flocoto_app {
    export interface FlocotoManifest {
        active: boolean,
        env: ProcessEnvOptions,
        modular: boolean,
        cwd: string,
        integrationMode:"fork"|"remote"
        fork?:string,
        remote?: __integration.IntegrationApplicationOptions
        forkArgs?: string | string[]
        resource?:string
        resourceRecursive?:boolean
    }


    export interface FlocotoManifestInfo extends FlocotoManifest {
        name:string
    }


    export type ManifestPackage = {
        name:string,
        flocoto:FlocotoManifest
    }



    export function launcher( root:string, opts?:FlocotoLauncherOptions ){
        let flocotoRoot = Path.join( root, /*language=file-reference*/ "/../flocoto" );
        let flocotoMainFile = Path.join( flocotoRoot, "server/launcher/index.js" );

        let args = [ "start" ];

        if( opts?.isolated ) args.push( "--isolated" );
        if( !opts?.applications ) opts.applications = [];

        opts.applications.forEach( value => {
            args.push( "--application", value );
        });
        fork( flocotoMainFile, args, {
            cwd: flocotoRoot
        });
    }

    export type FlocotoLauncherOptions = {
        isolated?: boolean;
        applications?:string[]
    }
}

export = flocoto_app;