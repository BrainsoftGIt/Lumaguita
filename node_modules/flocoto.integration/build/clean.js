"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanJs = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const path_2 = __importDefault(require("path"));
function cleanJs(dirname) {
    //language=file-reference
    if (!dirname)
        dirname = path_1.default.join(__dirname, "../");
    [
        { basename: /*language=file-reference*/ "/bin", math: /.*.js$/, },
        { basename: /*language=file-reference*/ "/bin", math: /.*.js.map$/, },
        { basename: /*language=file-reference*/ "/build", math: /.*.js$/, },
        { basename: /*language=file-reference*/ "/build", math: /.*.js.map$/, },
        { basename: /*language=file-reference*/ "/src", math: /.*.js$/, },
        { basename: /*language=file-reference*/ "/src", math: /.*.js.map$/ },
    ].forEach((clean, index) => {
        fs_1.default.readdirSync(path_1.default.join(dirname, clean.basename), { recursive: true })
            .forEach((file) => {
            let filename = path_2.default.join(dirname, clean.basename, file);
            let state = fs_1.default.statSync(filename);
            if (!state.isFile())
                return;
            if (!clean.math.test(filename))
                return;
            fs_1.default.unlinkSync(filename);
            console.log(`[unlink] ${new URL(`file://${filename}`).href}... ok!`);
        });
    });
}
exports.cleanJs = cleanJs;
if (require.main.filename === __filename) {
    //language=file-reference
    cleanJs(path_1.default.join(__dirname, "../"));
}
//# sourceMappingURL=clean.js.map