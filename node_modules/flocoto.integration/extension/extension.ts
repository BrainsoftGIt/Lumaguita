import {ShowEnv} from "kitres";
import fs from "fs";
import Path from "path";
import { WorkerService } from "kitres/src/core/util/worker";
import extension from "./index";

process.on( "uncaughtExceptionMonitor", error => {
    console.error("uncaughtExceptionMonitor",)
    console.error(error)
});
process.on( "uncaughtException", error => {
    console.error("uncaughtException",)
    console.error(error)
});
process.on( "unhandledRejection", error => {
    console.error("unhandledRejection")
    console.error(error)
});



export function main( dotEnv:extension.EnvOptions ){
    const service = new WorkerService<extension.ExtensionIntegration<any>>();

    console.log( extension.manifest.name, "starting server..." );
    console.log( extension.manifest.name, "Defining env" );
    let hide = ShowEnv.hidePassword( dotEnv );
    ShowEnv.show( hide, require( "../../server/context/folders" ).Folders );

    extension.context.define( dotEnv );
    let extensionMain = Path.join( dotEnv.extension.home, dotEnv.extension.name );
    if( !fs.existsSync( extensionMain ) ){
        service.main().notify( "extensionUnavailable",  dotEnv.extension.name )
        return;
    }

    let extensionModule = require( extensionMain ) as { Extension:extension.ExtensionHandlers<any>, Meta:extension.Meta<any>};

    Object.entries( extensionModule.Extension ).forEach( ([method, value]) => {
        // @ts-ignore
        service.implement( method, (args) => {
            return Promise.resolve( extensionModule.Extension[ method ] ( args) );
        })
    });
}



