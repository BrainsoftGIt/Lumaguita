import { DotEnv } from "kitres"
import {DefaultExtEnvObject, DefaultExtEnvProps} from "./defaults";

export type ObjectOptions = DotEnv & typeof DefaultExtEnvObject


// Helper type to extract only object keys
type ObjectKeys<T> = {
    [K in keyof T]: T[K] extends object ? K : never
}[keyof T];

// Type for concatenating keys of objects
type ConcatKeysWithTypes<T> = {
    [K in ObjectKeys<T> as `${K & string}.${keyof T[K] & string}`]: T[K][keyof T[K]]
};

// Type for properties that are not objects
type NonObjectKeys<T> = {
    [K in keyof T as T[K] extends object ? never : K]: T[K]
};

// Combined type
type CombinedEnvOptions = ConcatKeysWithTypes<ObjectOptions>;


// Combined type
export type ArgsOptions = CombinedEnvOptions;
export type EnvOptions = {
    [K in keyof typeof DefaultExtEnvProps]?: typeof DefaultExtEnvProps[K]
} & {
    [K in keyof typeof DefaultExtEnvObject]?: typeof DefaultExtEnvObject[K]
}



