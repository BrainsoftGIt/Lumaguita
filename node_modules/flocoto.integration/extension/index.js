"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
const ctx = __importStar(require("./context"));
const man = __importStar(require("../manifest"));
const def = __importStar(require("./context/defaults"));
const install = __importStar(require("../build/nodemon/install"));
var extension;
(function (extension_1) {
    extension_1.context = ctx.extContext;
    extension_1.manifest = man.integrationManifest;
    extension_1.DefaultEnvObjects = def.DefaultExtEnvObject;
    extension_1.extensionIntegrationInstall = install.extensionIntegrationInstall;
    let PropsType;
    (function (PropsType) {
        PropsType["OPTIONS"] = "PropsType.OPTIONS";
        PropsType["LIST"] = "PropsType.LIST";
        PropsType["ITEMS"] = "PropsType.ITEMS";
        PropsType["NUMBER"] = "PropsType.NUMBER";
        PropsType["BOOLEAN"] = "PropsType.BOOLEAN";
        PropsType["OBJECT"] = "PropsType.OBJECT";
        PropsType["ARRAY"] = "PropsType.ARRAY";
        PropsType["TEXT"] = "PropsType.TEXT";
        PropsType["DATE"] = "PropsType.DATE";
        PropsType["FILE"] = "PropsType.FILE";
    })(PropsType = extension_1.PropsType || (extension_1.PropsType = {}));
    function props(type, props) {
        return Object.assign(Object.assign({}, props || {}), { type: type });
    }
    extension_1.props = props;
    function meta(t) {
        return t;
    }
    extension_1.meta = meta;
    function extension(meta, handler) {
        return handler;
    }
    extension_1.extension = extension;
})(extension || (extension = {}));
module.exports = extension;
//# sourceMappingURL=index.js.map