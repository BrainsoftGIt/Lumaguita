/// <reference types="cookie-parser" />
import e from "express";
import selects, { SelectsResource } from "./selects";
import { BaseEventEmitter, db } from "kitres";
declare namespace selects_res {
    interface SelectResolverEvents {
        error(error: Error): void;
    }
    export type DefineOptions = {
        [p: string]: SelectsResource;
    };
    export type SelectsResourcesManagerOptions = {
        resourceFolder: string;
    };
    export class SelectsResourcesManager<T extends db.CatalogOf<T>> extends BaseEventEmitter<SelectResolverEvents> {
        private readonly _resolver;
        private _connectionFactory;
        private readonly _container;
        private resourceFolder;
        private dynamicResolver;
        attachConnectionFactory(connectionFactory: (req: e.Request) => db.OIDPrivateAccess<any>): void;
        constructor(opts: SelectsResourcesManagerOptions);
        connection(req: e.Request): db.OIDPrivateAccess<T>;
        get containers(): {
            [p: string]: selects.SelectsResource;
        };
        get resolver(): e.Router;
        define(opts: DefineOptions): void;
    }
    export {};
}
export = selects_res;
//# sourceMappingURL=selects.resolver.d.ts.map