/// <reference types="cookie-parser" />
import { AxiosProxyConfig } from "axios";
import e from "express";
import { HasSession } from "./index";
declare namespace selects {
    type Transformable = {
        propsValue: string;
        propsLabel: string;
    };
    type Extractable = {
        rootPath?: string[];
        itemPath?: string[];
    };
    type Filterable = {
        filterSession?: ("__branch_auth" | "__user_auth" | "__espaco_auth")[];
        filters?: {
            [p: string]: any;
        } | ((req: e.Request, session: HasSession) => Promise<{
            [p: string]: any;
        }> | {
            [p: string]: any;
        });
        filtersBody?: {
            [p: string]: {
                required?: boolean;
                transform: (value: string) => any;
            };
        };
    };
    type RESTRoutRes = Transformable & Extractable & Filterable & {
        name: string;
        url: string;
        proxy?: false | AxiosProxyConfig;
        resolvedStatus?: number;
        returnType?: "text/json" | "text/xml" | "text/ini" | "object";
    };
    type SelectItem = {
        value: string;
        label: string;
    };
    type ItemOptions = SelectItem[] | {
        [p: string]: string;
    };
    type DatabaseSource = Transformable & Extractable & Filterable & {
        name: string;
        schema: string;
        object: string;
        sourceType: "relation" | "function";
    };
    type FixedOptions = {
        options: ItemOptions;
        name: string;
    };
    function selectsFixed(opts: FixedOptions): SelectsResource;
    function selectsDatabase(opts: DatabaseSource): SelectsResource;
    type DocumentSource = Transformable & Extractable & {
        name: string;
        documentType?: "text/json" | "text/xml" | "text/ini";
        resource?: string;
        filename: string;
        patch?: string[];
    };
    function selectsDocuments(opts: DocumentSource): SelectsResource;
    type RedirectSource = RESTRoutRes;
    function selectsRedirects(opts: RedirectSource): SelectsResource;
    type ApiSource = RESTRoutRes & {
        method?: string;
    };
    function selectsAPI(opts: ApiSource): SelectsResource;
    type SelectsResource = {
        name: string;
        sourceType: "database" | "fixed" | "document" | "redirect" | "api";
        noSession?: boolean;
        application?: string;
        fixedSource?: ItemOptions;
        databaseSource?: DatabaseSource;
        documentSource?: DocumentSource;
        apiSource?: ApiSource;
        redirectSource?: RedirectSource;
    };
}
export = selects;
//# sourceMappingURL=selects.d.ts.map