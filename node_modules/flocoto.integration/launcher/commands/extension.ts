import yargs, {Argv, BuilderCallback} from "yargs";

import {baseOpts} from "../util/base";
import {launcherOptionsDefinition, launcherPrepareOptions} from "../util/merge";
import extension from "../../index";

export const command = "start";
export const desc:string = "Start a extension";


export const builder:BuilderCallback<extension.ArgsOptions, any> = yargs => {
    return baseOpts( startBuilderOptions( yargs ), value => {
        return Object.assign({} );
    })
};

export function startBuilderOptions(yargs:Argv<extension.ArgsOptions> ){
    Object.entries( extension.DefaultEnvObjects ).forEach( ([key, object]) => {
        Object.entries( object ).forEach( ([props, sample]) => {
            let define = launcherOptionsDefinition( sample );
            if( !define ) return;

            yargs.option(`${key}.${props}`, {
                ... define,
                description: `${key} ${ props}`
            })
        })
    });
    return yargs;
}

export const handler = function ( argv: yargs.Arguments<extension.EnvOptions &extension.ArgsOptions> ) {
    launcherPrepareOptions< extension.EnvOptions, extension.ArgsOptions>( argv, extension.DefaultEnvObjects );
    extension.context.define( argv );
    let server = require( "../../../libs/integration.extension.workflow/extension" );
    server.main( argv );
}
