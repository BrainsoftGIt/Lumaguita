"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.launcherPrepareOptions = exports.launcherOptionsDefinition = exports.launcherOptionsMerges = exports.mergeObjects = void 0;
const kitres_1 = require("kitres");
const chalk_1 = __importDefault(require("chalk"));
const path_1 = __importDefault(require("path"));
function mergeObjects(original, news) {
    let copy = JSON.parse(JSON.stringify(original));
    Object.entries(news).forEach(([key, value]) => {
        if (copy[key] && typeof copy[key] === "object" && value && typeof value === "object") {
            copy[key] = mergeObjects(copy[key], value);
        }
        else
            copy[key] = value;
    });
    return copy;
}
exports.mergeObjects = mergeObjects;
function launcherOptionsMerges(argv, objectName, ...properties) {
    properties.forEach((property, index) => {
        // @ts-ignore
        if (!argv[objectName]) {
            // @ts-ignore
            argv[objectName] = {};
        }
        // @ts-ignore
        if (argv[property]) {
            // @ts-ignore
            argv[objectName][property] = argv[property];
        }
    });
}
exports.launcherOptionsMerges = launcherOptionsMerges;
let SupportedTypes = ["boolean", "number", "string"];
function launcherOptionsDefinition(sample) {
    let type = (typeof sample);
    if (!SupportedTypes.includes(type)) {
        type = "string";
    }
    return {
        type: type,
        array: Array.isArray(sample)
    };
}
exports.launcherOptionsDefinition = launcherOptionsDefinition;
function launcherPrepareOptions(argv, definitions) {
    launcherOptionsMerges(argv, "directory", "directory.var");
    let passwordResult = kitres_1.PassEnv.passwordResolve(argv);
    if (passwordResult.filter(value => !value.resolveExists).map(value => {
        console.log(chalk_1.default.redBright(`${value.passwordPath.join(".")} password file is not found at ${value.passValue}`));
    }).length) {
        process.exit(1);
    }
    if (passwordResult.filter(value => value.passType === "text").map(value => {
        console.log(chalk_1.default.yellowBright(`Unsafe password defined in .env file ${value.passwordPath.join(".")}`));
    }).length) { }
    //root-file
    if (!path_1.default.isAbsolute(argv.directory.var)) {
        let envDir = path_1.default.dirname(argv.env);
        argv.directory["var"] = path_1.default.join(envDir, argv.directory.var);
    }
    Object.entries(definitions).forEach(([key, root]) => {
        if (key === "directory")
            return;
        let props = Object.keys(root).map((props) => `${key}.${props}`);
        launcherOptionsMerges(argv, key, ...props);
    });
}
exports.launcherPrepareOptions = launcherPrepareOptions;
//# sourceMappingURL=merge.js.map