import Path from "path";
import {EnvOptions} from "../../context/options";
import {Argv} from "yargs";
import {loadConfigsFile} from "./load";
import fs from "fs";
import {mergeObjects} from "./merge";
import {Defaults} from "../../context/defaults";

export function baseOpts(yargs:Argv<EnvOptions>, parse:(value:any )=>any):Argv<EnvOptions>{
    // @ts-ignore
    return yargs.env("SSMS_" )
        .options("env", {
            default: Defaults.ENV,
        }).option("mode",{
            type: "string",
            description: "Start application mode",
            choices: [ "dev","public","prod","test" ],
            default: "dev",
        })
        .config("env", "Caminho para ficheiro das variaveis", envConfig => {
            let loaded =  loadConfigsFile<{ etc?:string }>( envConfig, "utf8" );
            let envReplace = loaded[ "env" ];
            loaded[ "env" ] = envConfig;
            loaded[ "env" ] = envConfig;
            if( envReplace && !Path.isAbsolute( envReplace )){
                envReplace  = Path.join( Path.dirname( envConfig ), envReplace );
            }

            if( envReplace && !fs.existsSync( envReplace )){
                envReplace = null;
            }

            let news:typeof loaded;
            if( envReplace && envReplace !== envConfig ){
                news = loadConfigsFile<{ etc?:string }>( envReplace, "utf8" );
                news[ "env" ] = loaded[ "env" ];
                news[ "envReplace" ] = envReplace;
            }

            if( news ){
                loaded = mergeObjects( loaded, news )
            }

            let result = { };
            Object.assign( result, loaded );
            if( typeof parse === "function" ){
                Object.assign( result, parse( result ));
            }

            return result;
        })
        .parserConfiguration({ "strip-aliased": true })
}
