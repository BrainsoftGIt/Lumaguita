"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadConfigsFile = void 0;
const fs = __importStar(require("fs"));
const Path = __importStar(require("path"));
const ini_1 = __importDefault(require("ini"));
function loadConfigsFile(path, encoding) {
    if (!fs.existsSync(path))
        return {};
    let basetype = Path.extname(path);
    let basename = Path.basename(path);
    let data = fs.readFileSync(path).toString(encoding !== null && encoding !== void 0 ? encoding : "utf8");
    let _conf = () => { return ini_1.default.parse(data); };
    let _json = () => { return JSON.parse(data); };
    let _js = () => { return require(path); };
    let parser;
    if ([".conf", ".ini", ".env"].includes(basetype))
        parser = _conf;
    else if ([".conf", ".ini", ".env"].includes(basename))
        parser = _conf;
    else if ([".json"].includes(basename))
        parser = _json;
    else if ([".js"].includes(basename))
        parser = _js;
    try {
        let next = parser();
        // while ( next && typeof next === "object" && section.length ) {
        //     next = next[ section.shift() ];
        // }
        if (next && typeof next === "object")
            return next;
    }
    catch (e) { }
    return {};
}
exports.loadConfigsFile = loadConfigsFile;
//# sourceMappingURL=load.js.map