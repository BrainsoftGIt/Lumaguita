import {ArgsOptions, EnvOptions} from "../../context/options";
import yargs from "yargs";
import {PassEnv} from "kitres";
import chalk from "chalk";
import Path from "path";
import {DefaultExtEnvObject} from "../../../libs/integration.extension.workflow/context/defaults";

export function mergeObjects( original:{[p:string]:any}, news:{[p:string]:any} ) {
    let copy = JSON.parse(JSON.stringify(original));
    Object.entries( news ).forEach( ([key, value])=>{
        if( copy[key] && typeof copy[key] === "object" && value && typeof value === "object" ) {
            copy[key] = mergeObjects( copy[key], value );
        } else copy[key] = value;
    });
    return copy;
}



export function launcherOptionsMerges<E, A >( argv: yargs.Arguments<E>, objectName: keyof E, ...properties:( string|keyof A )[] ){
    properties.forEach( (property, index) => {
        // @ts-ignore
        if( !argv[ objectName ] ) {
            // @ts-ignore
            argv[objectName] = {};
        }
        // @ts-ignore
        if( argv[ property ] ) {
            // @ts-ignore
            argv[objectName ][ property ] = argv[ property ];
        }
    });
}

let SupportedTypes = [ "boolean", "number", "string"] as const ;

export function launcherOptionsDefinition( sample:any ) {
    let type = (typeof sample) as typeof SupportedTypes[number];
    if( !SupportedTypes.includes( type ) ) {
        type = "string"
    }

    return  {
        type: type,
        array: Array.isArray( sample )
    }
}


export function launcherPrepareOptions< E extends {env?:string, directory?:{var?:string}}, A> ( argv:yargs.Arguments<E>, definitions ){

    launcherOptionsMerges<E, A>( argv, "directory", "directory.var" );

    let passwordResult= PassEnv.passwordResolve( argv as any );

    if( passwordResult.filter( value => !value.resolveExists ).map( value => {
        console.log( chalk.redBright(`${ value.passwordPath.join( "." )} password file is not found at ${ value.passValue }`))
    }).length ) {
        process.exit( 1 )
    }

    if( passwordResult.filter( value => value.passType === "text" ).map( value => {
        console.log( chalk.yellowBright( `Unsafe password defined in .env file ${ value.passwordPath.join( "." ) }` ));
    }).length ){ }


    //root-file
    if( !Path.isAbsolute( argv.directory.var ) ) {
        let envDir = Path.dirname( argv.env );
        argv.directory["var"] = Path.join( envDir, argv.directory.var );
    }

    Object.entries(definitions ).forEach( ([key, root]) => {
        if( key === "directory" ) return;
        let props = Object.keys( root ).map( ( props) => `${ key}.${ props }`);
        launcherOptionsMerges<E, A>( argv, key as any, ...props );
    });

}
