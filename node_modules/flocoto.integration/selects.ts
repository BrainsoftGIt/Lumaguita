import {AxiosProxyConfig} from "axios";
import e from "express";
import {HasSession} from "./index";

namespace selects  {
    export type Transformable = {
        propsValue:string,
        propsLabel:string,
    }

    export type Extractable = {
        rootPath?:string[],
        itemPath?:string[]
    }

    export type Filterable = {
        filterSession?:("__branch_auth"|"__user_auth"|"__espaco_auth")[],
        filters?:{[p:string]:any}|(( req:e.Request, session: HasSession )=>Promise<{[p:string]:any}>|{[p:string]:any}),
        filtersBody?:{[p:string]:{
                required?:boolean,
                transform:(value:string)=>any
            }},
    }

    class Source {
        constructor( opts:any ) {

        }
    }

    function filterable( opts:Filterable ){
        if( !opts ) opts = {};
        if( !opts.filterSession ) opts.filterSession = [];
        if( !opts.filtersBody ) opts.filtersBody = {};
        if( !opts.filters ) opts.filters = {};
        return opts;
    }
    function extractable( opts:Extractable ){
        if( !opts ) opts = {};
        if( !opts.rootPath ) opts.rootPath = [];
        if( !opts.itemPath ) opts.itemPath = [];
        return opts;
    }


    export type RESTRoutRes = Transformable & Extractable & Filterable &{
        name:string
        url:string,
        proxy?:false|AxiosProxyConfig
        resolvedStatus?:number
        returnType?: "text/json"|"text/xml"|"text/ini"|"object"
    }
    export type SelectItem = { value:string, label:string };
    export type ItemOptions = SelectItem[]|{
        [p:string]:string,
    }

    export type DatabaseSource = Transformable & Extractable & Filterable &{
        name:string
        schema:string
        object:string
        sourceType:"relation"|"function"
    }

    export type FixedOptions = {
        options:ItemOptions,
        name:string
    }
    export function selectsFixed( opts:FixedOptions ){
        let fixed:SelectsResource = {
            name: opts.name,
            fixedSource: opts.options,
            sourceType: "fixed"
        }
        return fixed;
    }


    export function selectsDatabase(opts:DatabaseSource ):SelectsResource{
        Object.assign( opts, filterable( opts ) );
        Object.assign( opts, extractable( opts ) );
        return {
            name: opts.name,
            sourceType: "database",
            databaseSource: opts
        };
    }

    export type DocumentSource = Transformable & Extractable & {
        name:string
        documentType?:"text/json"|"text/xml"|"text/ini"
        resource?:string,
        filename:string,
        patch?:string[]
    };
    export function selectsDocuments ( opts:DocumentSource):SelectsResource{
        Object.assign( opts, extractable( opts ) );
        if( !opts.documentType ) opts.documentType = "text/json";

        return {
            name: opts.name,
            sourceType: "document",
            documentSource: {
                ...opts,
            }
        }
    }

    export type RedirectSource = RESTRoutRes;

    export function selectsRedirects( opts:RedirectSource):SelectsResource{
        Object.assign( opts, filterable( opts ) );
        Object.assign( opts, extractable( opts ) );
        if( !opts.resolvedStatus ) opts.resolvedStatus = 200;
        if( !opts.returnType ) opts.returnType = "object";
        return {
            name: opts.name,
            sourceType: "redirect",
            redirectSource: opts
        };
    }
    export type ApiSource = RESTRoutRes &{
        method?:string
    };

    export function selectsAPI( opts:ApiSource):SelectsResource{
        Object.assign( opts, filterable( opts ) );
        Object.assign( opts, extractable( opts ) );
        if( !opts.resolvedStatus ) opts.resolvedStatus = 200;
        if( !opts.method ) opts.method = "GET";
        if( !opts.returnType ) opts.returnType = "object";
        return {
            name: opts.name,
            sourceType: "api",
            apiSource: opts
        };
    }


    export type SelectsResource = {
        name: string
        sourceType:"database"|"fixed"|"document"|"redirect"|"api",
        noSession?:boolean,
        application?:string,

        fixedSource?: ItemOptions,
        databaseSource?:DatabaseSource
        documentSource?:DocumentSource,
        apiSource?: ApiSource,
        redirectSource?:RedirectSource
    }

}

export = selects;
