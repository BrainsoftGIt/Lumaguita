namespace def {
  export type TypeProperties = "*";

  export interface TypeOfMaps<T extends { [K in TypeProperties]?: T[K] }> {}

  export namespace definitions {
    export namespace _Cluster {
      export interface __user_map {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__user_map()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.users
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">STABLE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.users <span style="color: #C76A40;
            font-weight: 800;">limit</span> <span style="color: #C76A40">1</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __tg_share_guard_upgrade {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__tg_share_guard_upgrade()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">event_trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _regclass <span style="color: #C76A40">regclass</span>;
          _share <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">share</span>;
          _record <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">for</span> _record  <span style="color: #C76A40;
            font-weight: 800;">IN</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> pg_event_trigger_ddl_commands()
              <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #397300">tg_tag</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> ( <span style="color: #4d99bf">&#x27;ALTER TABLE&#x27;</span>, <span style="color: #4d99bf">&#x27;CREATE TABLE&#x27;</span> )
          <span style="color: #C76A40;
            font-weight: 800;">loop</span>
            _regclass := _record.object_identity;
            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _share
              <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">share</span> s
              <span style="color: #C76A40;
            font-weight: 800;">where</span> s.share_regclass::<span style="color: #C76A40">regclass</span> = _regclass;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _share.share_regclass::<span style="color: #C76A40">regclass</span> <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">update</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">share</span>
                <span style="color: #C76A40;
            font-weight: 800;">set</span> share_pks = <span style="color: #C76A40;
            font-weight: 800;">default</span>
                <span style="color: #C76A40;
            font-weight: 800;">where</span> share_regclass = _regclass;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __pull {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__pull(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              _classname: CLASS.NAME

              _current: JSONB
              _change: JSONB
              _outdate: BOOLEAN

              _origin: UID
              _receiver: UID

              _result: BOOLEAN
              _exist_object BOOLEAN
              _exist_collector BOOLEAN

              _object: CLUSTER.OBJECT
              _collector: CLUSTER.COLLECTOR
            }
           \*\/</span>
          _ref <span style="color: #C76A40">jsonb</span>;
          _object <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span>;
          _collector <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector;

          _regclass <span style="color: #C76A40">regclass</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> (args-&gt;&gt;<span style="color: #4d99bf">&#x27;_classname&#x27;</span>)::<span style="color: #C76A40">text</span>::<span style="color: #C76A40">regclass</span>;
          _current <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;<span style="color: #4d99bf">&#x27;_current&#x27;</span>;
          _change <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;<span style="color: #4d99bf">&#x27;_change&#x27;</span>;
          _use_change <span style="color: #C76A40">jsonb</span>;


          _origin <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_origin&#x27;</span>;
          _receiver <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_receiver&#x27;</span>;

          _outdate <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_outdate&#x27;</span>;
          _result <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_result&#x27;</span>;
          _exist_collector <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_exist_collector&#x27;</span>;
          _exist_object <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_exist_object&#x27;</span>;
          _metadata <span style="color: #C76A40">jsonb</span>;


          _res <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _object := jsonb_populate_record( _object, args-&gt;<span style="color: #4d99bf">&#x27;_object&#x27;</span> );
          _collector := jsonb_populate_record( _collector, args-&gt;<span style="color: #4d99bf">&#x27;_collector&#x27;</span> );
          _use_change := _change;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _current <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> jsonb_typeof( _current ) != <span style="color: #4d99bf">&#x27;object&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _current := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _ref := coalesce( _object.object_ref, _collector.collector_ref, lib.sets_ref( _regclass, _collector.collector_metadata ) );
          _object.object_ref := _ref;
          _collector.collector_ref := _ref;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _ref <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;pull reference is null&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _change <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span>  jsonb_typeof( _change ) != <span style="color: #4d99bf">&#x27;object&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_each( _change )
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _use_change := _collector.collector_metadata;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _current <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>  <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _metadata := _collector.collector_metadata;
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            _metadata := _current || _use_change;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _regclass = <span style="color: #4d99bf">&#x27;cluster.resource&#x27;</span>::<span style="color: #C76A40">regclass</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _object.object_status := <span style="color: #C76A40">2</span>;
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            _object.object_status := <span style="color: #C76A40">1</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _collector.collector_cluster_origin = _origin;
          _collector.collector_old = _current;
          _collector.collector_share_regclass = <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( _regclass );
          _collector.collector_ref = _object.object_ref;
          _collector.collector_metaapply = _metadata;
          _collector.collector_changevalue = _change;
          _collector.collector_usechage = _use_change;

          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _outdate <span style="color: #C76A40;
            font-weight: 800;">and</span> _result <span style="color: #C76A40;
            font-weight: 800;">and</span> ( _current <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> _current != _metadata ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">perform</span> lib.sets_doc(
                _regclass, _metadata,
                <span style="color: #C76A40;
            font-weight: 800;">ref</span> := _ref
              );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> coalesce( _exist_collector, <span style="color: #C76A40;
            font-weight: 800;">false</span> ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector (
                collector_transuid,
                collector_uid,
                collector_share_regclass,
                collector_cluster_origin,
                collector_sequence,
                collector_order,
                collector_minseq,
                collector_maxseq,
                collector_ref,
                collector_metadata,
                collector_date,
                collector_version,
                collector_operation,
                collector_old,
                collector_remoteold,
                collector_originold,
                collector_changes,
                collector_metaapply,
                collector_changevalue,
                collector_usechage
              ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
                 _collector.collector_transuid,
                 _collector.collector_uid,
                 _collector.collector_share_regclass,
                 _collector.collector_cluster_origin,
                 _collector.collector_sequence,
                 _collector.collector_order,
                 _collector.collector_minseq,
                 _collector.collector_maxseq,
                 _collector.collector_ref,
                 _collector.collector_metadata,
                 _collector.collector_date,
                 _collector.collector_version,
                 _collector.collector_operation,
                 _collector.collector_old,
                 _collector.collector_old,
                 _collector.collector_originold,
                 _collector.collector_changes,
                 _collector.collector_metaapply,
                 _collector.collector_changevalue,
                 _collector.collector_usechage
               );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> coalesce( _exist_object, <span style="color: #C76A40;
            font-weight: 800;">false</span> ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span>(
                object_transuid,
                object_uid,
                object_share_regclass,
                object_cluster_origin,
                object_cluster_receiver,
                object_collector_uid,
                object_ref,
                object_seq,
                object_sseq,
                object_originver,
                object_originsver,
                object_origincver,
                object_originsseq,
                object_originrev,
                object_date,
                object_instant,
                object_receiver,
                object_status,
                object_outdate
              ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
                 _collector.collector_transuid,
                 _object.object_uid,
                 <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( _regclass ),
                 _origin,
                 _receiver,
                 _collector.collector_uid,
                 _object.object_ref,
                 <span style="color: #C76A40;
            font-weight: 800;">default</span>,
                 <span style="color: #C76A40;
            font-weight: 800;">default</span>,
                 _object.object_originver,
                 _object.object_originsver,
                 _object.object_origincver,
                 _object.object_originsseq,
                 _object.object_originrev,
                 _object.object_date,
                 _object.object_instant,
                 now(),
                 _object.object_status,
                 _outdate
               ) <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _res;
            <span style="color: #C76A40;
            font-weight: 800;">else</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _res
                <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span> ob
                <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ob.object_uid = _object.object_uid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ob.object_collector_uid = _collector.collector_uid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ob.object_transuid = _collector.collector_transuid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ob.object_ref = _object.object_ref
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ob.object_share_regclass = <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( _regclass )
              ;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _outdate <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
            <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> _res;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span>
            <span style="color: #C76A40;
            font-weight: 800;">declare</span>
              s <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
            <span style="color: #C76A40;
            font-weight: 800;">begin</span>
              <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span>
                s = <span style="color: #397300">returned_sqlstate</span>,
                m = <span style="color: #397300">message_text</span>,
                d = pg_exception_detail,
                h = pg_exception_hint,
                c = pg_exception_context;

              <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.break(
                break_collector,
                break_object,
                break_old,
                break_regclass,
                break_origin,
                break_receiver,
                break_sqlstate,
                break_message,
                break_detail,
                break_hint,
                break_context,
                break_ref,
                break_current,
                break_change,
                break_metadata,
                break_document
              ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
                to_jsonb( _collector),
                to_jsonb( _object ),
                _current,
                <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( _regclass ),
                _origin,
                _receiver,
                _ex.s,
                _ex.m,
                _ex.d,
                _ex.h,
                _ex.c,
                _object.object_ref,
                _current,
                _change,
                _metadata,
                _collector.collector_metadata
              );
              <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface object_filter {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.object_filter(<span style="color: #C76A40;
            font-weight: 800;">share</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, _object <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span>, _collector <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector, _req <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>, _origin <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">boolean</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _validator <span style="color: #C76A40">record</span>;
          _statement <span style="color: #C76A40">text</span>;
          _result <span style="color: #C76A40">boolean</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #1f7199">$4</span>.cluster_path := coalesce( <span style="color: #1f7199">$4</span>.cluster_path, <span style="color: #4d99bf">&#x27;/&#x27;</span> );
          <span style="color: #1f7199">$5</span>.cluster_path := coalesce( <span style="color: #1f7199">$5</span>.cluster_path, <span style="color: #4d99bf">&#x27;/&#x27;</span> );


          <span style="color: #888">-- Quando os cluster origem e o cluster requerente não tiver nehuma relação com os seus caminho</span>
          <span style="color: #888">-- Então reistar</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _req.cluster_path != _origin.cluster_path
            <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_sub_path( _req.cluster_path, _origin.cluster_path )
            <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_sub_path( _origin.cluster_path, _req.cluster_path )
          <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">for</span> _validator <span style="color: #C76A40;
            font-weight: 800;">in</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">filter</span> f
              <span style="color: #C76A40;
            font-weight: 800;">where</span>  <span style="color: #C76A40;
            font-weight: 800;">share</span> = coalesce( f.filter_regclass, <span style="color: #C76A40;
            font-weight: 800;">share</span> )
          <span style="color: #C76A40;
            font-weight: 800;">loop</span>
            _statement := format( <span style="color: #4d99bf">&#x27;select %s( $1, $2, $3, $4, $5 )&#x27;</span>, _validator.filter_regproc );
            <span style="color: #C76A40;
            font-weight: 800;">execute</span> _statement <span style="color: #C76A40;
            font-weight: 800;">into</span> _result <span style="color: #C76A40;
            font-weight: 800;">using</span> <span style="color: #1f7199">$1</span>, <span style="color: #1f7199">$2</span>, <span style="color: #1f7199">$3</span>, <span style="color: #1f7199">$4</span>, <span style="color: #1f7199">$5</span>;
            <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _result <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface create_resource {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.create_resource(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.resource
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\*
            args := {
              resource_name character varying
              resource_subpath character varying
              reference_extension character varying
              reference_metadata jsonb not null default jsonb_build_object()
            }
           \*\/</span>
          _local <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _res <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.resource;
          _letters <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;
          _number <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;0123456789&#x27;</span>;
          _rec <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _local := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local();
          _res := jsonb_populate_record( _res, args );

          _res.resource_cluster := upper( _local.cluster_identifier );
          _res.resource_identifier := format( <span style="color: #4d99bf">&#x27;%s-%s-%s&#x27;</span>,
            lib.dset_random_text( _letters, <span style="color: #C76A40">6</span> ),
            lib.dset_random_text( format( <span style="color: #4d99bf">&#x27;%s%s&#x27;</span>, _letters, _number), <span style="color: #C76A40">8</span> ),
            lib.dset_random_text( _number, <span style="color: #C76A40">4</span> )
          );

          <span style="color: #C76A40;
            font-weight: 800;">while</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.resource r
              <span style="color: #C76A40;
            font-weight: 800;">where</span> r.resource_identifier = _res.resource_identifier
                <span style="color: #C76A40;
            font-weight: 800;">and</span> r.resource_cluster = _res.resource_cluster
          ) <span style="color: #C76A40;
            font-weight: 800;">loop</span>
              _res.resource_identifier := format( <span style="color: #4d99bf">&#x27;%s-%s-%s&#x27;</span>,
                lib.dset_random_text( _letters, <span style="color: #C76A40">6</span> ),
                lib.dset_random_text( format( <span style="color: #4d99bf">&#x27;%s%s&#x27;</span>, _letters, _number), <span style="color: #C76A40">8</span> ),
                lib.dset_random_text( _number, <span style="color: #C76A40">4</span> )
              );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

          <span style="color: #C76A40;
            font-weight: 800;">for</span> _rec <span style="color: #C76A40;
            font-weight: 800;">in</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> unnest( <span style="color: #C76A40;
            font-weight: 800;">array</span>[
                <span style="color: #4d99bf">&#x27;/&#x27;</span>, <span style="color: #4d99bf">&#x27;\&#x27;</span>, <span style="color: #4d99bf">&#x27;-&#x27;</span>, <span style="color: #4d99bf">&#x27; &#x27;</span>, <span style="color: #4d99bf">&#x27;:&#x27;</span>, <span style="color: #4d99bf">&#x27;%&#x27;</span>, <span style="color: #4d99bf">&#x27;$&#x27;</span>, <span style="color: #4d99bf">&#x27;*&#x27;</span>, <span style="color: #4d99bf">&#x27;?&#x27;</span>, <span style="color: #4d99bf">&#x27;=&#x27;</span>, <span style="color: #4d99bf">&#x27;&quot;&#x27;</span>, <span style="color: #4d99bf">&#x27;&amp;&#x27;</span>,
                $c$<span style="color: #4d99bf">&#x27;$c$,
               --  &#x27;</span>(<span style="color: #4d99bf">&#x27;, &#x27;</span>)<span style="color: #4d99bf">&#x27;, &#x27;</span>[<span style="color: #4d99bf">&#x27;, &#x27;</span>]<span style="color: #4d99bf">&#x27;,
                &#x27;</span>{<span style="color: #4d99bf">&#x27;, &#x27;</span>}<span style="color: #4d99bf">&#x27;
              ]::text[]) c ( character )
          loop
            _res.resource_name := replace( _res.resource_name, _rec.character, &#x27;</span>_<span style="color: #4d99bf">&#x27; );
          end loop;

          _res.resource_name := lower( _res.resource_name );
          _res.resource_subpath := (
            with __sub as (
              select part
                from regexp_split_to_table( _res.resource_subpath, &#x27;</span>/<span style="color: #4d99bf">&#x27; ) part
                where part is not null and part.length &gt; 0
            ) select string_agg( part, &#x27;</span>/<span style="color: #4d99bf">&#x27; )
              from __sub
          );

          _res.resource_reference := (
            with _path_part as (
              select path_part
                from regexp_split_to_table(
                  format( &#x27;</span>%s/%s/%s<span style="color: #4d99bf">&#x27;,
                    _res.resource_cluster,
                    _res.resource_subpath,
                    _res.resource_identifier
                  ), &#x27;</span>/<span style="color: #4d99bf">&#x27;
                ) t( path_part )
                where path_part is not null
                  and length( path_part ) &gt; 0
            ) select string_agg( _p.path_part, &#x27;</span>/<span style="color: #4d99bf">&#x27; )
              from _path_part _p
          );

          _res.resource_url := format( &#x27;</span>%s/%s<span style="color: #4d99bf">&#x27;, _res.resource_reference, _res.resource_name );
          _res.resource_reference := format( &#x27;</span>%s-%s<span style="color: #4d99bf">&#x27;, _res.resource_reference, _res.resource_name );

          if _res.resource_extension is not null and length( _res.resource_extension ) &gt; 0 then
            _res.resource_reference := format( &#x27;</span>%s.%s<span style="color: #4d99bf">&#x27;, _res.resource_reference, _res.resource_extension );
            _res.resource_url := format( &#x27;</span>%s.%s<span style="color: #4d99bf">&#x27;, _res.resource_url, _res.resource_extension );
          end if;

          select (&quot;returning&quot; ).* into _res
            from lib.sets_in( _res );

          return _res;
        end
        $function$
        </span>
        </pre>
        */ source(): void;
      }

      export interface __tg_share_truncate {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__tg_share_truncate()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _add_insert <span style="color: #C76A40">regprocedure</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;cluster.__tg_version_add_when_insert()&#x27;</span>::<span style="color: #C76A40">regprocedure</span>;
          _add_update <span style="color: #C76A40">regprocedure</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;cluster.__tg_version_add_when_update()&#x27;</span>::<span style="color: #C76A40">regprocedure</span>;
          _commit <span style="color: #C76A40">regprocedure</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;cluster.__tg_version_commit()&#x27;</span>::<span style="color: #C76A40">regprocedure</span>;
          _data <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">for</span> _data <span style="color: #C76A40;
            font-weight: 800;">in</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
              tg.tgrelid::<span style="color: #C76A40">regclass</span>::<span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> share_regclass,
              tg.tgname <span style="color: #C76A40;
            font-weight: 800;">as</span> trigger_name,
              tg.*
            <span style="color: #C76A40;
            font-weight: 800;">from</span> pg_trigger tg
            <span style="color: #C76A40;
            font-weight: 800;">where</span> tg.tgfoid <span style="color: #C76A40;
            font-weight: 800;">in</span>( _add_insert, _add_update, _commit )
          <span style="color: #C76A40;
            font-weight: 800;">loop</span>
            <span style="color: #C76A40;
            font-weight: 800;">begin</span>
              <span style="color: #C76A40;
            font-weight: 800;">execute</span> format( <span style="color: #4d99bf">&#x27;drop trigger %I on %s&#x27;</span>, _data.trigger_name, _data.share_regclass );
            <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface reduce {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.reduce(<span style="color: #C76A40;
            font-weight: 800;">VARIADIC</span> <span style="color: #C76A40">jsonb</span>[])
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">select</span> jsonb_object_agg( it.key, it.<span style="color: #C76A40;
            font-weight: 800;">value</span> <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> e.<span style="color: #C76A40;
            font-weight: 800;">index</span>, it.<span style="color: #C76A40;
            font-weight: 800;">index</span> )
            <span style="color: #C76A40;
            font-weight: 800;">from</span> unnest( <span style="color: #1f7199">$1</span> ) <span style="color: #C76A40;
            font-weight: 800;">with ordinality</span> e( document, <span style="color: #C76A40;
            font-weight: 800;">index</span> )
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> jsonb_each( e.document ) <span style="color: #C76A40;
            font-weight: 800;">with ordinality</span> it( key, <span style="color: #C76A40;
            font-weight: 800;">value</span>, <span style="color: #C76A40;
            font-weight: 800;">index</span> ) <span style="color: #C76A40;
            font-weight: 800;">on</span> e.document ? it.key
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _Sets_Resources_Downloaded_16619 {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.sets_resources_downloaded(args <span style="color: #C76A40">json</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _object <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;object_uid&#x27;</span>;
          _trans <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;collector_transuid&#x27;</span>;
          _ref <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;object_ref&#x27;</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">update</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span> o
              <span style="color: #C76A40;
            font-weight: 800;">set</span> object_status = <span style="color: #C76A40">1</span>
              <span style="color: #C76A40;
            font-weight: 800;">where</span> object_status = <span style="color: #C76A40">2</span>
                <span style="color: #C76A40;
            font-weight: 800;">and</span> object_share_regclass::<span style="color: #C76A40">regclass</span> = <span style="color: #4d99bf">&#x27;cluster.resource&#x27;</span>::<span style="color: #C76A40">regclass</span>
                <span style="color: #C76A40;
            font-weight: 800;">and</span> object_uid = _object
                <span style="color: #C76A40;
            font-weight: 800;">and</span> object_transuid = _trans
                <span style="color: #C76A40;
            font-weight: 800;">and</span> object_ref = _ref
              <span style="color: #C76A40;
            font-weight: 800;">returning</span> to_jsonb( o )
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface load_resources_pendents {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.load_resources_pendents(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _cluster := jsonb_populate_record( _cluster, args );
          _cluster := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster( _cluster.cluster_identifier );
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __object <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  o.object_uid,
                  o.object_transuid <span style="color: #C76A40;
            font-weight: 800;">as</span> collector_transuid,
                  o.object_ref,
                  res.*
                <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span> o
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.resource res <span style="color: #C76A40;
            font-weight: 800;">on</span> lib.sets_ref( res ) = o.object_ref
                <span style="color: #C76A40;
            font-weight: 800;">where</span> o.object_share_regclass::<span style="color: #C76A40">regclass</span> = <span style="color: #4d99bf">&#x27;cluster.resource&#x27;</span>::<span style="color: #C76A40">regclass</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> o.object_status = <span style="color: #C76A40">2</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> _cluster.cluster_uid <span style="color: #C76A40;
            font-weight: 800;">in</span> ( o.object_cluster_origin, o.object_cluster_receiver )
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _o )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __object _o;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface load_clusters_configs_to_child {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.load_clusters_configs_to_child(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              cluster_identifier: PATH
              cluster_api: PATH
              cluster_key
            }
           \*\/</span>
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _cluster := jsonb_populate_record( _cluster, args );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
              <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c
              <span style="color: #C76A40;
            font-weight: 800;">where</span> c.cluster_api = _cluster.cluster_api
                <span style="color: #C76A40;
            font-weight: 800;">and</span> c.cluster_identifier = _cluster.cluster_identifier
                <span style="color: #C76A40;
            font-weight: 800;">and</span> c.cluster_type = _const.cluster_tcluster_child
            ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span>
             __cluster <span style="color: #C76A40;
            font-weight: 800;">as</span> (
               <span style="color: #C76A40;
            font-weight: 800;">select</span>
                 c.cluster_identifier,
                 <span style="color: #C76A40;
            font-weight: 800;">case</span>
                   <span style="color: #C76A40;
            font-weight: 800;">when</span> c.cluster_type = _const.cluster_tcluster_child <span style="color: #C76A40;
            font-weight: 800;">then</span> _const.cluster_tcluster_local
                   <span style="color: #C76A40;
            font-weight: 800;">when</span> c.cluster_type = _const.cluster_tcluster_local <span style="color: #C76A40;
            font-weight: 800;">then</span> _const.cluster_tcluster_master
                   <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_type,

                 <span style="color: #C76A40;
            font-weight: 800;">case</span>
                   <span style="color: #C76A40;
            font-weight: 800;">when</span> c.cluster_type = _const.cluster_tcluster_child <span style="color: #C76A40;
            font-weight: 800;">then</span> c.cluster_key
                   <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_key,

                 <span style="color: #C76A40;
            font-weight: 800;">case</span>
                   <span style="color: #C76A40;
            font-weight: 800;">when</span> c.cluster_type = _const.cluster_tcluster_child <span style="color: #C76A40;
            font-weight: 800;">then</span> c.cluster_configs
                   <span style="color: #C76A40;
            font-weight: 800;">else</span> jsonb_build_object()
                   <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_configs,

                 <span style="color: #C76A40;
            font-weight: 800;">case</span>
                   <span style="color: #C76A40;
            font-weight: 800;">when</span> c.cluster_type = _const.cluster_tcluster_child <span style="color: #C76A40;
            font-weight: 800;">then</span> c.cluster_grants
                   <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>[ ]::<span style="color: #C76A40">text</span>[ ]
                   <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_grants,

                 coalesce( c.cluster_path, <span style="color: #4d99bf">&#x27;/&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_path,

                 <span style="color: #C76A40;
            font-weight: 800;">case</span>
                   <span style="color: #C76A40;
            font-weight: 800;">when</span> c.cluster_type = _const.cluster_tcluster_child <span style="color: #C76A40;
            font-weight: 800;">then</span> c.cluster_license
                   <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_license,
                 <span style="color: #C76A40;
            font-weight: 800;">case</span>
                   <span style="color: #C76A40;
            font-weight: 800;">when</span> c.cluster_type = _const.cluster_tcluster_child <span style="color: #C76A40;
            font-weight: 800;">then</span> c.cluster_code
                   <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_code,

                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                   <span style="color: #C76A40;
            font-weight: 800;">when</span> c.cluster_type = _const.cluster_tcluster_child <span style="color: #C76A40;
            font-weight: 800;">then</span> c.cluster_licenselife
                   <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_licenselife,

                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                   <span style="color: #C76A40;
            font-weight: 800;">when</span> c.cluster_type = _const.cluster_tcluster_child <span style="color: #C76A40;
            font-weight: 800;">then</span> c.cluster_tperiod_id
                   <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_tperiod_id,

                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                   <span style="color: #C76A40;
            font-weight: 800;">when</span> c.cluster_type = _const.cluster_tcluster_child <span style="color: #C76A40;
            font-weight: 800;">then</span> c.cluster_namespace
                   <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_namespace,
               
                 c.cluster_name
               
               
               <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c
               <span style="color: #C76A40;
            font-weight: 800;">where</span> c.cluster_type = _const.cluster_tcluster_local
                  <span style="color: #C76A40;
            font-weight: 800;">or</span> ( c.cluster_identifier = _cluster.cluster_identifier <span style="color: #C76A40;
            font-weight: 800;">and</span> c.cluster_type = _const.cluster_tcluster_child )
             ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
             <span style="color: #C76A40;
            font-weight: 800;">case</span>
               <span style="color: #C76A40;
            font-weight: 800;">when</span> _c.cluster_type = _const.cluster_tcluster_master <span style="color: #C76A40;
            font-weight: 800;">and</span> _c.cluster_name <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> to_jsonb( _c )
                - <span style="color: #4d99bf">&#x27;cluster_key&#x27;</span>
                || jsonb_build_object( <span style="color: #4d99bf">&#x27;cluster_name&#x27;</span>, <span style="color: #4d99bf">&#x27;Main Master (trunc)&#x27;</span> )
               <span style="color: #C76A40;
            font-weight: 800;">else</span> to_jsonb( _c )
               <span style="color: #C76A40;
            font-weight: 800;">end</span>
           <span style="color: #C76A40;
            font-weight: 800;">from</span> __cluster _c
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface push {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.push(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            PROPOSE: Devolver as modificações que o cluster cliente tem em falta
              Push funciona relativamente ao cluster cliente
            args := {
              request:*CLUSTER{
                cluster_identifier
                cluster_path,
                cluster_grants
              }
              limit:row limit
              clusters :[  -- all cluster include request
                  cluster_identifier: CID -- request cluster
                  cluster_sequence:   CSE
                  cluster_version:    CVE
                  cluster_verbose:    CVB
              ]
            }
           \*\/</span>
          _local <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _master <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _child <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _request <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _limit <span style="color: #C76A40">int8</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;limit&#x27;</span>;
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _local := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local();
          _master := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_master();
          _request := jsonb_populate_record( _request, args-&gt;<span style="color: #4d99bf">&#x27;request&#x27;</span> );
          _child := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_child( _request.cluster_identifier );
          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _cluster
            <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c
            <span style="color: #C76A40;
            font-weight: 800;">where</span> c.cluster_identifier = _request.cluster_identifier
          ;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _cluster.cluster_identifier <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _cluster.cluster_type = _const.cluster_tcluster_child <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _request := _cluster;
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            _request.cluster_uid = _cluster.cluster_uid;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span>  __clusters_statuas <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  ( e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;cluster_identifier&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_identifier,
                  ( e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;cluster_identifier&#x27;</span> ) = _request.cluster_identifier <span style="color: #C76A40;
            font-weight: 800;">as</span> _is_cluster_to,
                  ( e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;cluster_version&#x27;</span> )::<span style="color: #C76A40">int8</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_version,
                  ( e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;cluster_sequence&#x27;</span> )::<span style="color: #C76A40">int8</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_sequence,
                  ( e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;cluster_verbose&#x27;</span> )::<span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_verbose
                <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt; <span style="color: #4d99bf">&#x27;clusters&#x27;</span> ) e( doc )

            ), __clusters <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> _cs.*,
                     c.cluster_uid
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __clusters_statuas _cs
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c <span style="color: #C76A40;
            font-weight: 800;">on</span> _cs.cluster_identifier = c.cluster_identifier

            ), __objects <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  o.*,
                  o <span style="color: #C76A40;
            font-weight: 800;">as</span> _obj,
                  array_agg( <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.change( col.collector_metadata, <span style="color: #C76A40;
            font-weight: 800;">variadic</span> col.collector_changes )
                    <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> oi.object_seq
                  ) <span style="color: #C76A40;
            font-weight: 800;">as</span> _change
                <span style="color: #C76A40;
            font-weight: 800;">from</span>  <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span> o
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> __clusters _co <span style="color: #C76A40;
            font-weight: 800;">on</span> o.object_cluster_origin = _co.cluster_uid
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span> oi <span style="color: #C76A40;
            font-weight: 800;">on</span> o.object_seq &gt; _co.cluster_sequence
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> o.object_ref = oi.object_ref
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> o.object_share_regclass = oi.object_share_regclass
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> oi.object_seq &lt;= o.object_seq
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector col <span style="color: #C76A40;
            font-weight: 800;">on</span> oi.object_collector_uid = col.collector_uid
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> oi.object_transuid = col.collector_transuid
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> oi.object_share_regclass = col.collector_share_regclass
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> oi.object_ref = col.collector_ref

                <span style="color: #C76A40;
            font-weight: 800;">where</span> o.object_seq &gt; _co.cluster_sequence
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ( o.object_cluster_origin != _request.cluster_uid <span style="color: #C76A40;
            font-weight: 800;">or</span> _co.cluster_verbose )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ( o.object_cluster_receiver != _request.cluster_uid <span style="color: #C76A40;
            font-weight: 800;">or</span> _co.cluster_verbose )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> o.object_originver &gt; _co.cluster_version
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> o.object_uid,
                  o.object_share_regclass,
                  o.object_cluster_origin

            ), __ranks <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  o.*,
                  rank() <span style="color: #C76A40;
            font-weight: 800;">over</span> ( <span style="color: #C76A40;
            font-weight: 800;">partition</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> o.object_ref <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> o.object_seq <span style="color: #C76A40;
            font-weight: 800;">desc</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> rank,
                  min( o.object_seq ) <span style="color: #C76A40;
            font-weight: 800;">over</span> ( <span style="color: #C76A40;
            font-weight: 800;">partition</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> o.object_ref ) <span style="color: #C76A40;
            font-weight: 800;">as</span> minseq
                <span style="color: #C76A40;
            font-weight: 800;">from</span>  __objects o
            ), __collector <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                _o.object_uid             ,
                _o.object_originver       ,
                _o.object_originsver      ,
                _o.object_origincver      ,
                _o.object_originsseq      ,
                _o.object_originrev       ,
                _o.object_date            ,
                _o.object_instant         ,
                _o.object_ref             ,
                _o.object_seq             ,

                col.collector_metadata    ,
                col.collector_changes     ,
                col.collector_transuid    ,
                col.collector_uid         ,
                col.collector_sequence    ,
                col.collector_order       ,
                col.collector_minseq      ,
                col.collector_maxseq      ,
                col.collector_date        ,
                col.collector_version     ,
                col.collector_operation   ,
                col.collector_old         ,
                col.collector_originold   ,

                _origin.cluster_identifier <span style="color: #C76A40;
            font-weight: 800;">as</span> _origin_identifier,
                _o.object_share_regclass   <span style="color: #C76A40;
            font-weight: 800;">as</span> _regclass,
                _o.rank = <span style="color: #C76A40">1</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> _result,
                coalesce( <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.reduce( <span style="color: #C76A40;
            font-weight: 800;">variadic</span> _o._change ), col.collector_metadata ) <span style="color: #C76A40;
            font-weight: 800;">as</span> _change
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __ranks _o
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector col <span style="color: #C76A40;
            font-weight: 800;">on</span> _o.object_collector_uid = col.collector_uid
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> _o.object_transuid = col.collector_transuid
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> _o.object_share_regclass = col.collector_share_regclass
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> _o.object_ref = col.collector_ref
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> _origin <span style="color: #C76A40;
            font-weight: 800;">on</span> _origin.cluster_uid = _o.object_cluster_origin
                <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                 <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.can_send_object( _o._obj, col, _origin, _request, _local, _master, _child, _const )
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> _o.object_seq
              <span style="color: #C76A40;
            font-weight: 800;">limit</span> _limit
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _c )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __collector _c;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __tg_version_commit {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__tg_version_commit()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _regclass <span style="color: #C76A40">regclass</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> format( <span style="color: #4d99bf">&#x27;%s.%s&#x27;</span>, <span style="color: #397300">tg_table_schema</span>, <span style="color: #397300">tg_table_name</span> )::<span style="color: #C76A40">regclass</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_replication() <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">perform</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__create_object_version( _regclass );
          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __format {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format(<span style="color: #C76A40">regclass</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">STABLE</span> <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">with</span> __source <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> schemaname, tablename
              <span style="color: #C76A40;
            font-weight: 800;">from</span> pg_tables 
            <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span> 
              <span style="color: #C76A40;
            font-weight: 800;">select</span> schemaname, viewname
                <span style="color: #C76A40;
            font-weight: 800;">from</span> pg_views
          )
            <span style="color: #C76A40;
            font-weight: 800;">select</span> format( <span style="color: #4d99bf">&#x27;%I.%I&#x27;</span>, schemaname, tablename )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __source
              <span style="color: #C76A40;
            font-weight: 800;">where</span> format( <span style="color: #4d99bf">&#x27;%s.%s&#x27;</span>, schemaname, tablename )::<span style="color: #C76A40">regclass</span> = <span style="color: #1f7199">$1</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __get {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__get(<span style="color: #C76A40">regclass</span>, <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #888">--language=PostgreSQL</span>
          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">execute</span> replace( $<span style="color: #C76A40;
            font-weight: 800;">sql</span>$
            <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _t )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __tablename _t
              <span style="color: #C76A40;
            font-weight: 800;">where</span> lib.sets_ref( _t ) = <span style="color: #1f7199">$1</span>
          $<span style="color: #C76A40;
            font-weight: 800;">sql</span>$, <span style="color: #4d99bf">&#x27;__tablename&#x27;</span>, <span style="color: #1f7199">$1</span>::<span style="color: #C76A40">text</span> ) <span style="color: #C76A40;
            font-weight: 800;">using</span> <span style="color: #1f7199">$2</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __tg_before_create_filter {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__tg_before_create_filter()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _new <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">filter</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _new := <span style="color: #397300">new</span>;
          _new.filter_regproc := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format_proc( _new.filter_regproc::<span style="color: #C76A40">regproc</span> );
          <span style="color: #C76A40;
            font-weight: 800;">return</span> _new;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __create_api {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__create_api()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            _leter <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;ABCDEFGHIJKLMNOQRSTUVWXYZ&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> format( <span style="color: #4d99bf">&#x27;%s&#x27;</span>, lib.dset_random_text( _leter || <span style="color: #4d99bf">&#x27;0123456789&#x27;</span>, <span style="color: #C76A40">128</span> ) );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __rows {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__rows(<span style="color: #C76A40;
            font-weight: 800;">VARIADIC</span> <span style="color: #C76A40">regclass</span>[])
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(document <span style="color: #C76A40">jsonb</span>, reference <span style="color: #C76A40">jsonb</span>, classname <span style="color: #C76A40">regclass</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _next <span style="color: #C76A40">record</span>;
          _regclass <span style="color: #C76A40">regclass</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">for</span> _next <span style="color: #C76A40;
            font-weight: 800;">in</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
            <span style="color: #C76A40;
            font-weight: 800;">from</span> unnest( <span style="color: #1f7199">$1</span> ) n( tname )
            <span style="color: #C76A40;
            font-weight: 800;">loop</span>
              _regclass := _next.tname::<span style="color: #C76A40">regclass</span>;

              <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">execute</span> format( $<span style="color: #C76A40;
            font-weight: 800;">sql</span>$
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  to_jsonb( _t ),
                  lib.sets_ref( _t ),
                  %L::<span style="color: #C76A40">regclass</span>
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> %s _t
                $<span style="color: #C76A40;
            font-weight: 800;">sql</span>$, _regclass, _regclass ) <span style="color: #C76A40;
            font-weight: 800;">using</span> <span style="color: #1f7199">$2</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __tg_version_add_when_update {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__tg_version_add_when_update()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">perform</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__collect_change(
            <span style="color: #397300">tg_relid</span>::<span style="color: #C76A40">regclass</span>,
            to_jsonb( <span style="color: #397300">new</span> ),
            to_jsonb( <span style="color: #397300">old</span> ),
            <span style="color: #4d99bf">&#x27;U&#x27;</span>
          );
          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface load_clusters {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.load_clusters(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span>
            __cluster <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  c.cluster_uid,
                  c.cluster_identifier,
                  c.cluster_type,
                  c.cluster_code,
                  c.cluster_path,
                  c.cluster_domain,
                  c.cluster_licenselife,
                  c.cluster_license,
                  <span style="color: #C76A40;
            font-weight: 800;">case</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> c.cluster_name <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> c.cluster_type = _const.cluster_tcluster_local <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #4d99bf">&#x27;Local server&#x27;</span>
                    <span style="color: #C76A40;
            font-weight: 800;">else</span> c.cluster_name
                  <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_name,
                  c.cluster_port,
                  c.cluster_api,
                  c.cluster_version,
                  c.cluster_grants,
                  c.cluster_configs,
                  c.cluster_sequence,
                  tp.*
                <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.tperiod tp <span style="color: #C76A40;
            font-weight: 800;">on</span> c.cluster_tperiod_id = tp.tperiod_id
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _c )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __cluster _c
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> <span style="color: #C76A40;
            font-weight: 800;">case</span>
                <span style="color: #C76A40;
            font-weight: 800;">when</span> _c.cluster_type = _const.cluster_tcluster_local <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">1</span>
                <span style="color: #C76A40;
            font-weight: 800;">when</span> _c.cluster_type = _const.cluster_tcluster_master <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">2</span>
                <span style="color: #C76A40;
            font-weight: 800;">when</span> _c.cluster_type = _const.cluster_tcluster_child <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">3</span>
                <span style="color: #C76A40;
            font-weight: 800;">when</span> _c.cluster_type = _const.cluster_tcluster_remote <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">4</span>
              <span style="color: #C76A40;
            font-weight: 800;">end</span>,
              _c.cluster_name
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_configs {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.funct_load_configs()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            _local <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
            _master <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
            _branch <span style="color: #C76A40">record</span>;
            _source <span style="color: #C76A40">record</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            _local := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local();
            _master := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_master();
            
            <span style="color: #C76A40;
            font-weight: 800;">select</span> 
                array_agg( b.branch_uid ) <span style="color: #C76A40;
            font-weight: 800;">as</span> branch_uid,
                array_agg( b ) <span style="color: #C76A40;
            font-weight: 800;">as</span> branch
                <span style="color: #C76A40;
            font-weight: 800;">into</span> _branch
              <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.branch b
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> source s2 <span style="color: #C76A40;
            font-weight: 800;">on</span> b.branch_uid = s2.source_branch_uid
              <span style="color: #C76A40;
            font-weight: 800;">where</span> s2.source_cluster_uid = _local.cluster_uid
            ;
            
            <span style="color: #C76A40;
            font-weight: 800;">select</span> 
                array_agg( s.source_uid ) <span style="color: #C76A40;
            font-weight: 800;">as</span> source_uid,
                array_agg( s ) <span style="color: #C76A40;
            font-weight: 800;">as</span> source
                <span style="color: #C76A40;
            font-weight: 800;">into</span> _source
              <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.source s
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span> c <span style="color: #C76A40;
            font-weight: 800;">on</span> s.source_cluster_uid = c.cluster_uid
              <span style="color: #C76A40;
            font-weight: 800;">where</span> s.source_branch_uid = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( _branch.branch_uid )
            ;
            
            <span style="color: #C76A40;
            font-weight: 800;">return</span> jsonb_build_object(
              <span style="color: #4d99bf">&#x27;local&#x27;</span>, _local,
              <span style="color: #4d99bf">&#x27;master&#x27;</span>, _master,
              <span style="color: #4d99bf">&#x27;branch&#x27;</span>, _branch.branch, 
              <span style="color: #4d99bf">&#x27;branch_uid&#x27;</span>, _branch.branch_uid, 
              <span style="color: #4d99bf">&#x27;sources&#x27;</span>, _source.source,
              <span style="color: #4d99bf">&#x27;sources_uid&#x27;</span>, _source.source_uid
            );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
          $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __add {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__add(_regclass <span style="color: #C76A40">regclass</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            PROPOSE: Coletar nova modificação ocoridas numa tabela que ainda não foram versionadas,
              coletadas ou que a versão esteje ultrapassadas
           \*\/</span>
          _share <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">share</span>;
          _statement <span style="color: #C76A40">text</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> s.* <span style="color: #C76A40;
            font-weight: 800;">into</span> _share
            <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">share</span> s
            <span style="color: #C76A40;
            font-weight: 800;">where</span> s.share_regclass = _regclass
          ;

          <span style="color: #888">-- language=PostgreSQL</span>
          _statement :=  $<span style="color: #C76A40;
            font-weight: 800;">sql</span>$
            <span style="color: #C76A40;
            font-weight: 800;">with</span>
              __unvercollector <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  uvcol.*,
                  rank() <span style="color: #C76A40;
            font-weight: 800;">over</span> ( <span style="color: #C76A40;
            font-weight: 800;">partition</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> uvcol.collector_ref <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> uvcol.collector_sequence <span style="color: #C76A40;
            font-weight: 800;">desc</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> rank
                <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector uvcol
                <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> uvcol.collector_version
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> uvcol.collector_share_regclass = (<span style="color: #1f7199">$1</span>::<span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">share</span>).share_regclass
              ), __object <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    o.*,
                    rank() <span style="color: #C76A40;
            font-weight: 800;">over</span> ( <span style="color: #C76A40;
            font-weight: 800;">partition</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> o.object_ref <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> o.object_seq <span style="color: #C76A40;
            font-weight: 800;">desc</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> rank
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span> o
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> o.object_share_regclass = (<span style="color: #1f7199">$1</span>::<span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">share</span>).share_regclass
              ), __change <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    to_jsonb( _t ) <span style="color: #C76A40;
            font-weight: 800;">as</span> change,
                    lib.sets_ref( to_jsonb( _t ), (<span style="color: #1f7199">$1</span>::<span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">share</span>).share_pks ) <span style="color: #C76A40;
            font-weight: 800;">as</span> <span style="color: #C76A40;
            font-weight: 800;">ref</span>
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> _$<span style="color: #C76A40;
            font-weight: 800;">table</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> _t
              ), __news <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span> _c.*, coalesce( uvcol.collector_metadata, vcol.collector_metadata ) <span style="color: #C76A40;
            font-weight: 800;">as</span> collector_metadata
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __change _c
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span>  __object _ol <span style="color: #C76A40;
            font-weight: 800;">on</span> _ol.object_ref = _c.<span style="color: #C76A40;
            font-weight: 800;">ref</span>
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> _ol.rank = <span style="color: #C76A40">1</span>
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector vcol <span style="color: #C76A40;
            font-weight: 800;">on</span> vcol.collector_uid = _ol.object_collector_uid
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> __unvercollector uvcol <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> uvcol.collector_version
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> uvcol.rank = <span style="color: #C76A40">1</span>
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> uvcol.collector_share_regclass = ( <span style="color: #1f7199">$1</span>::<span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">share</span> ).share_regclass
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> uvcol.collector_ref = _c.<span style="color: #C76A40;
            font-weight: 800;">ref</span>
                <span style="color: #C76A40;
            font-weight: 800;">where</span> (vcol.collector_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> vcol.collector_metadata != _c.change)
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ( uvcol.collector_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> uvcol.collector_metadata != _c.change )
              ) <span style="color: #C76A40;
            font-weight: 800;">select</span> col.*
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __news _n
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__collect_change(
                      ( <span style="color: #1f7199">$1</span>::<span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">share</span> ).share_regclass,
                      _n.change,
                      _n.collector_metadata,
                      <span style="color: #C76A40;
            font-weight: 800;">case</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> _n.collector_metadata <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #4d99bf">&#x27;I&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #4d99bf">&#x27;U&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">end</span>,
                      <span style="color: #C76A40;
            font-weight: 800;">ref</span>
                    ) col <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
          $<span style="color: #C76A40;
            font-weight: 800;">sql</span>$;

          _statement := replace( _statement, <span style="color: #4d99bf">&#x27;_$table&#x27;</span>::<span style="color: #C76A40">text</span>, _regclass::<span style="color: #C76A40">text</span> );
          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">execute</span> _statement <span style="color: #C76A40;
            font-weight: 800;">using</span> _share;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface pull {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.pull(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\**
              PROPOSE: Descaregar para o cluster local todas as modificações vinda dos outros cluster
              args := {
                server:ClusterSource,
                objects:( ObjectRevision[] )| DynamicReducer|any,
                ignores:cluster.ignore[]
                result:ClusterResult[]
                total:number
                limit:number,
                revCode:number,
                rejected:number,
              }
            \*\/</span>
            _limit <span style="color: #C76A40">int</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;limit&#x27;</span>;
            _server <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
            _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
            _local <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
            _data <span style="color: #C76A40">record</span>;
            _i <span style="color: #C76A40">record</span>;
            _obj <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;<span style="color: #4d99bf">&#x27;objects&#x27;</span>;
            _objests <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>[]::<span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span>[];
            _next <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span>;
            _pull <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.pull;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            _pull.pull_server     :=  args-&gt;<span style="color: #4d99bf">&#x27;server&#x27;</span>;
            _pull.pull_objects    :=  args-&gt;<span style="color: #4d99bf">&#x27;objects&#x27;</span>;
            _pull.pull_ignores    :=  args-&gt;<span style="color: #4d99bf">&#x27;ignores&#x27;</span>;
            _pull.pull_result     :=  args-&gt;<span style="color: #4d99bf">&#x27;result&#x27;</span>;
            _pull.pull_total      :=  args-&gt;&gt;<span style="color: #4d99bf">&#x27;total&#x27;</span>;
            _pull.pull_limit      :=  args-&gt;&gt;<span style="color: #4d99bf">&#x27;limit&#x27;</span>;
            _pull.pull_revcode    :=  args-&gt;&gt;<span style="color: #4d99bf">&#x27;revCode&#x27;</span>;
            _pull.pull_rejected   :=  args-&gt;&gt;<span style="color: #4d99bf">&#x27;rejected&#x27;</span>;
            
            <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _pull
              <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets_in( _pull )
            ;
            
            _server := jsonb_populate_record( _server, args-&gt;<span style="color: #4d99bf">&#x27;server&#x27;</span>);
            _cluster := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster( _server.cluster_identifier );
            _local := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local(  );

            <span style="color: #C76A40;
            font-weight: 800;">with</span> __object <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> o.*
                <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( _obj ) e( document )
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::<span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span>, e.document ) o <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> max( _o.object_seq ) <span style="color: #C76A40;
            font-weight: 800;">as</span> _cluster_sequence
              <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __object _o
            ;

            <span style="color: #C76A40;
            font-weight: 800;">set</span> session_replication_role <span style="color: #C76A40;
            font-weight: 800;">to</span> <span style="color: #C76A40;
            font-weight: 800;">replica</span>;

            <span style="color: #C76A40;
            font-weight: 800;">for</span> _i <span style="color: #C76A40;
            font-weight: 800;">in</span>
              <span style="color: #C76A40;
            font-weight: 800;">with</span> __map <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    obj <span style="color: #C76A40;
            font-weight: 800;">as</span> _object,
                    col <span style="color: #C76A40;
            font-weight: 800;">as</span> _collector,
                    ( e.document-&gt;&gt;<span style="color: #4d99bf">&#x27;_origin_identifier&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> _origin_identifier,
                    coalesce( cmp.classnameref, e.document-&gt;&gt;<span style="color: #4d99bf">&#x27;_regclass&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> _classname,
                    e.document-&gt;<span style="color: #4d99bf">&#x27;_change&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> _change,
                    e.document-&gt;&gt;<span style="color: #4d99bf">&#x27;_result&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> _result,
                    ( e.document-&gt;&gt;<span style="color: #4d99bf">&#x27;_regclass&#x27;</span> )::<span style="color: #C76A40">regclass</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> _regclass,
                    col.collector_uid <span style="color: #C76A40;
            font-weight: 800;">as</span> current_collector_uid,
                    col.collector_transuid <span style="color: #C76A40;
            font-weight: 800;">as</span> current_transuid
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;objects&#x27;</span> ) e ( document )
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::<span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span>, e.document ) <span style="color: #C76A40;
            font-weight: 800;">as</span> obj <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::<span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector, e.document ) <span style="color: #C76A40;
            font-weight: 800;">as</span> col <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.classmap cmp <span style="color: #C76A40;
            font-weight: 800;">on</span> e.document-&gt;&gt;<span style="color: #4d99bf">&#x27;_regclass&#x27;</span> = cmp.classname
              ), __objects <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    v.*,
                    co.cluster_uid <span style="color: #C76A40;
            font-weight: 800;">as</span> _origin,
                    _cluster.cluster_uid <span style="color: #C76A40;
            font-weight: 800;">as</span> _receiver,
                    ( v._object ).object_ref,
                    ( v._object ).object_date,
                    ( v._object ).object_uid,
                    ( v._collector ).collector_uid,
                    ( v._collector ).collector_transuid
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __map v
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> co <span style="color: #C76A40;
            font-weight: 800;">on</span> co.cluster_identifier =  v._origin_identifier

            ), __classnames <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span> array_agg( <span style="color: #C76A40;
            font-weight: 800;">distinct</span>  mp._classname) <span style="color: #C76A40;
            font-weight: 800;">as</span> allclass
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __map mp
            
              ), __row <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span> _r.*
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __classnames
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__rows( <span style="color: #C76A40;
            font-weight: 800;">variadic</span> allclass ) _r <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>

              ), __current <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    _up.object_ref,
                    _up._classname,
                    e.document <span style="color: #C76A40;
            font-weight: 800;">as</span> _current,
                    max( ob.object_date ) <span style="color: #C76A40;
            font-weight: 800;">as</span> <span style="color: #C76A40">date</span>
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __objects _up
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> __row e  <span style="color: #C76A40;
            font-weight: 800;">on</span> e.classname = _up._regclass
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> e.reference = _up.object_ref 
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span> ob <span style="color: #C76A40;
            font-weight: 800;">on</span> ob.object_share_regclass = _up._classname
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> ob.object_ref = _up.object_ref
                  <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                    _up.object_ref,
                    _up._classname,
                    e.document
                  
              ), __new <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    _ob.*,
                    _cur.*,
                    _created_object.object_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> _exists_object,
                    _create_collector.collector_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> _exists_collector,
                    _cur._current <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> _exists_ref,
                    (
                        _cur._current <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #888">-- Desatualiazado: Quando já existir previamente a instancia do objecto na tabela</span>
                        <span style="color: #C76A40;
            font-weight: 800;">and</span> _cur.date <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #888">-- Desatualiazado: &amp; Quando ja existir pelo menus algum objecto para essa referencia</span>
                        <span style="color: #C76A40;
            font-weight: 800;">and</span> _cur.date &gt; _ob.object_date <span style="color: #888">-- Desatualizado: &amp; Quando a data a instancia atual for superior a data do objecto recebido</span>

        <span style="color: #888">--               not all: _cur._current is null -- Quando ainda não existir a instancia do dado na tabela</span>
        <span style="color: #888">--               or  _cur.date is null -- Ainda não existir nenhuma revisão para a referencia do objecto</span>
        <span style="color: #888">--               or _cur.date &lt; _ob.object_date -- Data da ultima revisão registrada for inferior a data da reisão recebida</span>
                    ) <span style="color: #C76A40;
            font-weight: 800;">as</span> _outdate
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __objects _ob
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __current _cur <span style="color: #C76A40;
            font-weight: 800;">on</span> _ob.object_ref = _cur.object_ref <span style="color: #C76A40;
            font-weight: 800;">and</span> _ob._classname = _cur._classname

                    <span style="color: #888">-- object_uid, object_share_regclass, object_cluster_origin</span>
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span> _created_object <span style="color: #C76A40;
            font-weight: 800;">on</span>
                      ( _ob ).object_uid = _created_object.object_uid
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> ( _ob ).collector_transuid = _created_object.object_transuid
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> _cur._classname = _created_object.object_share_regclass
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> ( _ob )._origin = _created_object.object_cluster_origin

                    <span style="color: #888">-- collector_uid, collector_transuid, collector_share_regclass, collector_cluster_origin</span>
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector _create_collector <span style="color: #C76A40;
            font-weight: 800;">on</span>
                      ( _ob ).collector_uid = _create_collector.collector_uid
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> ( _ob ).collector_transuid = _create_collector.collector_transuid
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> _cur._classname  = _create_collector.collector_share_regclass
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> ( _ob )._origin = _create_collector.collector_cluster_origin
                ) <span style="color: #C76A40;
            font-weight: 800;">select</span>  *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __new
            <span style="color: #C76A40;
            font-weight: 800;">loop</span>
              _next := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__pull( to_jsonb( _i ) );
              <span style="color: #C76A40;
            font-weight: 800;">if</span> _next.object_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                _objests := _objests || _next;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
            <span style="color: #C76A40;
            font-weight: 800;">set</span> session_replication_role <span style="color: #C76A40;
            font-weight: 800;">to</span> <span style="color: #C76A40;
            font-weight: 800;">default</span>;

            <span style="color: #C76A40;
            font-weight: 800;">return query</span>
              <span style="color: #C76A40;
            font-weight: 800;">with</span> __object <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span> (o::<span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span>).*
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> unnest( _objests ) o
              ), __collector <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    _o.*,
                    c.*,
                    _o.object_share_regclass <span style="color: #C76A40;
            font-weight: 800;">as</span> _regclass,
                    cc.cluster_identifier <span style="color: #C76A40;
            font-weight: 800;">as</span> _origin_identifier
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __object _o
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector c <span style="color: #C76A40;
            font-weight: 800;">on</span> _o.object_collector_uid = c.collector_uid
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> _o.object_transuid = c.collector_transuid
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> _o.object_cluster_origin = c.collector_cluster_origin
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> cc <span style="color: #C76A40;
            font-weight: 800;">on</span> _o.object_cluster_origin = cc.cluster_uid
              )<span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _c )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __collector _c
            ;

            <span style="color: #888">-- Atualizar a versão do cluster</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span>
            __result <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  pc.cluster_identifier,
                  coalesce( pc.cluster_version, <span style="color: #C76A40">0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_version,
                  coalesce( pc.cluster_sequence, <span style="color: #C76A40">0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_sequence
                <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;result&#x27;</span>) e( doc )
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::<span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>, e.doc ) pc <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
            ), __clusters <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  c.cluster_identifier,
                  c.cluster_sequence,
                  max( o.object_origincver ) <span style="color: #C76A40;
            font-weight: 800;">as</span> object_origincver,
                  max( o.object_seq ) <span style="color: #C76A40;
            font-weight: 800;">as</span> object_seq
                <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span> o
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c <span style="color: #C76A40;
            font-weight: 800;">on</span> c.cluster_uid = o.object_cluster_origin
                <span style="color: #C76A40;
            font-weight: 800;">where</span> o.object_cluster_origin != _local.cluster_uid
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> c.cluster_uid

            ), __status <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  _r.cluster_identifier,
                  <span style="color: #C76A40;
            font-weight: 800;">case</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> _c.cluster_identifier = _server.cluster_identifier <span style="color: #C76A40;
            font-weight: 800;">then</span> _r.cluster_version
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> _c.object_origincver &gt;= _r.cluster_version <span style="color: #C76A40;
            font-weight: 800;">then</span> _c.object_origincver
                    <span style="color: #C76A40;
            font-weight: 800;">else</span> _r.cluster_version
                  <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_version,
                  <span style="color: #C76A40;
            font-weight: 800;">case</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> _c.cluster_identifier = _server.cluster_identifier <span style="color: #C76A40;
            font-weight: 800;">then</span> _r.cluster_sequence
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> _c.cluster_sequence &gt;= _r.cluster_sequence <span style="color: #C76A40;
            font-weight: 800;">then</span> _c.cluster_sequence
                    <span style="color: #C76A40;
            font-weight: 800;">else</span> _r.cluster_sequence
                  <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_sequence
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __clusters _c
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __result _r <span style="color: #C76A40;
            font-weight: 800;">on</span> _c.cluster_identifier = _r.cluster_identifier

            ) <span style="color: #C76A40;
            font-weight: 800;">update</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c
                <span style="color: #C76A40;
            font-weight: 800;">set</span>
                  cluster_version = _s.cluster_version,
                  cluster_sequence = _s.cluster_sequence,
                  cluster_verbose = <span style="color: #C76A40;
            font-weight: 800;">case</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> _s.cluster_identifier = _cluster.cluster_identifier
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> _limit <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> _limit &gt; jsonb_array_length( _obj ) <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>
                    <span style="color: #C76A40;
            font-weight: 800;">else</span> c.cluster_verbose
                  <span style="color: #C76A40;
            font-weight: 800;">end</span>
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __status _s
                <span style="color: #C76A40;
            font-weight: 800;">where</span> c.cluster_identifier = _s.cluster_identifier
            ;

            <span style="color: #C76A40;
            font-weight: 800;">with</span> __ignore <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> _pi.*
                <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;ignores&#x27;</span> ) e( doc )
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::<span style="color: #C76A40;
            font-weight: 800;">cluster</span>.ignore, e.doc ) _pi <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
            ) <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.ignore
                <span style="color: #C76A40;
            font-weight: 800;">select</span> _ignor.*
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __ignore _ignor
            ;
            
            <span style="color: #C76A40;
            font-weight: 800;">update</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.pull
              <span style="color: #C76A40;
            font-weight: 800;">set</span> pull_status = <span style="color: #C76A40">1</span>,
                  pull_pulled = to_jsonb( _objests )
              <span style="color: #C76A40;
            font-weight: 800;">where</span> pull_uid = _pull.pull_uid;

            <span style="color: #C76A40;
            font-weight: 800;">return query</span>
              <span style="color: #C76A40;
            font-weight: 800;">with</span> __clusters <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    c.cluster_identifier,
                    c.cluster_name,
                    c.cluster_path,
                    c.cluster_version,
                    c.cluster_sequence
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c
              ) <span style="color: #C76A40;
            font-weight: 800;">select</span> jsonb_agg( _c )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __clusters _c;
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __format_proc {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format_proc(<span style="color: #C76A40">regproc</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">STABLE</span> <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">select</span> format( <span style="color: #4d99bf">&#x27;%I.%I&#x27;</span>, p.pronamespace::<span style="color: #C76A40">regnamespace</span>::<span style="color: #C76A40">text</span>, p.proname::<span style="color: #C76A40">text</span>  )
          <span style="color: #C76A40;
            font-weight: 800;">from</span> pg_proc p
          <span style="color: #C76A40;
            font-weight: 800;">where</span> format( <span style="color: #4d99bf">&#x27;%I.%I&#x27;</span>, p.pronamespace::<span style="color: #C76A40">regnamespace</span>::<span style="color: #C76A40">text</span>, p.proname::<span style="color: #C76A40">text</span>  )::<span style="color: #C76A40">regproc</span> = <span style="color: #1f7199">$1</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __create_object_version {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__create_object_version(<span style="color: #C76A40">regclass</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">version</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _regclass <span style="color: #C76A40">regclass</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( <span style="color: #1f7199">$1</span> );
          _share <span style="color: #C76A40">record</span>;
          _object <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span>;
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _version <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">version</span>;
          _data <span style="color: #C76A40">record</span>;
          _results <span style="color: #C76A40">record</span>;
          _pid <span style="color: #C76A40">int</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> pg_backend_pid();
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _cluster := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local(  );
          _version := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_version_local( _regclass );

          <span style="color: #C76A40;
            font-weight: 800;">select</span> s.* <span style="color: #C76A40;
            font-weight: 800;">into</span> _share
            <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">share</span> s
            <span style="color: #C76A40;
            font-weight: 800;">where</span> s.share_regclass::<span style="color: #C76A40">regclass</span> = _regclass;

          _object.object_share_regclass := _share.share_regclass;
          _object.object_cluster_origin := _cluster.cluster_uid;
          _object.object_cluster_receiver := _cluster.cluster_uid;

          <span style="color: #C76A40;
            font-weight: 800;">with</span> __objects <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
              count( o.object_uid )  <span style="color: #C76A40;
            font-weight: 800;">as</span> _object_localversion,
              count( o.object_uid ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> o.object_share_regclass::<span style="color: #C76A40">regclass</span> = _regclass <span style="color: #C76A40;
            font-weight: 800;">and</span> o.object_cluster_origin = _cluster.cluster_uid )  <span style="color: #C76A40;
            font-weight: 800;">as</span> _object_originsseq,
              count( o.object_uid ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> o.object_share_regclass::<span style="color: #C76A40">regclass</span> = _regclass  )  <span style="color: #C76A40;
            font-weight: 800;">as</span> _object_sseq
              <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span> o
          ), __collectors <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
              count( c.collector_uid ) <span style="color: #C76A40;
            font-weight: 800;">as</span> collectors,
              min( c.collector_sequence ) <span style="color: #C76A40;
            font-weight: 800;">as</span> _collector_minseq,
              max( c.collector_sequence ) <span style="color: #C76A40;
            font-weight: 800;">as</span> _collector_maxseq
            <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector c
            <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> c.collector_version
              <span style="color: #C76A40;
            font-weight: 800;">and</span> c.collector_share_regclass::<span style="color: #C76A40">regclass</span> = _regclass
              <span style="color: #C76A40;
            font-weight: 800;">and</span> c.collector_cluster_origin = _cluster.cluster_uid
              <span style="color: #C76A40;
            font-weight: 800;">and</span> c.collector_pid = _pid
              <span style="color: #C76A40;
            font-weight: 800;">and</span> c.collector_ref <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _data <span style="color: #C76A40;
            font-weight: 800;">from</span> __collectors, __objects;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _data.collectors = <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> _version; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">with</span> __apply_collector <span style="color: #C76A40;
            font-weight: 800;">as</span>  (
              <span style="color: #C76A40;
            font-weight: 800;">update</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector c
                <span style="color: #C76A40;
            font-weight: 800;">set</span>
                  collector_version = <span style="color: #C76A40;
            font-weight: 800;">true</span>,
                  collector_ref = lib.sets_ref( coalesce( collector_old, collector_metadata ), _share.share_pks ),
                  collector_order = c.collector_sequence - _data._collector_minseq +<span style="color: #C76A40">1</span>,
                  collector_minseq = _data._collector_minseq,
                  collector_maxseq = _data._collector_maxseq
                <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> c.collector_version
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> c.collector_share_regclass::<span style="color: #C76A40">regclass</span> = _regclass
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> c.collector_ref <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> c.collector_pid = _pid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> c.collector_cluster_origin = _cluster.cluster_uid
                <span style="color: #C76A40;
            font-weight: 800;">returning</span>
                  c.collector_transuid,
                  c.collector_uid,
                  c.collector_sequence,
                  c.collector_minseq,
                  c.collector_maxseq,
                  c.collector_share_regclass,
                  c.collector_ref,
                  c.collector_metadata,
                  c.collector_date,
                  c.collector_order
              ) ,__creat_object <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span> (
                  object_ref,
                  object_transuid,
                  object_share_regclass,
                  object_cluster_origin,
                  object_cluster_receiver,
                  object_originver,
                  object_originsver,
                  object_origincver,
                  object_originsseq,
                  object_sseq,
                  object_originrev,
                  object_collector_uid
                ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
                      _ac.collector_ref,
                      _ac.collector_transuid,
                      <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( _regclass ),
                      _object.object_cluster_origin,
                      _object.object_cluster_receiver,
                      _ac.collector_sequence,
                      _version.version_number,
                      _cluster.cluster_version,
                      _data._object_originsseq + _ac.collector_order,
                      _data._object_sseq + _ac.collector_order,
                      count( col.collector_uid )+<span style="color: #C76A40">1</span>,
                      _ac.collector_uid
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> __apply_collector  _ac
                      <span style="color: #C76A40;
            font-weight: 800;">left join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector col <span style="color: #C76A40;
            font-weight: 800;">on</span>  _ac.collector_ref = col.collector_ref
                        <span style="color: #C76A40;
            font-weight: 800;">and</span> _ac.collector_uid != col.collector_uid
                    <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                      _regclass,
                      _object.object_cluster_origin,
                      _object.object_cluster_receiver,
                      _version.version_number,
                      _ac.collector_order,
                      _ac.collector_sequence,
                      _ac.collector_ref,
                      _ac.collector_metadata,
                      _ac.collector_uid,
                      _ac.collector_transuid
                    <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> _ac.collector_sequence
                    <span style="color: #C76A40;
            font-weight: 800;">returning</span>
                        object_uid,
                        object_originver,
                        object_transuid,
                        object_seq,
                        object_cluster_origin,
                        object_share_regclass,
                        object_collector_uid
              )
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  count( o.object_uid ) <span style="color: #C76A40;
            font-weight: 800;">as</span> objects,
                  max( o.object_originver ) <span style="color: #C76A40;
            font-weight: 800;">as</span> object_originver,
                  max( c.collector_sequence ) <span style="color: #C76A40;
            font-weight: 800;">as</span> collector_sequence,
                  max( o.object_seq ) <span style="color: #C76A40;
            font-weight: 800;">as</span> object_seq
                <span style="color: #C76A40;
            font-weight: 800;">into</span> _results
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __creat_object o
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector c <span style="color: #C76A40;
            font-weight: 800;">on</span> c.collector_uid = o.object_collector_uid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> c.collector_transuid = o.object_transuid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> c.collector_cluster_origin = o.object_cluster_origin
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> c.collector_share_regclass = o.object_share_regclass
          ;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _results.objects &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">update</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">version</span>
                <span style="color: #C76A40;
            font-weight: 800;">set</span> version_number = version_number +<span style="color: #C76A40">1</span>
                <span style="color: #C76A40;
            font-weight: 800;">where</span> version_uid = _version.version_uid
                <span style="color: #C76A40;
            font-weight: 800;">returning</span>  * <span style="color: #C76A40;
            font-weight: 800;">into</span> _version
              ;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _results.objects &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">update</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>
                <span style="color: #C76A40;
            font-weight: 800;">set</span> cluster_sequence = _results.object_seq,
                    cluster_version = cluster_version +<span style="color: #C76A40">1</span>,
                    cluster_objectver = _results.object_originver
                <span style="color: #C76A40;
            font-weight: 800;">where</span> cluster_uid = _cluster.cluster_uid;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> _version;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface status {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.status(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            PROPOSE: Devolver o atual estado do cluster cluster local, isso é até onde o atual custer conhecer os outros

            args:={}

            return ({
              cluster:[{
                cluster_identifier: CID,
                cluster_version: VN
                cluster_sequence
              }],
              versions:[{
                cluster_identifier: CID,
                share_regclass: SRC,
                version_number: VN,
              }],
              creq:?{
                cluster_version: VN
                cluster_sequence,
                versions: [{
                  share_regclass: SRC,
                  version_number: VN,
                }]
              }
            })
         \*\/</span>
        <span style="color: #888">--   _cluster_identifier character varying default args-&gt;&gt;&#x27;cluster_identifier&#x27;;</span>
        <span style="color: #888">--   _cluster cluster.cluster;</span>
        <span style="color: #888">--   _local cluster.cluster;</span>
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #888">--   _cluster := cluster._get_cluster( _cluster_identifier );</span>
        <span style="color: #888">--   _local := cluster._get_cluster_local(  );</span>

          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span>
          __clusters <span style="color: #C76A40;
            font-weight: 800;">as</span> (
             <span style="color: #C76A40;
            font-weight: 800;">select</span>
               c.cluster_identifier,
               c.cluster_name,
               c.cluster_path,
               c.cluster_version,
               c.cluster_sequence,
               c.cluster_verbose
             <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c
               <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> c.cluster_uid
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( array_agg( c ) )
          <span style="color: #C76A40;
            font-weight: 800;">from</span> __clusters c
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface load_clusters_local_as_remotes {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.load_clusters_local_as_remotes(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              cluster_path: PATH,
              cluster_grants:grants
            }
           \*\/</span>
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _cluster := jsonb_populate_record( _cluster, args );



          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span>
            __cluster <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  c.cluster_identifier,
                  c.cluster_name,
                  c.cluster_path,
                  _const.cluster_tcluster_remote <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_type
                <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c
                <span style="color: #C76A40;
            font-weight: 800;">where</span> c.cluster_type = _const.cluster_tcluster_local
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.can_send_revision( args )
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _c )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __cluster _c
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface declare_filter {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">PROCEDURE</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.declare_filter(<span style="color: #C76A40;
            font-weight: 800;">IN</span> <span style="color: #C76A40">regnamespace</span>, <span style="color: #C76A40;
            font-weight: 800;">IN</span> <span style="color: #C76A40">name</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, <span style="color: #C76A40;
            font-weight: 800;">IN</span> <span style="color: #C76A40;
            font-weight: 800;">share</span> <span style="color: #C76A40">regclass</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">regclass</span>, <span style="color: #C76A40;
            font-weight: 800;">IN</span> describe <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">procedure</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _regp <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;
          _statement <span style="color: #C76A40">text</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _regp := format( <span style="color: #4d99bf">&#x27;%I.%I&#x27;</span>, <span style="color: #1f7199">$1</span>, <span style="color: #C76A40">name</span> );

          <span style="color: #888">--language=PostgreSQL</span>
          _statement := format( $<span style="color: #C76A40;
            font-weight: 800;">sql</span>$
            <span style="color: #C76A40;
            font-weight: 800;">create</span> <span style="color: #C76A40;
            font-weight: 800;">function</span> __func_ ( <span style="color: #C76A40;
            font-weight: 800;">share</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, _object <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span>, _collector <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector, _req <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>, _origin <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> )
            <span style="color: #C76A40;
            font-weight: 800;">returns</span> <span style="color: #C76A40">boolean</span>
            <span style="color: #C76A40;
            font-weight: 800;">language</span> plpgsql <span style="color: #C76A40;
            font-weight: 800;">as</span> $body$
              <span style="color: #C76A40;
            font-weight: 800;">declare</span>
              <span style="color: #C76A40;
            font-weight: 800;">begin</span>
                <span style="color: #888">-- Accepted object</span>
                <span style="color: #888">-- return false;</span>

                <span style="color: #888">-- Accepted object</span>
                <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>;
              <span style="color: #C76A40;
            font-weight: 800;">end</span>;
            $body$
          $<span style="color: #C76A40;
            font-weight: 800;">sql</span>$ );

          _statement := replace( _statement, <span style="color: #4d99bf">&#x27;__func_&#x27;</span>, _regp );
          <span style="color: #C76A40;
            font-weight: 800;">execute</span> _statement;

          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">filter</span>(
            filter_regclass,
            filter_regproc,
            filter_name,
            filter_describe
          ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
            <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( <span style="color: #C76A40;
            font-weight: 800;">share</span> ),
            _regp::<span style="color: #C76A40">regproc</span>::<span style="color: #C76A40">text</span>,
            <span style="color: #C76A40">name</span>,
            describe
         );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">procedure</span>$

        </pre>
        */ source(): void;
      }

      export interface __tg_version_add_when_insert {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__tg_version_add_when_insert()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">perform</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__collect_change(
              <span style="color: #397300">tg_relid</span>::<span style="color: #C76A40">regclass</span>,
              to_jsonb( <span style="color: #397300">new</span> )
            );
          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __generate_cluster_code {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__generate_cluster_code()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          chars <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;0123456789&#x27;</span>;
          code <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;
          repeate <span style="color: #C76A40">integer</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40">0</span>;
          codeLen <span style="color: #C76A40">integer</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40">3</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">while</span> code <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>
            code := lib.dset_random_text( chars, codeLen );
            <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
                <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>
                  <span style="color: #C76A40;
            font-weight: 800;">where</span>  code <span style="color: #C76A40;
            font-weight: 800;">in</span> ( <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.cluster_code, lpad(<span style="color: #4d99bf">&#x27;&#x27;</span>, codeLen, <span style="color: #4d99bf">&#x27;0&#x27;</span> ) )
            ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
              code := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
              <span style="color: #C76A40;
            font-weight: 800;">if</span> repeate  = <span style="color: #C76A40">9999</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                chars := <span style="color: #4d99bf">&#x27;012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;
              elseif repeate = <span style="color: #C76A40">99999</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                chars := <span style="color: #4d99bf">&#x27;012345678901234567890123456789012345678901234567890123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;
              elseif repeate = <span style="color: #C76A40">999999</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                chars := <span style="color: #4d99bf">&#x27;012345678901234567890123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;
              elseif repeate = <span style="color: #C76A40">9999999</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                chars := <span style="color: #4d99bf">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;
              elseif repeate = <span style="color: #C76A40">99999999</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;O sistema não consegue determinar um codigo para o cluster&#x27;</span>;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            repeate := repeate +<span style="color: #C76A40">1</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> code;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface unlink_cluster {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.unlink_cluster(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(result <span style="color: #C76A40">boolean</span>, message <span style="color: #C76A40">text</span>, data <span style="color: #C76A40">jsonb</span>, error <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _cluster := jsonb_populate_record( _cluster, args );

          <span style="color: #C76A40;
            font-weight: 800;">update</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>
            <span style="color: #C76A40;
            font-weight: 800;">set</span> cluster_machineid = <span style="color: #C76A40;
            font-weight: 800;">null</span>,
                cluster_api = <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__create_api()
            <span style="color: #C76A40;
            font-weight: 800;">where</span> cluster_uid = _cluster.cluster_uid
              <span style="color: #C76A40;
            font-weight: 800;">and</span> cluster_type = _const.cluster_tcluster_child
            <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _cluster;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _cluster.cluster_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            unlink_cluster.result := <span style="color: #C76A40;
            font-weight: 800;">false</span>;
            unlink_cluster.message := <span style="color: #4d99bf">&#x27;Cluster not found!&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            unlink_cluster.result := <span style="color: #C76A40;
            font-weight: 800;">true</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return next</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __collect_change {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__collect_change(<span style="color: #C76A40">regclass</span>, _change <span style="color: #C76A40">jsonb</span>, _old <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>, _operation <span style="color: #C76A40">character</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #4d99bf">&#x27;I&#x27;</span>::bpchar, _ref <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>, _force <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _collector <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector;
          _origin <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;00000000-0000-0000-0000-000000000000&#x27;</span>::<span style="color: #C76A40">uuid</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _force <span style="color: #C76A40;
            font-weight: 800;">and</span> _change <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _force <span style="color: #C76A40;
            font-weight: 800;">and</span> _old <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> _change = _old <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _collector.collector_share_regclass := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( <span style="color: #1f7199">$1</span> );
          _collector.collector_metadata := _change;
          _collector.collector_changes := <span style="color: #C76A40;
            font-weight: 800;">array</span>(
            <span style="color: #C76A40;
            font-weight: 800;">select</span> e.key
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_each( _change||coalesce( _old, jsonb_build_object() ) ) e( key, <span style="color: #C76A40;
            font-weight: 800;">value</span> )
              <span style="color: #C76A40;
            font-weight: 800;">where</span> _old <span style="color: #C76A40;
            font-weight: 800;">isnull</span>
                <span style="color: #C76A40;
            font-weight: 800;">or</span> _change -&gt; ( e.key ) != _old -&gt;( e.key )
          );

          _collector.collector_changevalue = (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> jsonb_object_agg( e.key, e.<span style="color: #C76A40;
            font-weight: 800;">value</span> )
            <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_each( _change||coalesce( _old, jsonb_build_object() ) ) e( key, <span style="color: #C76A40;
            font-weight: 800;">value</span> )
            <span style="color: #C76A40;
            font-weight: 800;">where</span> _old <span style="color: #C76A40;
            font-weight: 800;">isnull</span>
               <span style="color: #C76A40;
            font-weight: 800;">or</span> _change -&gt; ( e.key ) != _old -&gt;( e.key )
          );

          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector(
            collector_share_regclass,
            collector_metadata,
            collector_metaapply,
            collector_changevalue,
            collector_changes,
            collector_cluster_origin,
            collector_old,
            collector_originold,
            collector_operation,
            collector_ref
          ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
            _collector.collector_share_regclass,
            _collector.collector_metadata,
            _collector.collector_metadata,
            _collector.collector_changevalue,
            _collector.collector_changes,
            _origin,
            _old,
            _old,
            coalesce( _operation, <span style="color: #C76A40;
            font-weight: 800;">case</span>
              <span style="color: #C76A40;
            font-weight: 800;">when</span> _old <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #4d99bf">&#x27;I&#x27;</span>
              <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #4d99bf">&#x27;U&#x27;</span>
            <span style="color: #C76A40;
            font-weight: 800;">end</span>),
            _ref
          ) <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _collector;

          <span style="color: #C76A40;
            font-weight: 800;">return next</span> _collector;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_cluster {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster(<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$ <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> <span style="color: #C76A40;
            font-weight: 800;">where</span> cluster_identifier = <span style="color: #1f7199">$1</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface next {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.next(<span style="color: #C76A40">name</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, sub <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, zero_base <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>, steep <span style="color: #C76A40">integer</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40">1</span>, lpad <span style="color: #C76A40">integer</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40">0</span>, lpad_char <span style="color: #C76A40">character</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #4d99bf">&#x27;&#x27;</span>::bpchar, exist <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">text</span>, exist_limit <span style="color: #C76A40">integer</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40">1000</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _sequence <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">sequence</span>;
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _repeat <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>;
          _next_value <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;
          _record <span style="color: #C76A40">record</span>;
          _iterate <span style="color: #C76A40">int</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40">0</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">lock</span> <span style="color: #C76A40;
            font-weight: 800;">table</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">sequence</span> ;
          <span style="color: #C76A40;
            font-weight: 800;">if</span> sub <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> sub := <span style="color: #4d99bf">&#x27;&#x27;</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">if</span> next.name <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;Sequence name is required!&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> next.steep = <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;Sequence steep can not by zero!&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> exist <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            exist_limit := coalesce( exist_limit, <span style="color: #C76A40">1000</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _cluster := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local();

          <span style="color: #C76A40;
            font-weight: 800;">while</span> _repeat <span style="color: #C76A40;
            font-weight: 800;">loop</span>

            <span style="color: #C76A40;
            font-weight: 800;">update</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">sequence</span>
              <span style="color: #C76A40;
            font-weight: 800;">set</span> <span style="color: #C76A40;
            font-weight: 800;">sequence</span> = <span style="color: #C76A40;
            font-weight: 800;">sequence</span>.<span style="color: #C76A40;
            font-weight: 800;">sequence</span> + <span style="color: #C76A40;
            font-weight: 800;">sequence</span>.steep
              <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">sequence</span>.name = next.name
                <span style="color: #C76A40;
            font-weight: 800;">and</span>  next.sub = <span style="color: #C76A40;
            font-weight: 800;">sequence</span>.sub
              <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _sequence
            ;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _sequence.name <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              next.zero_base := coalesce( next.zero_base, <span style="color: #C76A40;
            font-weight: 800;">false</span> );
              next.steep := coalesce( next.steep, <span style="color: #C76A40">1</span> );

              <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">sequence</span> ( <span style="color: #C76A40">name</span>, steep, zerobase, lpad, lpad_char, sub, <span style="color: #C76A40;
            font-weight: 800;">sequence</span> )
                <span style="color: #C76A40;
            font-weight: 800;">values</span> ( next.name, next.steep , next.zero_base, next.lpad, next.lpad_char, next.sub,
                  <span style="color: #C76A40;
            font-weight: 800;">case</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> next.zero_base <span style="color: #C76A40;
            font-weight: 800;">then</span> next.steep
                    <span style="color: #C76A40;
            font-weight: 800;">else</span> next.steep
                  <span style="color: #C76A40;
            font-weight: 800;">end</span>
                )
              <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _sequence;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _sequence.zerobase <span style="color: #C76A40;
            font-weight: 800;">then</span>
              _sequence.<span style="color: #C76A40;
            font-weight: 800;">sequence</span> := _sequence.<span style="color: #C76A40;
            font-weight: 800;">sequence</span> + <span style="color: #C76A40;
            font-weight: 800;">case</span>
                <span style="color: #C76A40;
            font-weight: 800;">when</span> _sequence.steep &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">-1</span>
                <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">1</span>
              <span style="color: #C76A40;
            font-weight: 800;">end</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            _next_value :=  format( <span style="color: #4d99bf">&#x27;%s%s&#x27;</span>, _cluster.cluster_code, lpad( _sequence.<span style="color: #C76A40;
            font-weight: 800;">sequence</span>::<span style="color: #C76A40">text</span>, greatest( _sequence.lpad, length( _sequence.<span style="color: #C76A40;
            font-weight: 800;">sequence</span>::<span style="color: #C76A40">text</span> ) ), _sequence.lpad_char ) );
            _repeat := <span style="color: #C76A40;
            font-weight: 800;">false</span>;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> exist <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #bc6060">&lt;&lt;find_duplicate&gt;&gt;</span>
              <span style="color: #C76A40;
            font-weight: 800;">for</span> _record <span style="color: #C76A40;
            font-weight: 800;">in</span> <span style="color: #C76A40;
            font-weight: 800;">execute</span> exist <span style="color: #C76A40;
            font-weight: 800;">using</span> _next_value <span style="color: #C76A40;
            font-weight: 800;">loop</span>
                _repeat := <span style="color: #C76A40;
            font-weight: 800;">true</span>;
                <span style="color: #C76A40;
            font-weight: 800;">exit</span> find_duplicate;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            _iterate := _iterate +<span style="color: #C76A40">1</span>;
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _iterate = exist_limit <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;Next code generation limit&#x27;</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> _next_value;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_version_local {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_version_local(<span style="color: #C76A40">regclass</span>, <span style="color: #C76A40;
            font-weight: 800;">increment</span> boolean DEFAULT false)
         RETURNS cluster.version
         LANGUAGE plpgsql
         STRICT
        AS $function$
        declare
          _version cluster.version;
          _cluster cluster.cluster;
        begin
          _cluster := cluster._get_cluster_local();

          if coalesce( <span style="color: #C76A40;
            font-weight: 800;">increment</span>, false ) then
            update cluster.version
              set version_number = version_number +<span style="color: #C76A40">1</span>
              <span style="color: #C76A40;
            font-weight: 800;">where</span> version_share_regclass::<span style="color: #C76A40">regclass</span> = <span style="color: #1f7199">$1</span>
                <span style="color: #C76A40;
            font-weight: 800;">and</span> version_cluster_id = _cluster.cluster_uid
              <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _version
            ;
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _version
              <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">version</span>
              <span style="color: #C76A40;
            font-weight: 800;">where</span> version_cluster_id = _cluster.cluster_uid
                <span style="color: #C76A40;
            font-weight: 800;">and</span> version_share_regclass::<span style="color: #C76A40">regclass</span> = <span style="color: #1f7199">$1</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _version.version_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _version.version_number := lib.&quot;when&quot;( coalesce( <span style="color: #C76A40;
            font-weight: 800;">increment</span>, false ), <span style="color: #C76A40">1</span>, <span style="color: #C76A40">0</span> );
            _version.version_cluster_id := _cluster.cluster_uid;
            _version.version_share_regclass := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( <span style="color: #1f7199">$1</span> );
            <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _version <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets_in( _version );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> _version;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_cluster_child {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_child(identifier <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _cluster
            <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c
            <span style="color: #C76A40;
            font-weight: 800;">where</span> c.cluster_identifier = identifier
              <span style="color: #C76A40;
            font-weight: 800;">and</span> c.cluster_type = _const.cluster_tcluster_child
          ;
          <span style="color: #C76A40;
            font-weight: 800;">return</span>  _cluster;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface accept_remote_cluster {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.accept_remote_cluster(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">boolean</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _local <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _is_sub_path <span style="color: #C76A40">boolean</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;

          _can_receiver_sub_path_revision <span style="color: #C76A40">boolean</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _cluster := jsonb_populate_record( _cluster, args );

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _local := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local();
          _is_sub_path := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_sub_path( _local.cluster_path, _cluster.cluster_path );
          _local.cluster_path := coalesce( _local.cluster_path, <span style="color: #4d99bf">&#x27;/&#x27;</span> );
          _cluster.cluster_path := coalesce( _cluster.cluster_path, <span style="color: #4d99bf">&#x27;&#x27;</span> );
          _can_receiver_sub_path_revision := _const.cluster_grant_revision_sub_path = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _local.cluster_grants );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> (
            _cluster.cluster_path = _local.cluster_path
              <span style="color: #C76A40;
            font-weight: 800;">or</span> ( _is_sub_path <span style="color: #C76A40;
            font-weight: 800;">and</span> _can_receiver_sub_path_revision )
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">select</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __is_replication {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_replication()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">boolean</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
         <span style="color: #C76A40;
            font-weight: 800;">STABLE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _users <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.users;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _users := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__user_map();
          <span style="color: #C76A40;
            font-weight: 800;">return</span> _users.user_replication <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
            <span style="color: #C76A40;
            font-weight: 800;">and</span> _users.user_replication = &quot;current_user&quot;()::<span style="color: #C76A40">regrole</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface sets_cluster_tree_position {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.sets_cluster_tree_position(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _cluster := jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local(), args );
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).*
              <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets_up( _cluster );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface define_namespace {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.define_namespace(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              cluster_uid: UID
              cluster_namespace: NAMESPACE
            }
           \*\/</span>
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _chars <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>[] = regexp_split_to_array( lower( <span style="color: #4d99bf">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ-0123456789_&#x27;</span>), <span style="color: #4d99bf">&#x27;&#x27;</span> );
          _check <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _cluster := jsonb_populate_record( _cluster, args );
          _cluster.cluster_namespace := lower( _cluster.cluster_namespace );
          
          <span style="color: #C76A40;
            font-weight: 800;">select</span> 
              string_agg( format( <span style="color: #4d99bf">&#x27;%I posição %s&#x27;</span>, c.character, c.ordinality ), <span style="color: #4d99bf">&#x27;, &#x27;</span> ) characters,
              count( * ) <span style="color: #C76A40;
            font-weight: 800;">as</span> count
              <span style="color: #C76A40;
            font-weight: 800;">into</span> _check
            <span style="color: #C76A40;
            font-weight: 800;">from</span>  unnest( regexp_split_to_array( _cluster.cluster_namespace, <span style="color: #4d99bf">&#x27;&#x27;</span> ) ) <span style="color: #C76A40;
            font-weight: 800;">with ordinality</span> c( <span style="color: #C76A40">character</span> )
            <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> c = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _chars);
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _check.count &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> 
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( format( <span style="color: #4d99bf">&#x27;Namespace está invalido! caracteres: %s&#x27;</span>, _check.characters ) );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          _cluster.cluster_namespace := lib.str_normalize( _cluster.cluster_namespace );
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _cluster.cluster_namespace <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Namespace está invalido ou não definido!&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">select</span> (&quot;returning&quot;).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _cluster
            <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets_up( _cluster, <span style="color: #C76A40;
            font-weight: 800;">ref</span> := lib.sets_ref(_cluster));
          
          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true( jsonb_build_object(
            <span style="color: #4d99bf">&#x27;cluster&#x27;</span>, _cluster
          ));
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _Sets_Resources_Downloaded_16620 {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.sets_resources_downloaded(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _object <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;object_uid&#x27;</span>;
          _trans <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;collector_transuid&#x27;</span>;
          _ref <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;object_ref&#x27;</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">update</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span> o
              <span style="color: #C76A40;
            font-weight: 800;">set</span> object_status = <span style="color: #C76A40">1</span>
              <span style="color: #C76A40;
            font-weight: 800;">where</span> object_status = <span style="color: #C76A40">2</span>
                <span style="color: #C76A40;
            font-weight: 800;">and</span> object_share_regclass::<span style="color: #C76A40">regclass</span> = <span style="color: #4d99bf">&#x27;cluster.resource&#x27;</span>::<span style="color: #C76A40">regclass</span>
                <span style="color: #C76A40;
            font-weight: 800;">and</span> object_uid = _object
                <span style="color: #C76A40;
            font-weight: 800;">and</span> object_transuid = _trans
                <span style="color: #C76A40;
            font-weight: 800;">and</span> object_ref = _ref
              <span style="color: #C76A40;
            font-weight: 800;">returning</span> to_jsonb( o )
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface accept_revision {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.accept_revision(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              cluster_identifier
              cluster_path
            }
           \*\/</span>
          _master <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _local <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _remote_child <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _remote <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;

          _local_is_child_of_remote <span style="color: #C76A40">boolean</span>;
          _local_is_super_path_remote <span style="color: #C76A40">boolean</span>;
          _local_is_master_of_remote <span style="color: #C76A40">boolean</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">if</span> args <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          _remote := jsonb_populate_record( _remote, args );
          _master := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_master();

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _local := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local();
          _local.cluster_path := coalesce( _local.cluster_path, <span style="color: #4d99bf">&#x27;/&#x27;</span> );
          _remote.cluster_path := coalesce( _remote.cluster_path, <span style="color: #4d99bf">&#x27;/&#x27;</span> );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _local.cluster_identifier = _remote.cluster_identifier <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _remote_child
            <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c
            <span style="color: #C76A40;
            font-weight: 800;">where</span> c.cluster_type = _const.cluster_tcluster_child
              <span style="color: #C76A40;
            font-weight: 800;">and</span> c.cluster_identifier = _remote.cluster_identifier
          ;


          _local_is_child_of_remote := _master.cluster_identifier = _remote.cluster_identifier;
          _local_is_super_path_remote := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_sub_path( _local.cluster_path, _remote.cluster_path );
          _local_is_master_of_remote := _remote_child.cluster_identifier <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> (
            coalesce( _local.cluster_path = _remote.cluster_path, <span style="color: #C76A40;
            font-weight: 800;">false</span> )
            <span style="color: #C76A40;
            font-weight: 800;">or</span> coalesce( _local_is_child_of_remote, <span style="color: #C76A40;
            font-weight: 800;">false</span> )
            <span style="color: #C76A40;
            font-weight: 800;">or</span> coalesce( _local_is_super_path_remote <span style="color: #C76A40;
            font-weight: 800;">and</span> _const.cluster_grant_revision_sub_path = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _local.cluster_grants ), <span style="color: #C76A40;
            font-weight: 800;">false</span> )
            <span style="color: #C76A40;
            font-weight: 800;">or</span> coalesce( _local_is_master_of_remote <span style="color: #C76A40;
            font-weight: 800;">and</span> _const.cluster_grant_revision_child = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( _remote_child.cluster_grants ), <span style="color: #C76A40;
            font-weight: 800;">false</span> )
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.status( args );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __tg_share_check {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__tg_share_check()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span>( to_regclass( <span style="color: #397300">new</span>.share_regclass ) <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;% is not a table&#x27;</span>, <span style="color: #397300">new</span>.share_regclass;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #397300">new</span>.share_regclass := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( <span style="color: #397300">new</span>.share_regclass );
          <span style="color: #397300">new</span>.share_pksfrom := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( <span style="color: #397300">new</span>.share_pksfrom );
          <span style="color: #397300">new</span>.share_pks := lib.sets_pks_array( coalesce( <span style="color: #397300">new</span>.share_pksfrom, <span style="color: #397300">new</span>.share_regclass ) );
          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #397300">new</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __create_identifier {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__create_identifier()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            _leter <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;ABCDEFGHIJKLMNOQRSTUVWXYZ&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> format(
            <span style="color: #4d99bf">&#x27;%s-%s-%s&#x27;</span>,
            lib.dset_random_text( _leter, <span style="color: #C76A40">4</span> ),
            lib.dset_random_text( _leter||<span style="color: #4d99bf">&#x27;0123456789&#x27;</span>, <span style="color: #C76A40">5</span> ),
            lib.dset_random_text( <span style="color: #4d99bf">&#x27;0123456789&#x27;</span>, <span style="color: #C76A40">3</span> )
          );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_acesso {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.funct_reg_acesso(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa funcao serve para dar acesse de um menu ao um colaborador
            -- Para dar acess o colaborador não pode ter previamente o acesso ao menu
            args := {
              arg_colaborador_id: ID,
              arg_colaborador_propetario: ID,
              arg_menu_list: [
                ID, ID, ID
              ]
            }
              -- arg_colaborador_id corresponde ao colaborador que esta a definir os previlegio de acesso
              -- arg_colaborador_propetario corresponde ao colaborador que tera o acesso definido
              -- arg_menu_ids corresponde a lista de identificadores do menus que o colaborador tera acesso
           \*\/</span>

          arg_colaborador_id <span style="color: #C76A40">uuid</span>          := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_colaborador_propetario <span style="color: #C76A40">uuid</span>  := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_propetario&#x27;</span>;
          arg_menu_list <span style="color: #C76A40">int2</span>[]                := <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> jsonb_array_elements_text( args-&gt;<span style="color: #4d99bf">&#x27;arg_menu_list&#x27;</span> )::<span style="color: #C76A40">int2</span> );

          arg_acesso_lista auth.acesso[];
          arg_branch_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_branch_uid&#x27;</span>;

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

            _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #888">-- Revogar os menus que o colaborador tinha acesso anteriormente mas atualmente já nao os têm</span>
          <span style="color: #888">-- São menus que aperecem no acesso ativo mas nao aperencem na nova lista de menus a ser dado ao colaborador</span>
          <span style="color: #C76A40;
            font-weight: 800;">update</span> auth.acesso
            <span style="color: #C76A40;
            font-weight: 800;">set</span> acesso_estado = _const.acesso_estado_fechado,
                acesso_dataatualizacao = <span style="color: #397300">current_timestamp</span>,
                acesso_colaborador_atualizacao = arg_colaborador_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span> acesso_estado = _const.acesso_estado_ativo
              <span style="color: #C76A40;
            font-weight: 800;">and</span> acesso_colaborador_propetario = arg_colaborador_propetario
              <span style="color: #C76A40;
            font-weight: 800;">and</span> acesso_menu_id != <span style="color: #C76A40;
            font-weight: 800;">all</span>( arg_menu_list )
          ;

          <span style="color: #888">-- Registrar para o colaborador apenas menus listado na lista que estão em faltas</span>
          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> auth.acesso(
            acesso_menu_id,
            acesso_colaborador_propetario,
            acesso_colaborador_id,
            _branch_uid
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
              me.menu_id,
              arg_colaborador_propetario,
              arg_colaborador_id,
              arg_branch_uid
            <span style="color: #C76A40;
            font-weight: 800;">from</span> unnest( arg_menu_list ) un ( menu_id )
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.menu me <span style="color: #C76A40;
            font-weight: 800;">on</span> un.menu_id = me.menu_id
              <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.acesso ac <span style="color: #C76A40;
            font-weight: 800;">on</span> me.menu_id = ac.acesso_menu_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ac.acesso_estado = _const.acesso_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ac.acesso_colaborador_propetario = arg_colaborador_propetario
            <span style="color: #C76A40;
            font-weight: 800;">where</span> ac.acesso_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
          ;

          <span style="color: #888">-- Obter todos os acessos ativos para esse colaborador</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> array_agg( ac ) <span style="color: #C76A40;
            font-weight: 800;">into</span> arg_acesso_lista
            <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.acesso ac
            <span style="color: #C76A40;
            font-weight: 800;">where</span> ac.acesso_colaborador_propetario = arg_colaborador_propetario
              <span style="color: #C76A40;
            font-weight: 800;">and</span> ac.acesso_estado = _const.acesso_estado_ativo
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;acesso&#x27;</span>, arg_acesso_lista
            )
          );

        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __transaction_uid {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__transaction_uid()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">uuid</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$<span style="color: #C76A40;
            font-weight: 800;">select</span> gen_random_uuid();$function$

        </pre>
        */ source(): void;
      }

      export interface switch_remote_connection {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.switch_remote_connection(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _local <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _result <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _local := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local();
          _result := jsonb_populate_record( _result, args );
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _local.cluster_namespace <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true( jsonb_build_object( <span style="color: #4d99bf">&#x27;cluster_remote&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">false</span>, <span style="color: #4d99bf">&#x27;cluster_remote_old&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">false</span> ));
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">update</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>
            <span style="color: #C76A40;
            font-weight: 800;">set</span> cluster_remote = _result.cluster_remote 
            <span style="color: #C76A40;
            font-weight: 800;">where</span> cluster_uid = _local.cluster_uid
            <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _result;
          
          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true( jsonb_build_object(
            <span style="color: #4d99bf">&#x27;cluster_remote&#x27;</span>, _result.cluster_remote,
            <span style="color: #4d99bf">&#x27;cluster_remote_old&#x27;</span>, _local.cluster_remote
            
          ));
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _cluster_accept_child {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._cluster_accept_child(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">boolean</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _cluster := jsonb_populate_record( _cluster, args );
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c
              <span style="color: #C76A40;
            font-weight: 800;">where</span> c.cluster_identifier = _cluster.cluster_identifier
                <span style="color: #C76A40;
            font-weight: 800;">and</span> c.cluster_type = _const.cluster_tcluster_child
                <span style="color: #C76A40;
            font-weight: 800;">and</span> c.cluster_api = _cluster.cluster_api
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_cluster_local {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local(<span style="color: #C76A40;
            font-weight: 800;">increment</span> boolean DEFAULT false, try integer DEFAULT <span style="color: #C76A40">0</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          <span style="color: #888">-- local origin</span>
          _origin <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;00000000-0000-0000-0000-000000000000&#x27;</span>::<span style="color: #C76A40">uuid</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">if</span> coalesce( <span style="color: #C76A40;
            font-weight: 800;">increment</span>, false ) then
            update cluster.cluster
              set cluster_version = cluster_version +<span style="color: #C76A40">1</span>
              <span style="color: #C76A40;
            font-weight: 800;">where</span> cluster_uid = _origin
              <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _cluster;
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _cluster
              <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c
              <span style="color: #C76A40;
            font-weight: 800;">where</span> c.cluster_type = _const.cluster_tcluster_local;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _cluster.cluster_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>(
              cluster_uid,
              cluster_identifier,
              cluster_type,
              cluster_version
            ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
              _origin,
              <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__create_identifier(),
              _const.cluster_tcluster_local,
              lib.&quot;when&quot;( coalesce( <span style="color: #C76A40;
            font-weight: 800;">increment</span>, false), <span style="color: #C76A40">1</span>, <span style="color: #C76A40">0</span> )
            ) <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _cluster;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> _cluster;
        <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span>
          <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">if</span> try &lt; <span style="color: #C76A40">10</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">perform</span> pg_sleep( try );
              <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local( <span style="color: #C76A40;
            font-weight: 800;">increment</span>, try+<span style="color: #C76A40">1</span> );
            <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;%&#x27;</span>, m;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface load_cluster_by_namespace {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.load_cluster_by_namespace(namespace <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
            <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( c ) <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c <span style="color: #C76A40;
            font-weight: 800;">where</span> cluster_namespace = namespace;
          $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface sets_clusters_admin {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.sets_clusters_admin(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              cluster_license?: ( no carragamento de license )
              cluster_licenselife: QT
              cluster_tperiod_id: PERIODO (select * from cluster.tperiod order by tperiod_id)
            }
           \*\/</span>
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _result <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _res lib.res;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _master <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _local <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _tperiod <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.tperiod;

          _doc <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> jsonb_build_object();
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _cluster := jsonb_populate_record( _cluster, args );

          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _tperiod
            <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.tperiod tp
            <span style="color: #C76A40;
            font-weight: 800;">where</span> tp.tperiod_id = _cluster.cluster_tperiod_id
          ;


          <span style="color: #888">-- Quando for o cluster master</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _cluster.cluster_type = _const.cluster_tcluster_master <span style="color: #C76A40;
            font-weight: 800;">then</span>
        <span style="color: #888">--       raise exception &#x27;Master:%&#x27;, args;</span>

            <span style="color: #888">-- Aplicar as confifurações de cluster master</span>
            _master := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_master();
            _master.cluster_domain := _cluster.cluster_domain;
            _master.cluster_api := _cluster.cluster_api;
            _master.cluster_port := _cluster.cluster_port;
            _master.cluster_type := _const.cluster_tcluster_master;
            _master.cluster_name := coalesce( _master.cluster_name, <span style="color: #4d99bf">&#x27;Master&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _result <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets( _master );
            _doc := _doc || jsonb_build_object( <span style="color: #4d99bf">&#x27;master&#x27;</span>, _result );


            <span style="color: #888">-- Aplicar as configuraçõa do cluster local</span>
            _local := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local();
            _local.cluster_name := coalesce( _local.cluster_name, <span style="color: #4d99bf">&#x27;Local&#x27;</span> );
            _local.cluster_identifier := _cluster.cluster_identifier;
            _local.cluster_license := _cluster.cluster_license;
            _local.cluster_licenselife := _cluster.cluster_licenselife;
            _local.cluster_tperiod_id := _cluster.cluster_tperiod_id;
            <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _result <span style="color: #C76A40;
            font-weight: 800;">from</span>  lib.sets( _local );
            _doc := _doc || jsonb_build_object( <span style="color: #4d99bf">&#x27;local&#x27;</span>, _result );

          elseif _cluster.cluster_type = _const.cluster_tcluster_child <span style="color: #C76A40;
            font-weight: 800;">then</span>

            _cluster.cluster_identifier := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__create_identifier();
            _cluster.cluster_api := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__create_api();
            _cluster.cluster_key := format( <span style="color: #4d99bf">&#x27;%s-%s&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__create_api(), <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__create_api() );

            <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _result
              <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets( _cluster );

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _cluster.cluster_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _res
                <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.sets_cluster_license( to_jsonb( _cluster ) || lib.sets_ref( _result ) );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            _doc := _doc || jsonb_build_object( <span style="color: #4d99bf">&#x27;child&#x27;</span>, _res );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true( _doc );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface can_send_revision {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.can_send_revision(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">boolean</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              cluster_identifier
              cluster_path
              cluster_grants
            }
           \*\/</span>
          _remote <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _master <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;

          _local <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _remote_child <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _local_is_master_of_remote <span style="color: #C76A40">boolean</span>;
          _local_is_child_of_remote <span style="color: #C76A40">boolean</span>;
          _local_is_sub_path_of_remote <span style="color: #C76A40">boolean</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _remote := jsonb_populate_record( _remote, args );
          _local := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local();
          _master := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_master();

          _local.cluster_path := coalesce( _local.cluster_path, <span style="color: #4d99bf">&#x27;/&#x27;</span> );
          _remote.cluster_path := coalesce( _remote.cluster_path, <span style="color: #4d99bf">&#x27;/&#x27;</span> );

        <span style="color: #888">--   if _local.cluster_identifier = _remote.cluster_identifier then return; end if;</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _local.cluster_identifier = _remote.cluster_identifier <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _remote_child
              <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c
              <span style="color: #C76A40;
            font-weight: 800;">where</span> c.cluster_identifier = _remote.cluster_identifier
                <span style="color: #C76A40;
            font-weight: 800;">and</span> c.cluster_type = _const.cluster_tcluster_child
          ;

        <span style="color: #888">--   return next jsonb_build_object(</span>
        <span style="color: #888">--     &#x27;01&#x27;, _local.cluster_path = _remote.cluster_path,</span>
        <span style="color: #888">--     &#x27;02&#x27;, _local_is_master_of_remote,</span>
        <span style="color: #888">--     &#x27;03&#x27;, _local_is_sub_path_of_remote and _const.cluster_grant_revision_sub_path = any( _remote.cluster_grants ) ,</span>
        <span style="color: #888">--     &#x27;04&#x27;,  _local_is_child_of_remote and _const.cluster_grant_revision_child = any( _local.cluster_grants )</span>
        <span style="color: #888">--   );</span>

          _local_is_master_of_remote := _remote_child.cluster_identifier <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          _local_is_sub_path_of_remote := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_sub_path( _remote.cluster_path, _local.cluster_path );
          _local_is_child_of_remote := _master.cluster_identifier = _remote.cluster_identifier;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> (
            coalesce( _local.cluster_path = _remote.cluster_path, <span style="color: #C76A40;
            font-weight: 800;">false</span> )
              <span style="color: #C76A40;
            font-weight: 800;">or</span> coalesce( _local_is_master_of_remote, <span style="color: #C76A40;
            font-weight: 800;">false</span> )
              <span style="color: #C76A40;
            font-weight: 800;">or</span> coalesce( _local_is_sub_path_of_remote <span style="color: #C76A40;
            font-weight: 800;">and</span> _const.cluster_grant_revision_sub_path = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _remote.cluster_grants ), <span style="color: #C76A40;
            font-weight: 800;">false</span> )
              <span style="color: #C76A40;
            font-weight: 800;">or</span> coalesce( _local_is_child_of_remote <span style="color: #C76A40;
            font-weight: 800;">and</span> _const.cluster_grant_revision_child = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _local.cluster_grants ), <span style="color: #C76A40;
            font-weight: 800;">false</span> )
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface can_send_object {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.can_send_object(_object <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span>, _collector <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector, _origin <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>, _request <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>, _local <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>, _master <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>, _child <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>, _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>())
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">boolean</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>

        <span style="color: #888">--   raise exception &#x27;sshsnjsd nsd&#x27;;</span>
            <span style="color: #888">-- Quando o custer PEDITNTE testiver no mesmo path que o cluster origem [OK]</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _origin.cluster_path = _request.cluster_path <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #888">-- QUANDO TANTO O CLUSTER PEDINTE E O CLUSTER LOCAL ESTIVEREM EM PATH DIFERENTE [NEGAR]</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> ( <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_sub_path( _request.cluster_path, _origin.cluster_path )
              <span style="color: #C76A40;
            font-weight: 800;">or</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_sub_path( _origin.cluster_path, _request.cluster_path ) )
            <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;


            <span style="color: #888">-- QUANDO O CLUSTER ORIGEM FOR SUBPATH DO CLUSTER PEDINTE E O CLUSTER PEDINTE ACEITA REVISÕES INFERIOR [OK]</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _const.cluster_grant_revision_sub_path = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _request.cluster_grants )
              <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_sub_path( _request.cluster_path, _origin.cluster_path )
            <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #888">-- QUANDO O CLUSTER ORIGEM FOR O SUPER-PATH DO CLUSTER PEDINTE E O CLUSTER PEDINTE ACEITAR REVISÕS DE CAMINHO SUPERIOR [OK]</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _const.cluster_grant_revision_supper_path = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _request.cluster_grants )
              <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_sub_path( _origin.cluster_path, _request.cluster_path  )
            <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #888">-- QUANDO O CLUSTER PEDINTE FOR O MASTER E O CLUSTER ORIGEN FOR LOCAL E O CLUSTER LOCAL SALVA REVISÕES NO MASTER [OK!]</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _request.cluster_identifier = _master.cluster_identifier
              <span style="color: #C76A40;
            font-weight: 800;">and</span> _local.cluster_identifier = _origin.cluster_identifier
              <span style="color: #C76A40;
            font-weight: 800;">and</span> _const.cluster_grant_revision_child = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _local.cluster_grants )
            <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #888">-- QUANDO O CLUSTER PEDINTE FOR UM FILHO DO CLUSTER LOCAL E A ORIGEM FOR CLUSTER LOCAL</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _request.cluster_identifier = _child.cluster_identifier
              <span style="color: #C76A40;
            font-weight: 800;">and</span> _origin.cluster_identifier = _local.cluster_identifier
            <span style="color: #C76A40;
            font-weight: 800;">then</span>  <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __user_default {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__user_default()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">regrole</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">STABLE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$<span style="color: #C76A40;
            font-weight: 800;">select</span> user_default <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.users <span style="color: #C76A40;
            font-weight: 800;">limit</span> <span style="color: #C76A40">1</span>$function$

        </pre>
        */ source(): void;
      }

      export interface __is_sub_path {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_sub_path(base <span style="color: #C76A40">text</span>, child_path <span style="color: #C76A40">text</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">boolean</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _left <span style="color: #C76A40">text</span>;
          _right <span style="color: #C76A40">text</span>;
          _right_char <span style="color: #C76A40">char</span>;
          _left_char <span style="color: #C76A40">char</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> child_path <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> base <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">if</span> substr( base, length( base ) ) = <span style="color: #4d99bf">&#x27;/&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> base := substr( base, <span style="color: #C76A40">1</span>, length( base )<span style="color: #C76A40">-1</span> ); <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">if</span> substr( child_path, length( child_path ) ) = <span style="color: #4d99bf">&#x27;/&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> child_path := substr( child_path, <span style="color: #C76A40">1</span>, length( child_path )<span style="color: #C76A40">-1</span> ); <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> length( base ) &gt;= length( child_path ) <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _left := substr( child_path, <span style="color: #C76A40">1</span>, length(  base ) );
          _right := substr( child_path, length( base ) +<span style="color: #C76A40">1</span>, length( child_path ) );
          _right_char := (regexp_split_to_array( _right, <span style="color: #4d99bf">&#x27;&#x27;</span> ) )[<span style="color: #C76A40">1</span>];
          _left_char := (regexp_split_to_array( _left, <span style="color: #4d99bf">&#x27;&#x27;</span> ) )[<span style="color: #C76A40">1</span>];


          <span style="color: #C76A40;
            font-weight: 800;">return</span> _left <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span>  <span style="color: #C76A40;
            font-weight: 800;">null</span>
            <span style="color: #C76A40;
            font-weight: 800;">and</span> _right <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
            <span style="color: #C76A40;
            font-weight: 800;">and</span> _right_char <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
            <span style="color: #C76A40;
            font-weight: 800;">and</span> _left = base
            <span style="color: #C76A40;
            font-weight: 800;">and</span> _right_char = <span style="color: #4d99bf">&#x27;/&#x27;</span>
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface add {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">add</span>(args <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            PROPOSE: Efetuar uma varedura completa nas tabelas verificação por modificações
              diferente das últimas que foram versionadas e colletalas para que sejas versionadas

            args := {
              regclass:[]
            }
           \*\/</span>
          _regclass <span style="color: #C76A40">regclass</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> e.text::<span style="color: #C76A40">regclass</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements_text( args-&gt;<span style="color: #4d99bf">&#x27;regclass&#x27;</span>)e ( <span style="color: #C76A40">text</span> ) );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> array_length( _regclass, <span style="color: #C76A40">1</span> )  = <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> _regclass := <span style="color: #C76A40;
            font-weight: 800;">null</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __foregin_key <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                tc.<span style="color: #397300">constraint_name</span>,
                format( <span style="color: #4d99bf">&#x27;%s.%s&#x27;</span>, tc.table_schema, tc.<span style="color: #397300">table_name</span> )::<span style="color: #C76A40">regclass</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> local_table,
                kcu.<span style="color: #397300">column_name</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> local_column,
                format( <span style="color: #4d99bf">&#x27;%s.%s&#x27;</span>,  ccu.table_schema, ccu.<span style="color: #397300">table_name</span> )::<span style="color: #C76A40">regclass</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> foreign_table,
                ccu.<span style="color: #397300">column_name</span> <span style="color: #C76A40;
            font-weight: 800;">AS</span> foreign_column_name
              <span style="color: #C76A40;
            font-weight: 800;">from</span>
                information_schema.table_constraints tc
                  <span style="color: #C76A40;
            font-weight: 800;">join</span> information_schema.key_column_usage kcu <span style="color: #C76A40;
            font-weight: 800;">on</span> tc.<span style="color: #397300">constraint_name</span> = kcu.<span style="color: #397300">constraint_name</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span>  tc.table_schema = kcu.table_schema
                  <span style="color: #C76A40;
            font-weight: 800;">join</span> information_schema.constraint_column_usage ccu <span style="color: #C76A40;
            font-weight: 800;">on</span> ccu.<span style="color: #397300">constraint_name</span> = tc.<span style="color: #397300">constraint_name</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ccu.table_schema = tc.table_schema
              <span style="color: #C76A40;
            font-weight: 800;">where</span> tc.constraint_type = <span style="color: #4d99bf">&#x27;FOREIGN KEY&#x27;</span>
            ), __share <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                local_table,
                s.share_regclass,
                array_agg( foreign_table ),
                count( * ) <span style="color: #C76A40;
            font-weight: 800;">as</span> depencies,
                count( * ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> foreign_table = local_table ) <span style="color: #C76A40;
            font-weight: 800;">as</span> self
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __foregin_key fk
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">share</span> s <span style="color: #C76A40;
            font-weight: 800;">on</span> fk.local_table = s.share_regclass
              <span style="color: #C76A40;
            font-weight: 800;">where</span> s.share_regclass = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( coalesce(_regclass, <span style="color: #C76A40;
            font-weight: 800;">array</span>[ s.share_regclass ]))
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> local_table,
                s.share_regclass
            )
            <span style="color: #C76A40;
            font-weight: 800;">select</span> (<span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__add( s.share_regclass )).*
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __share s
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> s.depencies = <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">1</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> s.depencies = s.self <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">2</span>
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">3</span>
                <span style="color: #C76A40;
            font-weight: 800;">end</span>,
                s.depencies,
                s.self
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface licence_status {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.licence_status()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**doc
           doc\*\/</span>
          _data <span style="color: #C76A40">record</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _class <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">select</span>
              c.*,
              tp.*,
              extract( <span style="color: #C76A40">epoch</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> ( format( <span style="color: #4d99bf">&#x27;%s %s&#x27;</span>, c.cluster_licenselife, tp.tperiod_code ) )::<span style="color: #C76A40">interval</span> ) / <span style="color: #C76A40">86400</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> dias_total,
              cluster_license::<span style="color: #C76A40">date</span> - now()::<span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> dias_restantes
          <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c
              <span style="color: #C76A40;
            font-weight: 800;">left join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.tperiod tp <span style="color: #C76A40;
            font-weight: 800;">on</span> c.cluster_tperiod_id = tp.tperiod_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span> c.cluster_type = _const.cluster_tcluster_local
            <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
          ;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _data.dias_restantes &lt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> _data.dias_restantes := <span style="color: #C76A40">0</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _class := <span style="color: #4d99bf">&#x27;licenceNearOut&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _data.dias_restantes &gt;= <span style="color: #C76A40">30</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> _class := <span style="color: #4d99bf">&#x27;licenceFull&#x27;</span>; 
          <span style="color: #C76A40;
            font-weight: 800;">elsif</span> _data.dias_restantes &gt; ( <span style="color: #C76A40">0.17</span> * _data.dias_total ) <span style="color: #C76A40;
            font-weight: 800;">then</span> _class := <span style="color: #4d99bf">&#x27;licenceFull&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">return next</span> to_jsonb( _data )||jsonb_build_object(
            <span style="color: #4d99bf">&#x27;class&#x27;</span>, _class
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __user_replication {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__user_replication()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">regrole</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">STABLE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$<span style="color: #C76A40;
            font-weight: 800;">select</span> user_replication <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.users <span style="color: #C76A40;
            font-weight: 800;">limit</span> <span style="color: #C76A40">1</span>$function$

        </pre>
        */ source(): void;
      }

      export interface load_paths {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.load_paths(args <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> json_build_object())
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">text</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$ <span style="color: #C76A40;
            font-weight: 800;">select</span> <span style="color: #C76A40;
            font-weight: 800;">distinct</span> lower( cluster_path ) <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> <span style="color: #C76A40;
            font-weight: 800;">where</span> cluster_path <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> lower( cluster_path ) $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __pks {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__pks(<span style="color: #C76A40">regclass</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">name</span>[]
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">select</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>(
            <span style="color: #C76A40;
            font-weight: 800;">select</span> pk.name
              <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets_pks( <span style="color: #1f7199">$1</span> ) pk( <span style="color: #C76A40">name</span> )
          );
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface sets_cluster_machine_id {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.sets_cluster_machine_id(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(result <span style="color: #C76A40">boolean</span>, message <span style="color: #C76A40">text</span>, data <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _machine <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _status <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _machine := jsonb_populate_record( _machine, args );

          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _status
            <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c
            <span style="color: #C76A40;
            font-weight: 800;">where</span> c.cluster_identifier = _machine.cluster_identifier
              <span style="color: #C76A40;
            font-weight: 800;">and</span> c.cluster_type = _const.cluster_tcluster_child
          ;

            sets_cluster_machine_id.result := <span style="color: #C76A40;
            font-weight: 800;">true</span>;
            sets_cluster_machine_id.message := <span style="color: #4d99bf">&#x27;Success&#x27;</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _machine.cluster_machineid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            sets_cluster_machine_id.result := <span style="color: #C76A40;
            font-weight: 800;">false</span>;
            sets_cluster_machine_id.message := <span style="color: #4d99bf">&#x27;Required machine ID form connect&#x27;</span>;

          elseif _status.cluster_identifier <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            sets_cluster_machine_id.result := <span style="color: #C76A40;
            font-weight: 800;">false</span>;
            sets_cluster_machine_id.message := <span style="color: #4d99bf">&#x27;Cluster not registered in current server as child as child&#x27;</span>;

          elseif _status.cluster_machineid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
            <span style="color: #C76A40;
            font-weight: 800;">and</span> _machine.cluster_machineid != _status.cluster_machineid
          <span style="color: #C76A40;
            font-weight: 800;">then</span>
            sets_cluster_machine_id.result := <span style="color: #C76A40;
            font-weight: 800;">false</span>;
            sets_cluster_machine_id.message := <span style="color: #4d99bf">&#x27;Cluster is active in another server&#x27;</span>;

          elseif _status.cluster_machineid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">update</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>
              <span style="color: #C76A40;
            font-weight: 800;">set</span> cluster_machineid = _machine.cluster_machineid
              <span style="color: #C76A40;
            font-weight: 800;">where</span> cluster_identifier = _status.cluster_identifier
                <span style="color: #C76A40;
            font-weight: 800;">and</span> cluster_type = _status.cluster_type
                <span style="color: #C76A40;
            font-weight: 800;">and</span> cluster_api = _status.cluster_api
              <span style="color: #C76A40;
            font-weight: 800;">returning</span> *  <span style="color: #C76A40;
            font-weight: 800;">into</span> _status
            ;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          sets_cluster_machine_id.data := to_jsonb( _status );
          <span style="color: #C76A40;
            font-weight: 800;">return next</span> ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface change {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.change(<span style="color: #C76A40">jsonb</span>, <span style="color: #C76A40;
            font-weight: 800;">VARIADIC</span> keys <span style="color: #C76A40">text</span>[])
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">with</span> __values <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_each( <span style="color: #1f7199">$1</span> ) e
              <span style="color: #C76A40;
            font-weight: 800;">where</span> e.key = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( keys )
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> jsonb_object_agg( e.key, e.<span style="color: #C76A40;
            font-weight: 800;">value</span> )
          <span style="color: #C76A40;
            font-weight: 800;">from</span> __values e
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_cluster_master {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_master()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">select</span> c.* <span style="color: #C76A40;
            font-weight: 800;">into</span> _cluster
            <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c
            <span style="color: #C76A40;
            font-weight: 800;">where</span> c.cluster_type = _const.cluster_tcluster_master
          ;
          <span style="color: #C76A40;
            font-weight: 800;">return</span> _cluster;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __tg_share_map {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__tg_share_map()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          PROCEDURE_COMMIT <span style="color: #C76A40">regprocedure</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;cluster.__tg_version_commit()&#x27;</span>::<span style="color: #C76A40">regprocedure</span>;
          PROCEDURE_ADD_INSERT <span style="color: #C76A40">regprocedure</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;cluster.__tg_version_add_when_insert()&#x27;</span>::<span style="color: #C76A40">regprocedure</span>;
          PROCEDURE_ADD_UPDATE <span style="color: #C76A40">regprocedure</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;cluster.__tg_version_add_when_update()&#x27;</span>::<span style="color: #C76A40">regprocedure</span>;

          _new <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">share</span>;
          _old <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">share</span>;
          _share <span style="color: #C76A40">record</span>;
          _data <span style="color: #C76A40">record</span>;
          _base_name <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;
          _trigger_name <span style="color: #C76A40">name</span>;
          _statement <span style="color: #C76A40">text</span>;
          _tg <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #397300">tg_op</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> ( <span style="color: #4d99bf">&#x27;INSERT&#x27;</span>, <span style="color: #4d99bf">&#x27;UPDATE&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _new := <span style="color: #397300">new</span>;
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                c.relname <span style="color: #C76A40;
            font-weight: 800;">as</span> <span style="color: #397300">table_name</span>,
                c.relnamespace::<span style="color: #C76A40">regnamespace</span>::<span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> table_scheme,
                _new.*
                <span style="color: #C76A40;
            font-weight: 800;">into</span> _share
              <span style="color: #C76A40;
            font-weight: 800;">from</span> pg_class c
              <span style="color: #C76A40;
            font-weight: 800;">where</span> c.oid::<span style="color: #C76A40">regclass</span> = _new.share_regclass::<span style="color: #C76A40">regclass</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;


          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #397300">tg_op</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> ( <span style="color: #4d99bf">&#x27;UPDATE&#x27;</span>, <span style="color: #4d99bf">&#x27;DELETE&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _old := <span style="color: #397300">old</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #397300">tg_when</span> = <span style="color: #4d99bf">&#x27;BEFORE&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _old.share_regclass <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> _old.share_triggers <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> array_length( _old.share_triggers, <span style="color: #C76A40">1</span> ) &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">for</span> _data <span style="color: #C76A40;
            font-weight: 800;">in</span>
                <span style="color: #C76A40;
            font-weight: 800;">select</span> *  <span style="color: #C76A40;
            font-weight: 800;">from</span> unnest( _old.share_triggers ) u( trigger_name )
              <span style="color: #C76A40;
            font-weight: 800;">loop</span>
                <span style="color: #C76A40;
            font-weight: 800;">begin</span> 
                  <span style="color: #C76A40;
            font-weight: 800;">execute</span> format( <span style="color: #4d99bf">&#x27;drop trigger %I on %s&#x27;</span>, _data.trigger_name, _old.share_regclass );
                <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
                <span style="color: #C76A40;
            font-weight: 800;">end</span>;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #397300">tg_when</span> = <span style="color: #4d99bf">&#x27;BEFORE&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> _new.share_regclass <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> array_agg( tgname ) <span style="color: #C76A40;
            font-weight: 800;">as</span> triggers <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
              <span style="color: #C76A40;
            font-weight: 800;">from</span> pg_trigger tg
              <span style="color: #C76A40;
            font-weight: 800;">where</span> tg.tgrelid::<span style="color: #C76A40">regclass</span> = _new.share_regclass::<span style="color: #C76A40">regclass</span>
            ;

            _new.share_triggers := <span style="color: #C76A40;
            font-weight: 800;">array</span>[]::<span style="color: #C76A40">name</span>[];
            <span style="color: #C76A40;
            font-weight: 800;">for</span> _tg <span style="color: #C76A40;
            font-weight: 800;">in</span>
              <span style="color: #C76A40;
            font-weight: 800;">with</span> __when ( _tg_op, _for, _procedure ) <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span> <span style="color: #4d99bf">&#x27;insert&#x27;</span>, <span style="color: #4d99bf">&#x27;each row&#x27;</span>, PROCEDURE_ADD_INSERT <span style="color: #C76A40;
            font-weight: 800;">where</span> _new.share_insert
                <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span> <span style="color: #C76A40;
            font-weight: 800;">select</span> <span style="color: #4d99bf">&#x27;insert&#x27;</span>, <span style="color: #4d99bf">&#x27;each statement&#x27;</span>, PROCEDURE_COMMIT <span style="color: #C76A40;
            font-weight: 800;">where</span> _new.share_insert
                <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span> <span style="color: #C76A40;
            font-weight: 800;">select</span> <span style="color: #4d99bf">&#x27;update&#x27;</span>, <span style="color: #4d99bf">&#x27;each row&#x27;</span>, PROCEDURE_ADD_UPDATE <span style="color: #C76A40;
            font-weight: 800;">where</span> _new.share_update
                <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span> <span style="color: #C76A40;
            font-weight: 800;">select</span> <span style="color: #4d99bf">&#x27;update&#x27;</span>, <span style="color: #4d99bf">&#x27;each statement&#x27;</span>, PROCEDURE_COMMIT <span style="color: #C76A40;
            font-weight: 800;">where</span> _new.share_update
              ) <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __when w
            <span style="color: #C76A40;
            font-weight: 800;">loop</span>

              <span style="color: #C76A40;
            font-weight: 800;">if</span> _tg._for  = <span style="color: #4d99bf">&#x27;each row&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                _base_name := format( <span style="color: #4d99bf">&#x27;cluster_version_add_change_after_%s_on_%s_%s&#x27;</span>, _tg._tg_op, _share.table_scheme, _share.<span style="color: #397300">table_name</span> );
              <span style="color: #C76A40;
            font-weight: 800;">else</span>
                _base_name := format( <span style="color: #4d99bf">&#x27;cluster_version_commit_change_%s_on_%s_%s&#x27;</span>, _tg._tg_op, _share.table_scheme, _share.<span style="color: #397300">table_name</span> );
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

              _trigger_name := format( <span style="color: #4d99bf">&#x27;%s_%s&#x27;</span>, _base_name, ( random() * (<span style="color: #C76A40">999999</span> - <span style="color: #C76A40">100000</span> )+<span style="color: #C76A40">100000</span>)::<span style="color: #C76A40">int</span> );
              <span style="color: #C76A40;
            font-weight: 800;">while</span> _trigger_name = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _data.triggers ) <span style="color: #C76A40;
            font-weight: 800;">loop</span>
                _trigger_name := format( <span style="color: #4d99bf">&#x27;%s_%s&#x27;</span>, _base_name, ( random() * (<span style="color: #C76A40">999999</span> - <span style="color: #C76A40">100000</span> )+<span style="color: #C76A40">100000</span>)::<span style="color: #C76A40">int</span> );
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

              <span style="color: #888">--language=PostgreSQL</span>
              _statement := $<span style="color: #C76A40;
            font-weight: 800;">sql</span>$
                <span style="color: #C76A40;
            font-weight: 800;">create</span> <span style="color: #C76A40;
            font-weight: 800;">trigger</span> _tg_name
                  <span style="color: #C76A40;
            font-weight: 800;">after</span> <span style="color: #C76A40;
            font-weight: 800;">delete</span>
                  <span style="color: #C76A40;
            font-weight: 800;">on</span> _table_name
                  <span style="color: #C76A40;
            font-weight: 800;">for</span> <span style="color: #C76A40;
            font-weight: 800;">statement</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> ( <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_replication() )
                  <span style="color: #C76A40;
            font-weight: 800;">execute</span> <span style="color: #C76A40;
            font-weight: 800;">procedure</span> _use_procedure
                ;
              $<span style="color: #C76A40;
            font-weight: 800;">sql</span>$;

              _statement := replace( _statement, <span style="color: #4d99bf">&#x27;_tg_name&#x27;</span>, <span style="color: #4d99bf">&#x27;%I&#x27;</span> );
              _statement := replace( _statement, <span style="color: #4d99bf">&#x27;delete&#x27;</span>, <span style="color: #4d99bf">&#x27;%s&#x27;</span> );
              _statement := replace( _statement, <span style="color: #4d99bf">&#x27;_table_name&#x27;</span>, <span style="color: #4d99bf">&#x27;%s&#x27;</span> );
              _statement := replace( _statement, <span style="color: #4d99bf">&#x27;statement&#x27;</span>, <span style="color: #4d99bf">&#x27;%s&#x27;</span> );
              _statement := replace( _statement, <span style="color: #4d99bf">&#x27;_use_procedure&#x27;</span>, <span style="color: #4d99bf">&#x27;%s&#x27;</span> );
              _statement := format( _statement, _trigger_name, _tg._tg_op, _new.share_regclass::<span style="color: #C76A40">text</span>, _tg._for, _tg._procedure );
              
              <span style="color: #C76A40;
            font-weight: 800;">begin</span> 
                <span style="color: #C76A40;
            font-weight: 800;">execute</span> _statement;
              <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
              <span style="color: #C76A40;
            font-weight: 800;">end</span>;
              _new.share_triggers := _new.share_triggers || _trigger_name;
              _data.triggers := _data.triggers || _trigger_name;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #397300">tg_when</span> = <span style="color: #4d99bf">&#x27;BEFORE&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #397300">tg_op</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> (  <span style="color: #4d99bf">&#x27;INSERT&#x27;</span>, <span style="color: #4d99bf">&#x27;UPDATE&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> _new;
          elseif <span style="color: #397300">tg_when</span> = <span style="color: #4d99bf">&#x27;BEFORE&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #397300">tg_op</span> <span style="color: #C76A40;
            font-weight: 800;">in</span>( <span style="color: #4d99bf">&#x27;DELETE&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> _old;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface sets_cluster_remote {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.sets_cluster_remote(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              clusters: [{
                cluster_uid
                cluster_identifier
                cluster_receive
                cluster_send
                cluster_path
                cluster_name
                cluster_domain
                cluster_port
              }]
            }
           \*\/</span>
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _data <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">with</span> __clusters <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> c <span style="color: #C76A40;
            font-weight: 800;">as</span> _cluster, e.doc <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_replace
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;clusters&#x27;</span> ) e( doc )
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::<span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>, e.doc ) _clu <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c <span style="color: #C76A40;
            font-weight: 800;">on</span>
                  ( _clu.cluster_identifier = c.cluster_identifier <span style="color: #C76A40;
            font-weight: 800;">and</span> c.cluster_type = _const.cluster_tcluster_remote )
              <span style="color: #C76A40;
            font-weight: 800;">where</span> _clu.cluster_identifier <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span> c.cluster_identifier
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> c.cluster_type != _const.cluster_tcluster_remote
              )
          ), __sets <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> s.&quot;returning&quot; <span style="color: #C76A40;
            font-weight: 800;">as</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __clusters _c
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> lib.sets( _c._cluster, _c.cluster_replace ) s <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> array_agg( s.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> clusters <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __sets s
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true(  to_jsonb( _data ) );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface sets_cluster_configs {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.sets_cluster_configs(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              clusters: [{
                cluster_uid
                cluster_identifier
                cluster_path
                cluster_name
                cluster_domain
                cluster_port
                cluster_key,
                cluster_license,
                cluster_licenselife,
                cluster_tperiod_id
              }]
            }
           \*\/</span>
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _data <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">with</span> __clusters <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> c <span style="color: #C76A40;
            font-weight: 800;">as</span> _cluster, e.doc <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_replace
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;clusters&#x27;</span> ) e( doc )
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::<span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>, e.doc ) _clu <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c <span style="color: #C76A40;
            font-weight: 800;">on</span>  _clu.cluster_type = c.cluster_type
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> _clu.cluster_type <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.cluster_tcluster_master, _const.cluster_tcluster_local )
          ), __sets <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> s.&quot;returning&quot; <span style="color: #C76A40;
            font-weight: 800;">as</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>
            <span style="color: #C76A40;
            font-weight: 800;">from</span> __clusters _c
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> lib.sets( _c._cluster, _c.cluster_replace ) s <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> array_agg( s.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> clusters <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
          <span style="color: #C76A40;
            font-weight: 800;">from</span> __sets s
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true(  to_jsonb( _data ) );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface commit {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">commit</span>(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">version</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            PROPOSE: Versionar tadas as modificações ocoridas na tabala já coletada
           \*\/</span>
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __foregin_key <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                tc.<span style="color: #397300">constraint_name</span>,
                format( <span style="color: #4d99bf">&#x27;%s.%s&#x27;</span>, tc.table_schema, tc.<span style="color: #397300">table_name</span> )::<span style="color: #C76A40">regclass</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> local_table,
                kcu.<span style="color: #397300">column_name</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> local_column,
                format( <span style="color: #4d99bf">&#x27;%s.%s&#x27;</span>,  ccu.table_schema, ccu.<span style="color: #397300">table_name</span> )::<span style="color: #C76A40">regclass</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> foreign_table,
                ccu.<span style="color: #397300">column_name</span> <span style="color: #C76A40;
            font-weight: 800;">AS</span> foreign_column_name
              <span style="color: #C76A40;
            font-weight: 800;">from</span>
                information_schema.table_constraints tc
                  <span style="color: #C76A40;
            font-weight: 800;">join</span> information_schema.key_column_usage kcu <span style="color: #C76A40;
            font-weight: 800;">on</span> tc.<span style="color: #397300">constraint_name</span> = kcu.<span style="color: #397300">constraint_name</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span>  tc.table_schema = kcu.table_schema
                  <span style="color: #C76A40;
            font-weight: 800;">join</span> information_schema.constraint_column_usage ccu <span style="color: #C76A40;
            font-weight: 800;">on</span> ccu.<span style="color: #397300">constraint_name</span> = tc.<span style="color: #397300">constraint_name</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ccu.table_schema = tc.table_schema
              <span style="color: #C76A40;
            font-weight: 800;">where</span> tc.constraint_type = <span style="color: #4d99bf">&#x27;FOREIGN KEY&#x27;</span>
            ), __share <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                local_table,
                s.share_regclass,
                array_agg( foreign_table ),
                count( * ) <span style="color: #C76A40;
            font-weight: 800;">as</span> depencies,
                count( * ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> foreign_table = local_table ) <span style="color: #C76A40;
            font-weight: 800;">as</span> self
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __foregin_key fk
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">share</span> s <span style="color: #C76A40;
            font-weight: 800;">on</span> fk.local_table = s.share_regclass
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> local_table,
                s.share_regclass
            )
            <span style="color: #C76A40;
            font-weight: 800;">select</span> (<span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__create_object_version( s.share_regclass )).*
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __share s
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> s.depencies = <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">1</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> s.depencies = s.self <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">2</span>
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">3</span>
                <span style="color: #C76A40;
            font-weight: 800;">end</span>,
                s.depencies,
                s.self
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface sets_cluster_license {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.sets_cluster_license(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              cluster_uid:UID
              cluster_tperiod_id
              cluster_licenselife: NUMBER &gt;&gt; REPITICAO DO PERIODO
            }
           \*\/</span>
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _interval <span style="color: #C76A40">interval</span>;
          _tperid <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.tperiod;
          _result <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _cluster := jsonb_populate_record( _cluster, args );
          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _tperid <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.tperiod <span style="color: #C76A40;
            font-weight: 800;">where</span> tperiod_id = _cluster.cluster_tperiod_id;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _cluster.cluster_licenselife &gt; <span style="color: #C76A40">0</span>
            <span style="color: #C76A40;
            font-weight: 800;">and</span> _cluster.cluster_tperiod_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
          <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _interval := format( <span style="color: #4d99bf">&#x27;%L %s&#x27;</span>,  _cluster.cluster_licenselife, _tperid.tperiod_code )::<span style="color: #C76A40">interval</span>;
            _cluster.cluster_license := <span style="color: #397300">current_timestamp</span> + _interval;

            <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _result
              <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets( _cluster );

            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true( jsonb_build_object(
              <span style="color: #4d99bf">&#x27;_cluster&#x27;</span>, _result
            ));
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Licensa invalida!&#x27;</span> );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }
    }

    export namespace _Auth {
      export interface funct_reg_privilegio {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_reg_privilegio(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para registrar os menus que um perfil tem privilegiso por padrão
            -- argumentos
              -- arg_colaborador_id corresponde ao identificador do colabrador responsavel por privilegiar o menu ao perfil
              -- arg_menus corresponde aos identificadores dos menus em que serão associados ao perfil
              -- arg_perfil_id corresponde ao identificador do perfil que ira ter acesso aos menus
           \*\/</span>

          arg_colaborador_id <span style="color: #C76A40">uuid</span>  := args -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_perfil_id <span style="color: #C76A40">uuid</span>       := args -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_perfil_id&#x27;</span>;
          arg_menus         <span style="color: #C76A40">jsonb</span> := args -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_menus&#x27;</span>;

          arg_menu_list <span style="color: #C76A40">int</span>[ ] := <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> jsonb_array_elements_text( arg_menus )::<span style="color: #C76A40">int</span> );

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          arg_privilegios auth.privilegio[];
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #888">-- Desativar todos os menus que não farão parte desse perfil</span>
          <span style="color: #C76A40;
            font-weight: 800;">update</span> auth.privilegio
            <span style="color: #C76A40;
            font-weight: 800;">set</span> privilegio_estado = _const.privilegio_estado_fechado,
                privilegio_dataatualuzacao = <span style="color: #397300">current_timestamp</span>,
                privilegio_colaborador_atualizacao = arg_colaborador_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span> previlegio_perfil_id = arg_perfil_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> privilegio_estado = _const.perfil_estado_ativo
              <span style="color: #C76A40;
            font-weight: 800;">and</span> privilegio_menu_id != <span style="color: #C76A40;
            font-weight: 800;">all</span>( arg_menu_list )
          ;

          <span style="color: #888">-- Associar os novos menus ao perfil</span>
          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> auth.privilegio(
            previlegio_perfil_id,
            privilegio_menu_id,
            privilegio_colaborador_id
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
              arg_perfil_id,
              me.menu_id,
              arg_colaborador_id
            <span style="color: #C76A40;
            font-weight: 800;">from</span> unnest( arg_menu_list ) m( id )
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.menu me <span style="color: #C76A40;
            font-weight: 800;">on</span> m.id = me.menu_id
              <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.privilegio pri <span style="color: #C76A40;
            font-weight: 800;">on</span> me.menu_id = pri.privilegio_menu_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> pri.privilegio_estado = _const.privilegio_estado_ativo
            <span style="color: #C76A40;
            font-weight: 800;">where</span> pri.privilegio_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
          ;

          <span style="color: #888">-- Obter todos os privilegios associados ao perfil</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> array_agg( pri ) <span style="color: #C76A40;
            font-weight: 800;">into</span> arg_privilegios
            <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.privilegio pri
            <span style="color: #C76A40;
            font-weight: 800;">where</span> pri.previlegio_perfil_id = arg_perfil_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> pri.privilegio_estado = _const.privilegio_estado_ativo
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;privilegios&#x27;</span>, arg_privilegios
            )
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_perfil {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_change_perfil(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para modificar dos dados do perfil como o nome
            --args
              -- arg_colaborador_id corresponde ao identificador do colaborador responsavel pelo atualização do perfil
              -- arg_perfil_id corresponed ao identificador do perfil que tera as informações alterada
              -- arg_perfil_nome corresponde ao novo nome para o perfil
           \*\/</span>

          arg_colaborador_id <span style="color: #C76A40">uuid</span>           := args -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_perfil_id <span style="color: #C76A40">uuid</span>                := args -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_perfil_id&#x27;</span>;
          arg_menu <span style="color: #C76A40">jsonb</span>                    := args -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_menus&#x27;</span>;
          arg_perfil_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> := args -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_perfil_nome&#x27;</span>;

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _perfil auth.perfil;
          _res lib.result;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _perfil := auth._get_perfil( arg_perfil_id );

          arg_perfil_nome := lib.str_normalize( arg_perfil_nome );

          <span style="color: #888">-- para os perfil com código não pode ter as informações alteradas</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _perfil.perfil_codigo <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;@auth.perfil.codigo.locked&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">update</span> auth.perfil
            <span style="color: #C76A40;
            font-weight: 800;">set</span> perfil_nome = arg_perfil_nome,
                perfil_colaborador_atualizacao = arg_colaborador_id,
                perfil_dataatualizacao = <span style="color: #397300">current_timestamp</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> perfil_id = arg_perfil_id
          ;

          _res := auth.funct_reg_privilegio( args );
          _res.message := _res.message || jsonb_build_object(
            <span style="color: #4d99bf">&#x27;perfil&#x27;</span>, _perfil
          );

          <span style="color: #C76A40;
            font-weight: 800;">return</span> _res;

        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _menu_load_structure {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth._menu_load_structure(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(menu_id <span style="color: #C76A40">smallint</span>, menu_codigo <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_raiz <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_nivel <span style="color: #C76A40">smallint</span>, menu_link <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_icon <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_estado <span style="color: #C76A40">smallint</span>, menu_children <span style="color: #C76A40">smallint</span>, menu_directchildern <span style="color: #C76A40">smallint</span>, menu_maxnode <span style="color: #C76A40">smallint</span>, menu_position <span style="color: #C76A40">smallint</span>, menu_menu_id <span style="color: #C76A40">smallint</span>, menu_menu_codigo <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_menu_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_menu_raiz <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_menu_nivel <span style="color: #C76A40">smallint</span>, menu_menu_link <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_menu_icon <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _menu <span style="color: #C76A40">record</span>;
          menu_super_id <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;menu_id&#x27;</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">for</span> _menu <span style="color: #C76A40;
            font-weight: 800;">in</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
              me.menu_id,
              me.menu_codigo,
              me.menu_nome,
              me.menu_raiz,
              me.menu_nivel,
              me.menu_link,
              me.menu_icon,
              me.menu_estado,
              me.menu_children,
              me.menu_directchildern,
              me.menu_maxnode,
              me.menu_position,
              super.menu_id <span style="color: #C76A40;
            font-weight: 800;">as</span> menu_menu_id,
              super.menu_codigo <span style="color: #C76A40;
            font-weight: 800;">as</span> menu_menu_codigo,
              super.menu_nome <span style="color: #C76A40;
            font-weight: 800;">as</span> menu_menu_nome,
              super.menu_raiz <span style="color: #C76A40;
            font-weight: 800;">as</span> menu_menu_raiz,
              super.menu_nivel <span style="color: #C76A40;
            font-weight: 800;">as</span> menu_menu_nivel,
              super.menu_link <span style="color: #C76A40;
            font-weight: 800;">as</span> menu_menu_link,
              super.menu_icon <span style="color: #C76A40;
            font-weight: 800;">as</span> menu_menu_icon
            <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.menu me
              <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.menu super <span style="color: #C76A40;
            font-weight: 800;">on</span>  me.menu_menu_id = super.menu_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span> me.menu_menu_id = menu_super_id <span style="color: #C76A40;
            font-weight: 800;">or</span> (
              menu_super_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> me.menu_menu_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
            )
            <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
              me.menu_position,
              me.menu_nome
          ) <span style="color: #C76A40;
            font-weight: 800;">loop</span> <span style="color: #888">-- proximo concorente</span>



            <span style="color: #888">-- Quando um menu tem filhos emtao motra todos os filhos desse menu antes de passa para o proximo meno</span>
            <span style="color: #C76A40;
            font-weight: 800;">return query</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                _menu.menu_id,
                _menu.menu_codigo,
                _menu.menu_nome,
                _menu.menu_raiz,
                _menu.menu_nivel,
                _menu.menu_link,
                _menu.menu_icon,
                _menu.menu_estado,
                _menu.menu_children,
                _menu.menu_directchildern,
                _menu.menu_maxnode,
                _menu.menu_position,
                _menu.menu_menu_id,
                _menu.menu_menu_codigo,
                _menu.menu_menu_nome,
                _menu.menu_menu_raiz,
                _menu.menu_menu_nivel,
                _menu.menu_menu_link,
                _menu.menu_menu_icon
            ;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _menu.menu_children &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                <span style="color: #C76A40;
            font-weight: 800;">from</span> auth._menu_load_structure(
                  jsonb_build_object(
                    <span style="color: #4d99bf">&#x27;menu_id&#x27;</span>, _menu.menu_id
                  )
                );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_colaborador_all_menu {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_load_colaborador_all_menu(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(colaborador_id <span style="color: #C76A40">uuid</span>, colaborador_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_apelido <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_foto <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para devolver os colaboradores que tenham o conjunto de menu especificado
            filter := {
              arg_colaborador_id: ID
              arg_menus: [
                menu_codigo,
                menu_codigo,
                menu_codigo
              ]
            }
          *\*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          args_menus <span style="color: #C76A40">varchar</span>[ ] := <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> <span style="color: #C76A40;
            font-weight: 800;">distinct</span> doc.menu_codigo <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements_text( <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_menus&#x27;</span> ) doc( menu_codigo ) );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                co.colaborador_id,
                co.colaborador_nome,
                co.colaborador_apelido,
                co.colaborador_foto
              <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.colaborador co
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.acesso acc <span style="color: #C76A40;
            font-weight: 800;">on</span> co.colaborador_id = acc.acesso_colaborador_propetario
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.menu men <span style="color: #C76A40;
            font-weight: 800;">on</span> acc.acesso_menu_id = men.menu_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> acc.acesso_estado = _const.acesso_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> co.colaborador_estado = _const.colaborador_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> co.colaborador_id = coalesce( arg_colaborador_id, co.colaborador_id )
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> co.colaborador_id
              <span style="color: #C76A40;
            font-weight: 800;">having</span> array_agg( men.menu_codigo ) @&gt; args_menus
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> co.colaborador_dataultimologin <span style="color: #C76A40;
            font-weight: 800;">desc</span> <span style="color: #C76A40;
            font-weight: 800;">nulls last</span>,
                co.colaborador_nome,
                co.colaborador_apelido
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_perfil {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth._get_perfil(arg_perfil_id <span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> auth.perfil
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para obter a instancia do perfil a partir do seu identificador único
           \*\/</span>
          _perfil auth.perfil;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _perfil
            <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.perfil pe
            <span style="color: #C76A40;
            font-weight: 800;">where</span> pe.perfil_id = arg_perfil_id
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> _perfil;

        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _colaborador_accesso_desc {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth._colaborador_accesso_desc(arg_colaborador_acesso <span style="color: #C76A40">smallint</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para obter a descrição do accesso colaborador
           \*\/</span>
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span> := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_colaborador_acesso = _const.colaborador_accesso_ativo <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #4d99bf">&#x27;Ativo&#x27;</span>;
          elseif arg_colaborador_acesso = _const.colaborador_accesso_pendente <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #4d99bf">&#x27;Pendente&#x27;</span>;
          elseif arg_colaborador_acesso = _const.colaborador_accesso_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #4d99bf">&#x27;Desativo&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;

        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_menu {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_load_menu(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(menu_id <span style="color: #C76A40">smallint</span>, menu_codigo <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_raiz <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_nivel <span style="color: #C76A40">smallint</span>, menu_icon <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_link <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_estado <span style="color: #C76A40">smallint</span>, menu_children <span style="color: #C76A40">smallint</span>, menu_maxnode <span style="color: #C76A40">smallint</span>, menu_directchildern <span style="color: #C76A40">smallint</span>, menu_position <span style="color: #C76A40">smallint</span>, menu_falta <span style="color: #C76A40">boolean</span>, menu_mais <span style="color: #C76A40">boolean</span>, menu_sincronizado <span style="color: #C76A40">boolean</span>, acesso_id <span style="color: #C76A40">uuid</span>, perfil_id <span style="color: #C76A40">uuid</span>, menu_menu_id <span style="color: #C76A40">smallint</span>, menu_menu_codigo <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_menu_raiz <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_menu_nivel <span style="color: #C76A40">smallint</span>, menu_menu_icon <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_menu_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_menu_link <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_menu_estado <span style="color: #C76A40">smallint</span>, menu_menu_children <span style="color: #C76A40">smallint</span>, menu_menu_maxnode <span style="color: #C76A40">smallint</span>, menu_menu_directchildern <span style="color: #C76A40">smallint</span>, menu_menu_position <span style="color: #C76A40">smallint</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função carrega os menus e faz um mach entre e perfil e o colaborador
            -- argumentos
              -- arg_colaborador_id identificador do colaborador o qual pretende-se obter os menus (opcional)
              -- arg_perfil_id identificador do perfil o qual pretende-se obter os menus (opcional)
              -- arg_allmenu boolean | quando true significa carregar todos os menus independete mente se o colaborador
                ou menu estiver associado ao mesmo
           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> := <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_perfil_id <span style="color: #C76A40">uuid</span> := <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_perfil_id&#x27;</span>;
          arg_allmenu <span style="color: #C76A40">boolean</span> := <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_allmenu&#x27;</span>;

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #888">-- Quando o filtro não for expecificado carregar todos os menus</span>
          arg_allmenu := coalesce( arg_allmenu, <span style="color: #C76A40;
            font-weight: 800;">true</span> );


          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                me.menu_id                ,
                me.menu_codigo            ,
                me.menu_raiz              ,
                me.menu_nivel             ,
                me.menu_icon              ,
                me.menu_nome              ,
                me.menu_link              ,
                me.menu_estado            ,
                me.menu_children          ,
                me.menu_maxnode           ,
                me.menu_directchildern    ,
                me.menu_position          ,

                ac.acesso_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> perf.perfil_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>,
                ac.acesso_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> perf.perfil_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>,
                ac.acesso_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> perf.perfil_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>,

                ac.acesso_id              ,
                perf.perfil_id,

                super.menu_id             ,
                super.menu_codigo         ,
                super.menu_raiz           ,
                super.menu_nivel          ,
                super.menu_icon           ,
                super.menu_nome           ,
                super.menu_link           ,
                super.menu_estado         ,
                super.menu_children       ,
                super.menu_maxnode        ,
                super.menu_directchildern ,
                super.menu_position

              <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.menu me
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.menu super <span style="color: #C76A40;
            font-weight: 800;">on</span> me.menu_menu_id = super.menu_id
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.acesso ac <span style="color: #C76A40;
            font-weight: 800;">on</span> me.menu_id = ac.acesso_menu_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ac.acesso_estado = _const.acesso_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ac.acesso_colaborador_propetario = arg_colaborador_id
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.colaborador col <span style="color: #C76A40;
            font-weight: 800;">on</span> ac.acesso_colaborador_propetario = col.colaborador_id
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.privilegio pri <span style="color: #C76A40;
            font-weight: 800;">on</span> me.menu_id = pri.privilegio_menu_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> pri.privilegio_estado = _const.privilegio_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.perfil perf <span style="color: #C76A40;
            font-weight: 800;">on</span> pri.previlegio_perfil_id = perf.perfil_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> perf.perfil_estado = _const.perfil_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> perf.perfil_id = arg_perfil_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> me.menu_estado = _const.menu_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> (
                  ac.acesso_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                    <span style="color: #C76A40;
            font-weight: 800;">or</span> perf.perfil_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                    <span style="color: #C76A40;
            font-weight: 800;">or</span> col.colaborador_tipo = _const.colaborador_tipo_user_master <span style="color: #888">-- para os colaboradores master carregar dodos os menus disponiveis</span>
                    <span style="color: #C76A40;
            font-weight: 800;">or</span> arg_allmenu
                )
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> me.menu_position
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_colaborador {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_change_colaborador(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para aatualizar as informações do colaborador
            args := {
              arg_colaborador_id: ID,
              arg_colaborador_editar: ID,
              arg_colaborador_email: MAIL,
              arg_colaborador_nome: NOME,
              arg_colaborador_apelido: APELIDO,
              arg_colaborador_datanascimento: DATA,
              arg_colaborador_nif: NIF,
              arg_colaborador_ficha: FICHA,
              arg_colaborador_foto: FICHA,
              arg_tsexo_id: SEXO
            }
            arg_colaborador_editar corresponde ao id do colaborador que sera atualizado
            arg_colaborador_id corresponde ao id do colaborador que esata efetuar a atualização
          \*\/</span>

          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>       := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_colaborador_editar <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>   := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_editar&#x27;</span>;

          arg_colaborador_email <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>   := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_email&#x27;</span>;
          arg_colaborador_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>    := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_nome&#x27;</span>;
          arg_colaborador_apelido <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_apelido&#x27;</span>;
          arg_colaborador_datanascimento <span style="color: #C76A40">date</span>       := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_datanascimento&#x27;</span>;
          arg_colaborador_nif <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>     := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_nif&#x27;</span>;
          arg_colaborador_ficha <span style="color: #C76A40">jsonb</span>               := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_ficha&#x27;</span>;
          arg_colaborador_foto <span style="color: #C76A40">varchar</span>               := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_foto&#x27;</span>;
          arg_tsexo_id <span style="color: #C76A40">int2</span>                         := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_tsexo_id&#x27;</span>;

          _colaborador auth.colaborador := auth._get_colaborador( arg_colaborador_editar );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

            <span style="color: #888">-- Tanto o nif, quanto o email deve ser único na base de dados</span>
            arg_colaborador_email := lib.str_normalize( lower( arg_colaborador_email ) );
            arg_colaborador_nif := lib.str_normalize( lower( arg_colaborador_nif ) );

            <span style="color: #888">-- Quando existir email e estiver associado ao utro colaborador então</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_colaborador_email <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>  <span style="color: #C76A40;
            font-weight: 800;">and</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.colaborador
                <span style="color: #C76A40;
            font-weight: 800;">where</span> colaborador_email = arg_colaborador_email
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> colaborador_id != _colaborador.colaborador_id
            ) &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;@auth.colaborador.email-exist&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #888">-- Quando existir um colaborador o nif expecificado</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_colaborador_nif <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span>  (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * ) &gt; <span style="color: #C76A40">0</span>
                <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.colaborador co
                <span style="color: #C76A40;
            font-weight: 800;">where</span> co.colaborador_nif = arg_colaborador_nif
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> co.colaborador_id != _colaborador.colaborador_id
            ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;@auth.colaborador.nif-exist&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #888">-- A atualização deve ser feita apenas quando o novo valor vier nulo</span>
            <span style="color: #C76A40;
            font-weight: 800;">update</span> auth.colaborador
              <span style="color: #C76A40;
            font-weight: 800;">set</span> colaborador_email = coalesce( arg_colaborador_email, colaborador_email ),
                  colaborador_nome = coalesce( lib.str_normalize( arg_colaborador_nome ), colaborador_nome ),
                  colaborador_apelido = coalesce( lib.str_normalize( arg_colaborador_apelido ), colaborador_apelido ),
                  colaborador_tsexo_id = coalesce( arg_tsexo_id, colaborador_tsexo_id ),
                  colaborador_datanascimento = coalesce( arg_colaborador_datanascimento, colaborador_datanascimento ),
                  colaborador_nif = coalesce( arg_colaborador_nif, colaborador_nif ),
                  colaborador_foto = coalesce( arg_colaborador_foto, colaborador_foto ),
                  colaborador_ficha = coalesce( arg_colaborador_ficha, colaborador_ficha ),
                  colaborador_colaborador_atualizacao = arg_colaborador_id,
                  colaborador_dataatualizacao = now()
              <span style="color: #C76A40;
            font-weight: 800;">where</span> colaborador_id = _colaborador.colaborador_id
            ;

            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true();
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_autenticacao_logoff {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_autenticacao_logoff(arg <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\**
              Essa funçãos serve para terminar a seção de um colaborador
             \*\/</span>

          arg_autenticacao_chave <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> := arg-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_autenticacao_chave&#x27;</span>;

          _autenticacao auth.autenticacao;
          _const <span style="color: #C76A40;
            font-weight: 800;">constant</span> map.<span style="color: #C76A40;
            font-weight: 800;">constant</span> := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _autenticacao
            <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.autenticacao au
            <span style="color: #C76A40;
            font-weight: 800;">where</span>  au.autenticacao_chave = arg_autenticacao_chave
          ;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _autenticacao.autenticacao_estado != _const.autenticacao_estado_ativo <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true();
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">update</span> auth.autenticacao
            <span style="color: #C76A40;
            font-weight: 800;">set</span> autenticacao_estado = _const.autenticacao_estado_fechado,
                autenticacao_dataatualizacao = now()
            <span style="color: #C76A40;
            font-weight: 800;">where</span> autenticacao_id = _autenticacao.autenticacao_id;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true( <span style="color: #4d99bf">&#x27;sucesso&#x27;</span> );

        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_colaborador_token_ativate {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_change_colaborador_token_ativate(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa funcao serve para ativar um colaborador quando tem token ativo
            Na ativação a senha ser definida, o acesso passara a ser ativo e o token deixara de existir

           \*\/</span>

          arg_colaborador_id <span style="color: #C76A40">integer</span>              := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_colaborador_token <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_token&#x27;</span>;
          arg_colaborador_senha <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>  := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_senha&#x27;</span>;
          arg_colaborador_pin <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>  := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_pin&#x27;</span>;


          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span> := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _colaborador auth.colaborador := auth._get_colaborador( arg_colaborador_id := arg_colaborador_id );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _colaborador.colaborador_token <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;@auth.colaborador.token-not-found&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _colaborador.colaborador_estado != _const.colaborador_estado_ativo
            <span style="color: #C76A40;
            font-weight: 800;">or</span>  _colaborador.colaborador_accesso <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.colaborador_accesso_ativo, _const.colaborador_accesso_pendente )
          <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;auth.colaborador.acesso-can-not-active&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> auth._colaborador_token_encrypt( _colaborador ) != arg_colaborador_token <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;@auth.colaborador.token-invalid&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- Ativar o colaborador</span>
          <span style="color: #C76A40;
            font-weight: 800;">update</span> auth.colaborador
            <span style="color: #C76A40;
            font-weight: 800;">set</span>
              colaborador_accesso = _const.colaborador_accesso_ativo,
              colaborador_token = <span style="color: #C76A40;
            font-weight: 800;">null</span>,
              colaborador_tokenlimit = <span style="color: #C76A40;
            font-weight: 800;">null</span>,
              colaborador_senha = auth._encrypt( arg_colaborador_senha ),
              colaborador_pin = auth._encrypt( arg_colaborador_pin ),
              colaborador_pinmodo = _const.colaborador_chavemodo_utilizador,
              colaborador_senhamodo = _const.colaborador_chavemodo_utilizador,
              colaborador_dataultimaatualizacasenha = now(),
              colaborador_dataatualizacao = now(),
              colaborador_colaborador_atualizacao = arg_colaborador_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span> colaborador_id = arg_colaborador_id
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true( <span style="color: #4d99bf">&#x27;sucesso&#x27;</span> );

        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_colaborador {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_load_colaborador(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(colaborador_id <span style="color: #C76A40">uuid</span>, colaborador_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_apelido <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_mail <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_estado <span style="color: #C76A40">smallint</span>, colaborador_estadodesc <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_acesso <span style="color: #C76A40">smallint</span>, colaborador_acessodesc <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_foto <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, sexo_id <span style="color: #C76A40">smallint</span>, sexo_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, sexo_codigo <span style="color: #C76A40">character</span>, colaborador_datanascimento <span style="color: #C76A40">date</span>, colaborador_nif <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função sere para carregar os colaborador apartir dos filtros expecificados
           \*\/</span>
          arg_colaborador_email <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_email&#x27;</span>;
          arg_colaborador_nif <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_nif&#x27;</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const :=  map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> co.colaborador_id,
                co.colaborador_nome,
                co.colaborador_apelido,
                co.colaborador_email,
                co.colaborador_estado,
                auth._colaborador_estado_desc( co.colaborador_estado ),
                co.colaborador_accesso,
                auth._colaborador_accesso_desc( co.colaborador_accesso ),
                co.colaborador_foto,
                s2.tsexo_id,
                s2.tsexo_nome,
                s2.tsexo_codigo,
                co.colaborador_datanascimento,
                co.colaborador_nif
              <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.colaborador co
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.tsexo s2 <span style="color: #C76A40;
            font-weight: 800;">ON</span> co.colaborador_tsexo_id = s2.tsexo_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> co.colaborador_tipo <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.colaborador_tipo_user, _const.colaborador_tipo_user_master )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> co.colaborador_email = coalesce( arg_colaborador_email, co.colaborador_email )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> co.colaborador_nif = coalesce( arg_colaborador_nif, co.colaborador_nif )
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> co.colaborador_accesso = _const.colaborador_accesso_ativo <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">1</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> co.colaborador_accesso = _const.colaborador_accesso_pendente <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">2</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> co.colaborador_accesso = _const.colaborador_accesso_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">3</span>
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">asc</span>,
                co.colaborador_nome,
                co.colaborador_apelido
              ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_colaborador {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth._get_colaborador(arg_colaborador_id <span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> auth.colaborador
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para obter a instancia de um colaborador a partir do seu identificador único
           \*\/</span>
          _colaborador auth.colaborador;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _colaborador
            <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.colaborador co
            <span style="color: #C76A40;
            font-weight: 800;">where</span> co.colaborador_id = arg_colaborador_id
          ;
          <span style="color: #C76A40;
            font-weight: 800;">return</span> _colaborador;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _autenticacao_chave_generate {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth._autenticacao_chave_generate()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para gerar a chave de atutenticação para uma autenticação
           \*\/</span>
          arg_autenticacao_chave <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #bc6060">&lt;&lt;random_key&gt;&gt;</span> <span style="color: #888">-- gerar uma chave unica para a proxima autenticação</span>
          <span style="color: #C76A40;
            font-weight: 800;">while</span> arg_autenticacao_chave <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>
            arg_autenticacao_chave := lib.dset_random_text( _const.autenticacao_chave_length );
            <span style="color: #C76A40;
            font-weight: 800;">if</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * ) &gt; <span style="color: #C76A40">0</span>
                <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.autenticacao au
                <span style="color: #C76A40;
            font-weight: 800;">where</span> au.autenticacao_chave = arg_autenticacao_chave
            ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
              arg_autenticacao_chave := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> arg_autenticacao_chave;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _colaborador_estado_desc {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth._colaborador_estado_desc(arg_colaborador_estado <span style="color: #C76A40">smallint</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para devolver os estados do colaborador
           \*\/</span>
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_colaborador_estado = _const.colaborador_estado_ativo <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #4d99bf">&#x27;Ativo&#x27;</span>   ; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_colaborador_estado = _const.colaborador_estado_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #4d99bf">&#x27;Desativo&#x27;</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_colaborador_senha {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_change_colaborador_senha(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa funcao serve para alterar a senha de um colaborador autenticado

              args := {
                arg_colaborador_id: ID,
                arg_colaborador_senhaold: SENHA,
                arg_colaborador_senhanew: SENHA
              }
            -- argumentos
              arg_colaborador_id corresponde ao identificador do colaborador que esta a alterar a sua propia senha
              arg_colaborador_senhaold corresponde a antiga senha do colaborador
              arg_colaborador_senhanew corresponde a nova senha do colaboarador
          \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span>                      := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_colaborador_senhaold <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>  := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_senhaold&#x27;</span>;
          arg_colaborador_senhanew <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>  := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_senhanew&#x27;</span>;
          _colaborador auth.colaborador := auth._get_colaborador( arg_colaborador_id );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #888">-- A antiga senha do colaborador tem que bater igual senha atual cadastrada na base de dados</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _colaborador.colaborador_senha != auth._encrypt( arg_colaborador_senhaold ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;Palavra-passe atual inválida!&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- A nova senha tem que ser uma senha diferente da senha antiga</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _colaborador.colaborador_senha = auth._encrypt( arg_colaborador_senhanew ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;Nova palavra-passe tem que ser diferente da palavra-passe atual!&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">update</span> auth.colaborador
            <span style="color: #C76A40;
            font-weight: 800;">set</span> colaborador_senha = auth._encrypt( arg_colaborador_senhanew ),
                colaborador_dataultimaatualizacasenha = now(),
                colaborador_dataatualizacao = now(),
                colaborador_colaborador_atualizacao = arg_colaborador_id,
                colaborador_senhamodo = _const.colaborador_chavemodo_utilizador
            <span style="color: #C76A40;
            font-weight: 800;">where</span> colaborador_id = arg_colaborador_id
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true( <span style="color: #4d99bf">&#x27;success&#x27;</span> );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _menu_create {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth._menu_create(arg_menu_codigo <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, arg_menu_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, arg_menu_menu_codigo <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, arg_menu_link <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, arg_menu_icon <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">DECLARE</span>
          <span style="color: #888">\/\**
            Essa função serve para criar um novo menu
           \*\/</span>
          arg_menu_nivel <span style="color: #C76A40">int</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40">0</span>;
          arg_menu_raiz <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;
          arg_total_raiz <span style="color: #C76A40">int</span>;
          _menu auth.menu;
          _menu_menu auth.menu;
          _const <span style="color: #C76A40;
            font-weight: 800;">constant</span> map.<span style="color: #C76A40;
            font-weight: 800;">constant</span> := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
        <span style="color: #C76A40;
            font-weight: 800;">BEGIN</span>
          <span style="color: #888">-- O codigo do menu deve ser unico</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> (
               <span style="color: #C76A40;
            font-weight: 800;">select</span> count(*)
               <span style="color: #C76A40;
            font-weight: 800;">from</span>  auth.menu m
               <span style="color: #C76A40;
            font-weight: 800;">where</span> lower(m.menu_codigo) = lower( arg_menu_codigo )
             ) &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;Já existe um menu com esse codigo&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- O codigo do menu super tem de existir</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_menu_menu_codigo <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> count(*)
            <span style="color: #C76A40;
            font-weight: 800;">from</span>  auth.menu m
            <span style="color: #C76A40;
            font-weight: 800;">where</span> lower(m.menu_codigo) =  lower( arg_menu_menu_codigo )
          ) = <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;Identificador do menu super não foi encontrado!&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_menu_menu_codigo <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _menu_menu
              <span style="color: #C76A40;
            font-weight: 800;">from</span>  auth.menu m
              <span style="color: #C76A40;
            font-weight: 800;">where</span> upper( m.menu_codigo ) = upper( arg_menu_menu_codigo )
            ;

            <span style="color: #C76A40;
            font-weight: 800;">select</span> count (*) <span style="color: #C76A40;
            font-weight: 800;">into</span> arg_total_raiz
              <span style="color: #C76A40;
            font-weight: 800;">from</span>  auth.menu me
              <span style="color: #C76A40;
            font-weight: 800;">where</span> me.menu_menu_id = _menu_menu.menu_id
            ;

            arg_menu_raiz := _menu_menu.menu_raiz||<span style="color: #4d99bf">&#x27;.&#x27;</span>||trim(to_char( arg_total_raiz, _const.menu_raizcomplete ));
            arg_menu_nivel := _menu_menu.menu_nivel +<span style="color: #C76A40">1</span>;
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> count (*) <span style="color: #C76A40;
            font-weight: 800;">into</span> arg_total_raiz
              <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.menu me
              <span style="color: #C76A40;
            font-weight: 800;">where</span> me.menu_menu_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;

            <span style="color: #888">-- Quando exeder a quantidade de sub menu maximo em um menu entao abortar a operacao emitindo uma message de eroo</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_total_raiz &gt; _const.menu_maxchildren <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false(
                  lib.message(<span style="color: #4d99bf">&#x27;max-submenu-exceeded&#x27;</span>)
              );
            <span style="color: #C76A40;
            font-weight: 800;">END</span> <span style="color: #C76A40;
            font-weight: 800;">IF</span>;
            arg_menu_raiz := trim(to_char(arg_total_raiz, _const.menu_raizcomplete));
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> auth.menu(
            menu_menu_id,
            menu_nome,
            menu_link,
            menu_codigo,
            menu_nivel,
            menu_raiz
          ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
            _menu_menu.menu_id,
            arg_menu_nome,
            arg_menu_link,
            arg_menu_codigo,
            arg_menu_nivel,
            arg_menu_raiz
          ) <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _menu;

          <span style="color: #C76A40;
            font-weight: 800;">perform</span>  auth._menu_create_set_up();

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false(
              jsonb_build_object(
                  <span style="color: #4d99bf">&#x27;data&#x27;</span>, to_jsonb( _menu ),
                  <span style="color: #4d99bf">&#x27;text&#x27;</span>, <span style="color: #4d99bf">&#x27;success&#x27;</span>
              )
          );

        <span style="color: #C76A40;
            font-weight: 800;">END</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_grants {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_load_grants(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            menus: [ID, ID] || null
            colaborador_id: UID
           \*\/</span>
          _menu <span style="color: #C76A40">int</span>[];
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          useMenu <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;<span style="color: #4d99bf">&#x27;menus&#x27;</span>;
          _colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;colaborador_id&#x27;</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">if</span> jsonb_typeof( useMenu ) != <span style="color: #4d99bf">&#x27;array&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> useMenu := <span style="color: #C76A40;
            font-weight: 800;">null</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> useMenu <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> jsonb_array_length( useMenu ) = <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _menu := <span style="color: #C76A40;
            font-weight: 800;">array</span>(
                <span style="color: #C76A40;
            font-weight: 800;">select</span> me.menu_id
                <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.menu me
              );
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            _menu := <span style="color: #C76A40;
            font-weight: 800;">array</span>(
                <span style="color: #C76A40;
            font-weight: 800;">select</span> e.text::<span style="color: #C76A40">int</span>
                <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements_text( useMenu ) e( <span style="color: #C76A40">text</span> )
              );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>  to_jsonb( ac ) || to_jsonb( me )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.menu me
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.acesso ac <span style="color: #C76A40;
            font-weight: 800;">on</span> me.menu_id = ac.acesso_menu_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ac.acesso_estado = _const.acesso_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ac.acesso_colaborador_propetario = _colaborador_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> me.menu_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _menu )
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> me.menu_position
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_colaborador_accesso_disable {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_change_colaborador_accesso_disable(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\**
              Essa função serve para disativar o accesso de um dado colaborador no sistema
              args := {
                arg_colaborador_id: ID,
                arg_colaborador_disable: ID
              }
              -- argumentos
                arg_colaborador_id corresponde ao colaborador logado no sistema que esta a efetuar a operação de desativação
                arg_colaborador_disable corresponde ao colaborador que tera o acesso desabilitado do sistema
             \*\/</span>

          arg_colaborador_id <span style="color: #C76A40">uuid</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_colaborador_disable <span style="color: #C76A40">uuid</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_disable&#x27;</span>;
          _colaborador auth.colaborador := auth._get_colaborador( arg_colaborador_disable );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #888">-- Um colaborador master não pode ser desabilitado do sistema</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _colaborador.colaborador_tipo = _const.colaborador_tipo_user_master <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;auth.colaborador.disable-master&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">update</span> auth.colaborador
            <span style="color: #C76A40;
            font-weight: 800;">set</span> colaborador_accesso = <span style="color: #C76A40">0</span>,
                colaborador_colaborador_atualizacao = arg_colaborador_id,
                colaborador_dataatualizacao = <span style="color: #397300">current_timestamp</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> colaborador_id = arg_colaborador_disable
            <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _colaborador;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;colaborador&#x27;</span>, _colaborador
            )
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_trabalha {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_reg_trabalha(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para registar os locas que um colaborador pode trabalhar
            args := {
              arg_espaco_auth: ID
              arg_colaborador_id: ID,
              arg_colaborador_propetario: ID,
              _branch_uid: UID
              arg_espaco : [
                { arg_espaco_id: ID }
              ]
            }
          \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span>  <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[ ] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
          arg_colaborador_propetario <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_propetario&#x27;</span>;
          arg_espaco <span style="color: #C76A40">uuid</span>[ ] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span> ( <span style="color: #C76A40;
            font-weight: 800;">select</span> ( el.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_id&#x27;</span> )::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;arg_espaco&#x27;</span> ) el ( doc ) );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _branch  tweeks.branch;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _branch := tweeks._get_branch_by_colaborador( arg_colaborador_propetario );


          <span style="color: #888">-- Fechar todos os espaços em que o colaborador não vai mais trabalhar</span>
          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.trabalha
            <span style="color: #C76A40;
            font-weight: 800;">set</span> trabalha_estado = _const.maguita_trabalha_estado_fechado,
                trabalha_colaborador_atualizacao = arg_colaborador_id,
                trabalha_dataatualizacao = <span style="color: #397300">current_timestamp</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> trabalha_estado = _const.maguita_trabalha_estado_ativo
              <span style="color: #C76A40;
            font-weight: 800;">and</span> trabalha_colaborador_proprietario = arg_colaborador_propetario
              <span style="color: #C76A40;
            font-weight: 800;">and</span> trabalha_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
              <span style="color: #C76A40;
            font-weight: 800;">and</span> _branch_uid = _branch.branch_uid

          ;

          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.trabalha (
            trabalha_colaborador_id,
            trabalha_colaborador_proprietario,
            trabalha_perfil_id,
            trabalha_espaco_destino,
            trabalha_espaco_auth,
            _branch_uid
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> arg_colaborador_id,
              arg_colaborador_propetario,
              <span style="color: #C76A40;
            font-weight: 800;">null</span>,
              es.arg_espaco_id,
              arg_espaco_auth,
             _branch.branch_uid
            <span style="color: #C76A40;
            font-weight: 800;">from</span> unnest( arg_espaco ) es ( arg_espaco_id )
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;trabalha&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">array</span>(
              <span style="color: #C76A40;
            font-weight: 800;">select</span> tr
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.trabalha tr
                <span style="color: #C76A40;
            font-weight: 800;">where</span> tr.trabalha_estado = _const.maguita_trabalha_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> tr.trabalha_colaborador_proprietario = arg_colaborador_propetario
            )
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _menu_create_set_up {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth._menu_create_set_up()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">void</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para estruturar os  eus depois que o novo menu é registrado
           \*\/</span>
          _menu <span style="color: #C76A40">record</span>;
          icount <span style="color: #C76A40">int</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40">0</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">for</span> _menu <span style="color: #C76A40;
            font-weight: 800;">in</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
            <span style="color: #C76A40;
            font-weight: 800;">from</span> auth._menu_load_structure( )
          ) <span style="color: #C76A40;
            font-weight: 800;">loop</span>
            <span style="color: #C76A40;
            font-weight: 800;">update</span> auth.menu cur
            <span style="color: #C76A40;
            font-weight: 800;">set</span> menu_children = (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.menu mm
              <span style="color: #C76A40;
            font-weight: 800;">where</span> mm.menu_raiz <span style="color: #C76A40;
            font-weight: 800;">like</span> cur.menu_raiz||<span style="color: #4d99bf">&#x27;.%&#x27;</span>
            ),
              menu_directchildern = (
                <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.menu mm
                <span style="color: #C76A40;
            font-weight: 800;">where</span> mm.menu_menu_id = cur.menu_id
              ),
              menu_maxnode = (
                <span style="color: #C76A40;
            font-weight: 800;">select</span> length( replace( substr( mm.menu_raiz, length( cur.menu_raiz )+<span style="color: #C76A40">1</span>, length( mm.menu_raiz ) ), <span style="color: #4d99bf">&#x27;.&#x27;</span>, <span style="color: #4d99bf">&#x27;&#x27;</span>) ) /<span style="color: #C76A40">2</span>
                <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.menu mm
                <span style="color: #C76A40;
            font-weight: 800;">where</span> mm.menu_raiz <span style="color: #C76A40;
            font-weight: 800;">like</span> cur.menu_raiz||<span style="color: #4d99bf">&#x27;%&#x27;</span>
                <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> mm.menu_nivel <span style="color: #C76A40;
            font-weight: 800;">desc</span>
                <span style="color: #C76A40;
            font-weight: 800;">limit</span> <span style="color: #C76A40">1</span>
              ),
              menu_position = icount
            <span style="color: #C76A40;
            font-weight: 800;">where</span> cur.menu_id = _menu.menu_id;

            icount := icount  + <span style="color: #C76A40">1</span> ;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_colaborador_simple {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_load_colaborador_simple(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(colaborador_id <span style="color: #C76A40">uuid</span>, colaborador_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_apelido <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_nomecompleto <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para carregar os colaboradores
           \*\/</span>
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                co.colaborador_id,
                co.colaborador_nome,
                co.colaborador_apelido,
                format( <span style="color: #4d99bf">&#x27;%s %s&#x27;</span>,co. colaborador_nome, co.colaborador_apelido )::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
              <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.colaborador co
              <span style="color: #C76A40;
            font-weight: 800;">where</span> co.colaborador_estado != _const.colaborador_estado_fechado
                <span style="color: #C76A40;
            font-weight: 800;">and</span> co.colaborador_tipo != _const.colaborador_tipo_system
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_colaborador_any_menu {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_load_colaborador_any_menu(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(colaborador_id <span style="color: #C76A40">uuid</span>, colaborador_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_apelido <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_foto <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para devolver os colaboradores que tenha pelo menos um menu especificado
            filter := {
              arg_colaborador_id: ID,
              arg_menus: [
                menu_codigo,
                menu_codigo,
                menu_codigo
              ]
            }
          *\*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          args_menus <span style="color: #C76A40">varchar</span>[ ] := <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> <span style="color: #C76A40;
            font-weight: 800;">distinct</span> doc.menu_codigo <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements_text( <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_menus&#x27;</span> ) doc( menu_codigo ) );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                co.colaborador_id,
                co.colaborador_nome,
                co.colaborador_apelido,
                co.colaborador_foto
              <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.colaborador co
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.acesso acc <span style="color: #C76A40;
            font-weight: 800;">on</span> co.colaborador_id = acc.acesso_colaborador_propetario
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.menu men <span style="color: #C76A40;
            font-weight: 800;">on</span> acc.acesso_menu_id = men.menu_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> acc.acesso_estado = _const.acesso_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> co.colaborador_estado = _const.colaborador_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> men.menu_codigo = <span style="color: #C76A40;
            font-weight: 800;">any</span>( args_menus )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> co.colaborador_id = coalesce( arg_colaborador_id, co.colaborador_id )
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> co.colaborador_id
              <span style="color: #C76A40;
            font-weight: 800;">having</span> count( men.menu_id ) &gt; <span style="color: #C76A40">0</span>
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
               co.colaborador_dataultimologin  <span style="color: #C76A40;
            font-weight: 800;">desc</span> <span style="color: #C76A40;
            font-weight: 800;">nulls last</span>,
               co.colaborador_nome,
               co.colaborador_apelido
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_menu_cascade {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_load_menu_cascade(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(menu_id <span style="color: #C76A40">smallint</span>, menu_menu_id <span style="color: #C76A40">smallint</span>, menu_codigo <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_raiz <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_nivel <span style="color: #C76A40">smallint</span>, menu_icon <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_link <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, menu_estado <span style="color: #C76A40">smallint</span>, menu_children <span style="color: #C76A40">smallint</span>, menu_maxnode <span style="color: #C76A40">smallint</span>, menu_directchildern <span style="color: #C76A40">smallint</span>, menu_position <span style="color: #C76A40">smallint</span>, menu_falta <span style="color: #C76A40">boolean</span>, menu_mais <span style="color: #C76A40">boolean</span>, menu_sincronizado <span style="color: #C76A40">boolean</span>, acesso_id <span style="color: #C76A40">uuid</span>, perfil_id <span style="color: #C76A40">uuid</span>, menu_childrenlist <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função carrega os menus e faz um mach entre e perfil e o colaborador
            args := {
              arg_colaborador_id: ID,
              arg_perfil_id: ID,
              arg_allmenu: TRUE | FALSE
            }
            -- argumentos
              -- arg_colaborador_id identificador do colaborador o qual pretende-se obter os menus (opcional)
              -- arg_perfil_id identificador do perfil o qual pretende-se obter os menus (opcional)
              -- arg_allmenu boolean | quando true significa carregar todos os menus independete mente se o colaborador
                ou menu estiver associado ao mesmo
           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> := <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_perfil_id <span style="color: #C76A40">uuid</span> := <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_perfil_id&#x27;</span>;
          arg_allmenu <span style="color: #C76A40">boolean</span> := <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_allmenu&#x27;</span>;

          _const <span style="color: #C76A40;
            font-weight: 800;">constant</span> map.<span style="color: #C76A40;
            font-weight: 800;">constant</span> := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          arg_allmenu := coalesce( arg_allmenu, <span style="color: #C76A40;
            font-weight: 800;">false</span> );

          <span style="color: #888">-- Quando o filtro não for expecificado carregar todos os menus</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> arg_allmenu := <span style="color: #C76A40;
            font-weight: 800;">true</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> menu_colaborador <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                me.menu_id                ,
                me.menu_menu_id           ,
                me.menu_codigo            ,
                me.menu_raiz              ,
                me.menu_nivel             ,
                me.menu_icon              ,
                me.menu_nome              ,
                me.menu_link              ,
                me.menu_estado            ,
                me.menu_children          ,
                me.menu_maxnode           ,
                me.menu_directchildern    ,
                me.menu_position          ,

                ac.acesso_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> perf.perfil_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> menu_falta,
                ac.acesso_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> perf.perfil_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> menu_mais,
                ac.acesso_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> perf.perfil_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> menu_sincronizado,
                ac.acesso_id              ,
                perf.perfil_id

              <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.menu me
                     <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.menu super <span style="color: #C76A40;
            font-weight: 800;">on</span> me.menu_menu_id = super.menu_id
                     <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.acesso ac <span style="color: #C76A40;
            font-weight: 800;">on</span> me.menu_id = ac.acesso_menu_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ac.acesso_estado = _const.acesso_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ac.acesso_colaborador_propetario = arg_colaborador_id
                     <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.colaborador col <span style="color: #C76A40;
            font-weight: 800;">on</span> ac.acesso_colaborador_propetario = col.colaborador_id
                     <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.privilegio pri <span style="color: #C76A40;
            font-weight: 800;">on</span> me.menu_id = pri.privilegio_menu_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> pri.privilegio_estado = _const.privilegio_estado_ativo
                     <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.perfil perf <span style="color: #C76A40;
            font-weight: 800;">on</span> pri.previlegio_perfil_id = perf.perfil_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> perf.perfil_estado = _const.perfil_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> perf.perfil_id = arg_perfil_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> me.menu_estado = _const.menu_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> (
                  ac.acesso_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                  <span style="color: #C76A40;
            font-weight: 800;">or</span> perf.perfil_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                  <span style="color: #C76A40;
            font-weight: 800;">or</span> col.colaborador_tipo = _const.colaborador_tipo_user_master <span style="color: #888">-- para os colaboradores master carregar dodos os menus disponiveis</span>
                  <span style="color: #C76A40;
            font-weight: 800;">or</span> arg_allmenu
                )
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> me.menu_position <span style="color: #C76A40;
            font-weight: 800;">asc</span>
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> mc.*,
                jsonb_agg( to_jsonb( child ) ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> child.menu_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> ) menu_childrenlist
              <span style="color: #C76A40;
            font-weight: 800;">from</span> menu_colaborador mc
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> menu_colaborador child <span style="color: #C76A40;
            font-weight: 800;">on</span> mc.menu_id = child.menu_menu_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> mc.menu_menu_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                mc.menu_id,
                mc.menu_menu_id,
                mc.menu_codigo,
                mc.menu_raiz,
                mc.menu_nivel,
                mc.menu_icon,
                mc.menu_nome,
                mc.menu_link ,
                mc.menu_estado,
                mc.menu_children,
                mc.menu_maxnode,
                mc.menu_directchildern,
                mc.menu_position,
                mc.menu_falta,
                mc.menu_mais ,
                mc.menu_sincronizado,
                mc.acesso_id,
                mc.perfil_id
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> mc.menu_position <span style="color: #C76A40;
            font-weight: 800;">asc</span>
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _colaborador_token_encrypt {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth._colaborador_token_encrypt(_colaborador auth.colaborador)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\**
              Essa função serve para criar o token de ativação para um colaborador
             \*\/</span>
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> auth._encrypt( coalesce( _colaborador.colaborador_token, <span style="color: #4d99bf">&#x27;&#x27;</span> ) )
              || auth._encrypt( coalesce( _colaborador.colaborador_email, <span style="color: #4d99bf">&#x27;&#x27;</span> ) )
              || auth._encrypt( _colaborador.colaborador_id::<span style="color: #C76A40">text</span> )
              || auth._encrypt( _colaborador.colaborador_senha::<span style="color: #C76A40">text</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;

        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_colaborador_token_restore {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_load_colaborador_token_restore(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para recuperar o token do acesso do colaborador ao sistema.
            -- argumentos
              -- arg_colaborador_restore identificador do colaborador a qual pretente restaurar o token de ativação
           \*\/</span>

          arg_colaborador_restore <span style="color: #C76A40">uuid</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _colaborador auth.colaborador;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
            _colaborador := auth._get_colaborador( arg_colaborador_restore );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _colaborador.colaborador_token <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
            <span style="color: #C76A40;
            font-weight: 800;">or</span> _colaborador.colaborador_tokenlimit <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
            <span style="color: #C76A40;
            font-weight: 800;">or</span> _colaborador.colaborador_tokenlimit &lt; <span style="color: #397300">current_timestamp</span>
          <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;auth.colaborador.token-not-restore&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;colaborador_token&#x27;</span>, auth._colaborador_token_encrypt( _colaborador )
            )
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_autenticacao {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_autenticacao(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(autenticacao_id <span style="color: #C76A40">uuid</span>, autenticacao_chave <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, autenticacao_dataregistro <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_id <span style="color: #C76A40">uuid</span>, colaborador_email <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_apelido <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_foto <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_accesso <span style="color: #C76A40">smallint</span>, colaborador_estado <span style="color: #C76A40">smallint</span>, colaborador_dataultimaatualizacasenha <span style="color: #C76A40">timestamp</span> <span style="color: #C76A40">with time zone</span>, colaborador_accessodesc <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_estadodesc <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, tsexo_id <span style="color: #C76A40">smallint</span>, tsexo_codigo <span style="color: #C76A40">character</span>, tsexo_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, acesso <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
        <span style="color: #888">\/\**
          Essa funcao serve para autenticar um colaborador
          no final da autenticacao sera devolvido as informacoes basica do colaborador
          args :{
            arg_auth_name: id | nif | email
            arg_auth_value: VALUE_OF_AUTH_NAME,
            arg_auth_method: senha | pin,
            arg_auth_key: VALUE_OF_AUTH_METHOD
            menus:[]
          }
        \*\/</span>

            arg_auth_name <span style="color: #C76A40">varchar</span> := lib.str_normalize( lower( args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_auth_name&#x27;</span> ) );
            arg_auth_value <span style="color: #C76A40">varchar</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_auth_value&#x27;</span>;
            arg_auth_method <span style="color: #C76A40">varchar</span> := lib.str_normalize( lower( args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_auth_method&#x27;</span> ) );
            arg_auth_key <span style="color: #C76A40">varchar</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_auth_key&#x27;</span>;


            _data <span style="color: #C76A40">record</span>;
            _autenticacao auth.autenticacao;
            _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span> := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
            arg_autenticacao_chave <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;
            arg_acessos <span style="color: #C76A40">jsonb</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_auth_name <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_auth_value <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_auth_method <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_auth_key <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_auth_name <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> ( <span style="color: #4d99bf">&#x27;id&#x27;</span>, <span style="color: #4d99bf">&#x27;nif&#x27;</span>, <span style="color: #4d99bf">&#x27;email&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_auth_method <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> ( <span style="color: #4d99bf">&#x27;pin&#x27;</span>, <span style="color: #4d99bf">&#x27;senha&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;


            arg_auth_name := lower( lib.str_normalize( arg_auth_name ) );

            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
            <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.colaborador co
                     <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.tsexo sex <span style="color: #C76A40;
            font-weight: 800;">on</span> co.colaborador_tsexo_id = sex.tsexo_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span> to_jsonb( co )-&gt;&gt;format( <span style="color: #4d99bf">&#x27;colaborador_%s&#x27;</span>, arg_auth_name )  = arg_auth_value
              <span style="color: #C76A40;
            font-weight: 800;">and</span> to_jsonb( co )-&gt;&gt;format( <span style="color: #4d99bf">&#x27;colaborador_%s&#x27;</span>, arg_auth_method )  = auth._encrypt( arg_auth_key )
              <span style="color: #C76A40;
            font-weight: 800;">and</span> co.colaborador_estado = _const.colaborador_estado_ativo
              <span style="color: #C76A40;
            font-weight: 800;">and</span> co.colaborador_accesso <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.colaborador_accesso_ativo, _const.colaborador_accesso_pendente )
              <span style="color: #C76A40;
            font-weight: 800;">and</span> co.colaborador_tipo <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.colaborador_tipo_user, _const.colaborador_tipo_user_master )
            ;



        <span style="color: #888">-- Quando as credenciais nao se conicedem</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _data.colaborador_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">return</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #888">-- Criar a chave única de autenticação</span>
            arg_autenticacao_chave := auth._autenticacao_chave_generate();

            <span style="color: #888">-- Criar a instancia de autenticação</span>
            <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> auth.autenticacao(
                autenticacao_colaborador_id,
                autenticacao_chave
            ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
                         _data.colaborador_id,
                         arg_autenticacao_chave
                     ) <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _autenticacao;

        <span style="color: #888">-- Carregar todos os menus do colaborador</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> jsonb_agg( e._grants ) <span style="color: #C76A40;
            font-weight: 800;">into</span> arg_acessos
            <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.funct_load_grants( jsonb_build_object(
              <span style="color: #4d99bf">&#x27;menus&#x27;</span>, args-&gt;<span style="color: #4d99bf">&#x27;menus&#x27;</span>,
              <span style="color: #4d99bf">&#x27;colaborador_id&#x27;</span>, _data.colaborador_id
            )) e ( _grants );

        <span style="color: #888">-- Devolver as informações do colaborador autenticado</span>
            funct_autenticacao.autenticacao_id                        := _autenticacao.autenticacao_id;
            funct_autenticacao.autenticacao_chave                     := _autenticacao.autenticacao_chave;
            funct_autenticacao.autenticacao_dataregistro              := _autenticacao.autenticacao_dataregisto;

            funct_autenticacao.colaborador_id                         := _data.colaborador_id;
            funct_autenticacao.colaborador_email                      := _data.colaborador_email;
            funct_autenticacao.colaborador_nome                       := _data.colaborador_nome;
            funct_autenticacao.colaborador_apelido                    := _data.colaborador_apelido;
            funct_autenticacao.colaborador_foto                       := _data.colaborador_foto;
            funct_autenticacao.colaborador_estado                     := _data.colaborador_estado;
            funct_autenticacao.colaborador_accesso                    := _data.colaborador_accesso;
            funct_autenticacao.colaborador_dataultimaatualizacasenha  := _data.colaborador_dataultimaatualizacasenha;
            funct_autenticacao.colaborador_estadodesc                 := auth._colaborador_estado_desc( _data.colaborador_estado );
            funct_autenticacao.colaborador_accessodesc                := auth._colaborador_accesso_desc( _data.colaborador_accesso );

            funct_autenticacao.tsexo_id                               := _data.tsexo_id;
            funct_autenticacao.tsexo_nome                             := _data.tsexo_nome;
            funct_autenticacao.tsexo_codigo                           := _data.tsexo_codigo;
            funct_autenticacao.acesso                                 := arg_acessos;
            <span style="color: #C76A40;
            font-weight: 800;">return next</span> ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _colaborador_generate_senha_token {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth._colaborador_generate_senha_token()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
              <span style="color: #888">\/\**
                Essa função serve para criar um token novo
               \*\/</span>
              token <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;
            <span style="color: #C76A40;
            font-weight: 800;">begin</span>
              <span style="color: #C76A40;
            font-weight: 800;">loop</span>
                token := lib.dset_random_text( <span style="color: #C76A40">16</span> );
                <span style="color: #C76A40;
            font-weight: 800;">if</span> (
                  <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * )
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.colaborador co
                    <span style="color: #C76A40;
            font-weight: 800;">where</span> co.colaborador_token = token
                ) = <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                  <span style="color: #C76A40;
            font-weight: 800;">return</span> token;
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_perfil {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_reg_perfil(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para registar um novo tipo de perfil dos colaboradores
            -- paramentros
              -- arg_colaborador_id corresponde ao colaborador responsavél pelo regustro do perfil «
              -- arg_perfil_perfil_id corresponde ao identificador do perfil parente
              -- arg_perfil_nome corresponde ao nome do perfil a ser criado
              -- arg_menus corresponde aos identificadores dos menus que esse perfil deve ter por padrão
                [ ID, ID, ID ... ]
           \*\/</span>

          arg_colaborador_id <span style="color: #C76A40">uuid</span>                := args -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_perfil_perfil_id <span style="color: #C76A40">uuid</span>             := args -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_perfil_perfil_id&#x27;</span>;
          arg_perfil_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>     := args -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_perfil_nome&#x27;</span>;
          arg_menus <span style="color: #C76A40">jsonb</span>                       := args -&gt;<span style="color: #4d99bf">&#x27;arg_menus&#x27;</span>;

          _perfil auth.perfil;
          _res lib.result;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #888">-- Não pode existir mais de um perfil com o mesmo nome</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span>(
            <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * ) &gt; <span style="color: #C76A40">0</span>
              <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.perfil pef
              <span style="color: #C76A40;
            font-weight: 800;">where</span> pef.perfil_nome = arg_perfil_nome
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;auth.perfil.nome.already-exist&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> auth.perfil (
            perfil_perfil_id,
            perfil_colaborador_id,
            perfil_nome
          ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
            arg_perfil_perfil_id,
            arg_colaborador_id,
            arg_perfil_nome
          ) <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _perfil;

          _res := auth.funct_reg_privilegio(
            args || jsonb_build_object(
              <span style="color: #4d99bf">&#x27;arg_perfil_id&#x27;</span>, _perfil.perfil_id
            )
          );

          _res.message := _res.message || jsonb_build_object(
            <span style="color: #4d99bf">&#x27;perfil&#x27;</span>, _perfil
          );

          <span style="color: #C76A40;
            font-weight: 800;">return</span> _res;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_colaborador_token_acesso {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_change_colaborador_token_acesso(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa funcao serve para recria o token de ativacao de conta de um colaborador
            -- Quando um utilizador perder a senha dever ser usada essa função para a recupereção da sua senha.

            -- argumentos
              -- arg_colaborador_email corresponde ao email do colaborador que pretende recuperar a senha
          \*\/</span>

          arg_colaborador_email <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_email&#x27;</span>;

          arg_colaborador_token <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;

          _const <span style="color: #C76A40;
            font-weight: 800;">constant</span> map.<span style="color: #C76A40;
            font-weight: 800;">constant</span> := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _colaborador auth.colaborador;
          _tsexo auth.tsexo;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            arg_colaborador_email := lower( lib.str_normalize( arg_colaborador_email  ) );
            <span style="color: #C76A40;
            font-weight: 800;">select</span>  * <span style="color: #C76A40;
            font-weight: 800;">into</span> _colaborador
              <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.colaborador co
              <span style="color: #C76A40;
            font-weight: 800;">where</span> co.colaborador_email = arg_colaborador_email
            ;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _colaborador.colaborador_estado != _const.colaborador_estado_ativo
              <span style="color: #C76A40;
            font-weight: 800;">or</span>  _colaborador.colaborador_accesso <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.colaborador_accesso_ativo, _const.colaborador_accesso_pendente )
            <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;@auth.colaborador.acesso-can-not-active&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _colaborador.colaborador_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;@auth.colaborador.mail-not-found&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            arg_colaborador_token := auth._colaborador_generate_senha_token()
                                         ||auth._colaborador_generate_pin_token();

            <span style="color: #C76A40;
            font-weight: 800;">update</span> auth.colaborador
              <span style="color: #C76A40;
            font-weight: 800;">set</span> colaborador_token = arg_colaborador_token,
                  colaborador_tokenlimit = <span style="color: #397300">current_timestamp</span> + _const.colaborador_token_limit,
                  colaborador_dataatualizacao = <span style="color: #397300">current_timestamp</span>
              <span style="color: #C76A40;
            font-weight: 800;">where</span> colaborador_id = _colaborador.colaborador_id
              <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _colaborador;

            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _tsexo
                <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.tsexo sx
                <span style="color: #C76A40;
            font-weight: 800;">where</span> sx.tsexo_id = _colaborador.colaborador_tsexo_id;

            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true(
              jsonb_build_object(
                <span style="color: #4d99bf">&#x27;colaborador&#x27;</span>, jsonb_build_object(
                  <span style="color: #4d99bf">&#x27;colaborador_nome&#x27;</span>, _colaborador.colaborador_nome,
                  <span style="color: #4d99bf">&#x27;colaborador_apelido&#x27;</span>, _colaborador.colaborador_apelido,
                  <span style="color: #4d99bf">&#x27;tsexo_id&#x27;</span>, _tsexo.tsexo_id,
                  <span style="color: #4d99bf">&#x27;tsexo_nome&#x27;</span>, _tsexo.tsexo_nome,
                  <span style="color: #4d99bf">&#x27;colaborador_email&#x27;</span>, _colaborador.colaborador_email
                ),
                <span style="color: #4d99bf">&#x27;colaborador_token&#x27;</span>, auth._colaborador_token_encrypt( _colaborador )
              )
            );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_colaborador_pin {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_change_colaborador_pin(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa funcao serve para alterar a senha de um colaborador autenticado

            -- argumentos
              args := {
                arg_colaborador_id: ID,
                arg_colaborador_senha: OLD-PIN,
                arg_colaborador_pin: PIN
              }
              arg_colaborador_id corresponde ao identificador do colaborador que esta a alterar a sua propia senha
              arg_colaborador_senha corresponde a antiga senha do colaborador
              arg_colaborador_pin corresponde a nova senha do colaboarador
          \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span>                      := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_colaborador_senha <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>  := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_senha&#x27;</span>;
          arg_colaborador_pin <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>  := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_pin&#x27;</span>;
          _colaborador auth.colaborador := auth._get_colaborador( arg_colaborador_id );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #888">-- A antiga senha do colaborador tem que bater igual senha atual cadastrada na base de dados</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> auth._encrypt( arg_colaborador_senha ) <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _colaborador.colaborador_pin ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;PIN atual inválida!&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- A nova senha tem que ser uma senha diferente da senha antiga</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _colaborador.colaborador_pin = auth._encrypt( arg_colaborador_pin ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;Novo PIN tem que ser diferente do PIN atual!&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">update</span> auth.colaborador
            <span style="color: #C76A40;
            font-weight: 800;">set</span> colaborador_pin = auth._encrypt( arg_colaborador_pin ),
                colaborador_dataultimaatualizacasenha = now(),
                colaborador_dataatualizacao = now(),
                colaborador_colaborador_atualizacao = arg_colaborador_id,
                colaborador_pinmodo = _const.colaborador_chavemodo_utilizador,
                colaborador_accesso = _const.colaborador_accesso_ativo
            <span style="color: #C76A40;
            font-weight: 800;">where</span> colaborador_id = arg_colaborador_id
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true( <span style="color: #4d99bf">&#x27;success&#x27;</span> );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_colaborador_accesso_reativar {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_change_colaborador_accesso_reativar(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\**
              Essa função serve para reativar um colaborador
                * Na reativação do colaborador sera gerado um token de ativação

              args := {
                arg_colaborador_id: ID,
                arg_colaborador_reative: ID,
                arg_colaborador_senha: SENHA,
                arg_colaborador_pin: PIN,
                arg_start:BOOLEAN
              }
              -- argumentos
                -- arg_colaborador_id corresponde ao colaborador logado no sistema que esta efetuar a operação de ativação
                -- arg_colaborador_reative corresponde ao colaborador que tera o acesso reativo no sistema.
             \*\/</span>

            arg_colaborador_id <span style="color: #C76A40">uuid</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
            arg_colaborador_reative <span style="color: #C76A40">uuid</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_reative&#x27;</span>;
            arg_colaborador_senha <span style="color: #C76A40">varchar</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_senha&#x27;</span>;
            arg_colaborador_pin <span style="color: #C76A40">varchar</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_pin&#x27;</span>;
            arg_start <span style="color: #C76A40">boolean</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_start&#x27;</span>;

            arg_token_senha <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>;
            arg_token_pin <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>;
            _colaborador auth.colaborador := auth._get_colaborador( arg_colaborador_reative );
            _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
            arg_start := coalesce( arg_start, <span style="color: #C76A40;
            font-weight: 800;">false</span> );

            <span style="color: #888">-- Um colaborador já ativo não pode ser novamente reativado</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _colaborador.colaborador_estado != _const.colaborador_estado_ativo <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;@auth.colaborador.active-active&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_start <span style="color: #C76A40;
            font-weight: 800;">and</span> arg_colaborador_senha <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              _colaborador.colaborador_senhamodo := _const.colaborador_chavemodo_utilizador;

            <span style="color: #C76A40;
            font-weight: 800;">elsif</span> arg_start <span style="color: #C76A40;
            font-weight: 800;">and</span> arg_colaborador_pin <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              _colaborador.colaborador_pinmodo := _const.colaborador_chavemodo_utilizador;

            elseif <span style="color: #C76A40;
            font-weight: 800;">not</span> arg_start <span style="color: #C76A40;
            font-weight: 800;">then</span>
              _colaborador.colaborador_senhamodo := _const.colaborador_chavemodo_padrao;
              <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_colaborador_senha <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                  arg_token_senha := <span style="color: #C76A40;
            font-weight: 800;">true</span>;
                  _colaborador.colaborador_senhamodo := _const.colaborador_chavemodo_gerado;
                  arg_colaborador_senha := auth._colaborador_generate_senha_token();
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

              _colaborador.colaborador_pinmodo := _const.colaborador_chavemodo_padrao;
              <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_colaborador_pin <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                _colaborador.colaborador_pinmodo := _const.colaborador_chavemodo_gerado;
                arg_token_pin := <span style="color: #C76A40;
            font-weight: 800;">true</span>;
                arg_colaborador_pin := auth._colaborador_generate_pin_token();
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_start <span style="color: #C76A40;
            font-weight: 800;">then</span>
              _colaborador.colaborador_token := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
              _colaborador.colaborador_tokenlimit := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
              _colaborador.colaborador_accesso := _const.colaborador_accesso_ativo;
            <span style="color: #C76A40;
            font-weight: 800;">else</span>
              _colaborador.colaborador_accesso := _const.colaborador_accesso_pendente;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">update</span> auth.colaborador
              <span style="color: #C76A40;
            font-weight: 800;">set</span> colaborador_accesso = _colaborador.colaborador_accesso,
                colaborador_estado = _const.colaborador_estado_ativo,

                colaborador_senhamodo = _colaborador.colaborador_senhamodo,
                colaborador_senha = <span style="color: #C76A40;
            font-weight: 800;">case</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_colaborador_senha <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> auth._encrypt( arg_colaborador_senha )
                    <span style="color: #C76A40;
            font-weight: 800;">else</span> colaborador_senha
                  <span style="color: #C76A40;
            font-weight: 800;">end</span>,

                colaborador_pinmodo = _colaborador.colaborador_pinmodo,
                colaborador_pin = <span style="color: #C76A40;
            font-weight: 800;">case</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_colaborador_pin <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> auth._encrypt( arg_colaborador_pin )
                    <span style="color: #C76A40;
            font-weight: 800;">else</span> colaborador_pin
                  <span style="color: #C76A40;
            font-weight: 800;">end</span>,

                colaborador_dataultimaatualizacasenha = now(),
                colaborador_token = _colaborador.colaborador_token,
                colaborador_tokenlimit = _colaborador.colaborador_tokenlimit,

                colaborador_colaborador_atualizacao = arg_colaborador_id,
                colaborador_dataatualizacao = now()
              <span style="color: #C76A40;
            font-weight: 800;">where</span> colaborador_id = arg_colaborador_reative
              <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _colaborador
            ;

            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true(
              jsonb_build_object(
                <span style="color: #4d99bf">&#x27;colaborador_token&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_token_senha <span style="color: #C76A40;
            font-weight: 800;">then</span> auth._colaborador_token_encrypt( _colaborador )
                <span style="color: #C76A40;
            font-weight: 800;">end</span>,

                <span style="color: #4d99bf">&#x27;colaborador_pin&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_token_pin <span style="color: #C76A40;
            font-weight: 800;">then</span> arg_colaborador_pin
                <span style="color: #C76A40;
            font-weight: 800;">end</span>
              )
            );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_colaborador_estado_disable {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_change_colaborador_estado_disable(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\**
            Essa função serve para disativar o estaod de um dado colaborador no sistema
            args := {
              arg_colaborador_id: ID,
              arg_colaborador_disable: ID
            }
            -- argumentos
              arg_colaborador_id corresponde ao colaborador logado no sistema que esta a efetuar a operação de desativação
              arg_colaborador_disable corresponde ao colaborador que tera o acesso desabilitado do sistema
           \*\/</span>

            arg_colaborador_id <span style="color: #C76A40">uuid</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
            arg_colaborador_disable <span style="color: #C76A40">uuid</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_disable&#x27;</span>;
            _colaborador auth.colaborador := auth._get_colaborador( arg_colaborador_disable );
            _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

           <span style="color: #888">-- Um colaborador master não pode ser desabilitado do sistema</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _colaborador.colaborador_tipo = _const.colaborador_tipo_user_master <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;auth.colaborador.disable-master&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">update</span> auth.colaborador
            <span style="color: #C76A40;
            font-weight: 800;">set</span> colaborador_accesso = _const.colaborador_accesso_fechado,
                colaborador_estado = _const.colaborador_estado_fechado,
                colaborador_colaborador_atualizacao = arg_colaborador_id,
                colaborador_dataatualizacao = <span style="color: #397300">current_timestamp</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> colaborador_id = arg_colaborador_disable
            <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _colaborador;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;colaborador&#x27;</span>, _colaborador
            )
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _colaborador_generate_pin_token {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth._colaborador_generate_pin_token()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #888">-- gerar um pin automatico</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> to_char( ( random() * <span style="color: #C76A40">9999</span> ), <span style="color: #4d99bf">&#x27;0000&#x27;</span> )
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _encrypt {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth._encrypt(word <span style="color: #C76A40">text</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          wordMd5 <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> md5( word );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">return</span> md5(
              md5(
                  wordMd5
                  ||substring( wordMd5, <span style="color: #C76A40">1</span>, <span style="color: #C76A40">20</span> )
                  ||md5(
                      md5( $$<span class="language-perl">%#*<span style="color: #bc6060">//</span>-+@$£€{}[]()?!&amp;|\\:;,.^~ºª«»&lt;&gt;çáèíÒú$$</span> )
                      || word
                      || substring( wordMd5, <span style="color: #C76A40">15</span>, <span style="color: #C76A40">28</span> )
                      || substring( wordMd5, <span style="color: #C76A40">13</span>, <span style="color: #C76A40">11</span> )
                      || substring( wordMd5, <span style="color: #C76A40">17</span>, <span style="color: #C76A40">20</span> )
                      || substring( wordMd5, <span style="color: #C76A40">7</span>,  <span style="color: #C76A40">21</span> )
                  )
              )
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_colaborador {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_reg_colaborador(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para cadastra novos colaboradores
            Ao cadastar o colaborador a senha é atribuida automaticamente em um random
            E gerado tambem um token que devera ser enviado pela aplicao ao email do colaborador cadastrado
            O email e o NIF tem que ser unico
            args := {
              arg_colaborador_id: ID,
              arg_colaborador_email: EMAIL,
              arg_colaborador_nome: NOME,
              arg_colaborador_apelido: APELIDO,
              arg_colaborador_nif: NIF,
              arg_colaborador_datanascimento: DATA,
              arg_colaborador_ficha: FICHA,
              arg_colaborador_foto: FICHA,
              arg_tsexo_id: ID,

              arg_colaborador_senha: DEFAULT_SENHA_IF_EXIST,
              arg_colaborador_pin: DEFAULT_PIN_IF_SET,
            }

           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span>                := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_colaborador_email <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>   := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_email&#x27;</span>;
          arg_colaborador_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>    := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_nome&#x27;</span>;
          arg_colaborador_apelido <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_apelido&#x27;</span>;
          arg_colaborador_nif <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>     := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_nif&#x27;</span>;
          arg_colaborador_datanascimento <span style="color: #C76A40">date</span>       := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_datanascimento&#x27;</span>;
          arg_colaborador_ficha <span style="color: #C76A40">jsonb</span>               := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_ficha&#x27;</span>;
          arg_colaborador_foto <span style="color: #C76A40">varchar</span>               := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_foto&#x27;</span>;
          arg_tsexo_id <span style="color: #C76A40">int2</span>                         := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_tsexo_id&#x27;</span>;
          arg_colaborador_token <span style="color: #C76A40">text</span>;
          arg_menu_list <span style="color: #C76A40">jsonb</span>                       := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_menu_list&#x27;</span>;
          arg_colaborador_pin <span style="color: #C76A40">varchar</span>               := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_pin&#x27;</span>;
          arg_colaborador_senha <span style="color: #C76A40">varchar</span>             := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_senha&#x27;</span>;


          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span> := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _colaborador auth.colaborador;
          _res lib.result;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #888">-- normalizar os dados do colaborador</span>
          arg_colaborador_email := lower( lib.str_normalize( arg_colaborador_email ) );
          arg_colaborador_nif := lower( lib.str_normalize( arg_colaborador_nif ) );
          arg_colaborador_nome := lib.str_normalize( arg_colaborador_nome );
          arg_colaborador_apelido := lib.str_normalize( arg_colaborador_apelido );

          <span style="color: #888">-- As informacoes do tipo texto tem que estar normalizados</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_colaborador_email <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;@auth.colaborador.invalid-mail&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_colaborador_nome <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;@auth.colaborador.invalid-name&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- Garantir que nao exista o  NIF</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.colaborador co
              <span style="color: #C76A40;
            font-weight: 800;">where</span> co.colaborador_email =  arg_colaborador_email
          ) &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;@auth.colaborador.email-exist&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- Garantir que o nif seja unico</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.colaborador co
              <span style="color: #C76A40;
            font-weight: 800;">where</span> co.colaborador_nif = arg_colaborador_nif
          ) &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;@auth.colaborador.nif-exist&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> auth.colaborador(
            colaborador_colaborador_id,
            colaborador_email,
            colaborador_nome,
            colaborador_apelido,
            colaborador_nif,
            colaborador_datanascimento,
            colaborador_foto,
            colaborador_tsexo_id
          ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
            arg_colaborador_id,
            arg_colaborador_email,
            arg_colaborador_nome,
            arg_colaborador_apelido,
            arg_colaborador_nif,
            arg_colaborador_datanascimento,
            arg_colaborador_foto,
            arg_tsexo_id
          ) <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _colaborador;

          <span style="color: #C76A40;
            font-weight: 800;">perform</span> auth.funct_reg_acesso(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
              <span style="color: #4d99bf">&#x27;arg_colaborador_propetario&#x27;</span>, _colaborador.colaborador_id,
              <span style="color: #4d99bf">&#x27;arg_menu_list&#x27;</span>, arg_menu_list
            )
          );

          _res := auth.funct_change_colaborador_accesso_reativar(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
              <span style="color: #4d99bf">&#x27;arg_colaborador_reative&#x27;</span>, _colaborador.colaborador_id,
              <span style="color: #4d99bf">&#x27;arg_colaborador_senha&#x27;</span>, arg_colaborador_senha,
              <span style="color: #4d99bf">&#x27;arg_colaborador_pin&#x27;</span>, arg_colaborador_pin
            )
          );


          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;colaborador&#x27;</span>,
                lib.jsonb_values(
                  to_jsonb( _colaborador ),
                  <span style="color: #4d99bf">&#x27;colaborador_id&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;colaborador_tsexo_id&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;colaborador_email&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;colaborador_nif&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;colaborador_nome&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;colaborador_apelido&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;colaborador_datanascimento&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;colaborador_ficha&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;colaborador_dataultimaatualizacasenha&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;colaborador_accesso&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;colaborador_estado&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;colaborador_dataregisto&#x27;</span>
                )
            ) || _res.message
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_acesso {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_reg_acesso(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa funcao serve para dar acesse de um menu ao um colaborador
            -- Para dar acess o colaborador não pode ter previamente o acesso ao menu
            args := {
              arg_colaborador_id: ID,
              _branch_uid: UID
              arg_colaborador_propetario: ID,
              arg_menu_list: [
                ID, ID, ID
              ]
            }
              -- arg_colaborador_id corresponde ao colaborador que esta a definir os previlegio de acesso
              -- arg_colaborador_propetario corresponde ao colaborador que tera o acesso definido
              -- arg_menu_ids corresponde a lista de identificadores do menus que o colaborador tera acesso
           \*\/</span>

          arg__branch_uid <span style="color: #C76A40">uuid</span>          := args-&gt;&gt;<span style="color: #4d99bf">&#x27;_branch_uid&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span>          := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_colaborador_propetario <span style="color: #C76A40">uuid</span>  := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_propetario&#x27;</span>;
          arg_menu_list <span style="color: #C76A40">int2</span>[]                := <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> jsonb_array_elements_text( args-&gt;<span style="color: #4d99bf">&#x27;arg_menu_list&#x27;</span> )::<span style="color: #C76A40">int2</span> );

          arg_acesso_lista auth.acesso[];

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

            _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #888">-- Revogar os menus que o colaborador tinha acesso anteriormente mas atualmente já nao os têm</span>
          <span style="color: #888">-- São menus que aperecem no acesso ativo mas nao aperencem na nova lista de menus a ser dado ao colaborador</span>
          <span style="color: #C76A40;
            font-weight: 800;">update</span> auth.acesso
            <span style="color: #C76A40;
            font-weight: 800;">set</span> acesso_estado = _const.acesso_estado_fechado,
                acesso_dataatualizacao = <span style="color: #397300">current_timestamp</span>,
                acesso_colaborador_atualizacao = arg_colaborador_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span> acesso_estado = _const.acesso_estado_ativo
              <span style="color: #C76A40;
            font-weight: 800;">and</span> acesso_colaborador_propetario = arg_colaborador_propetario
              <span style="color: #C76A40;
            font-weight: 800;">and</span> acesso_menu_id != <span style="color: #C76A40;
            font-weight: 800;">all</span>( arg_menu_list )
              <span style="color: #C76A40;
            font-weight: 800;">and</span> _branch_uid = arg__branch_uid
          ;

          <span style="color: #888">-- Registrar para o colaborador apenas menus listado na lista que estão em faltas</span>
          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> auth.acesso(
            acesso_menu_id,
            acesso_colaborador_propetario,
            acesso_colaborador_id,
            _branch_uid
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
              me.menu_id,
              arg_colaborador_propetario,
              arg_colaborador_id,
              arg__branch_uid
            <span style="color: #C76A40;
            font-weight: 800;">from</span> unnest( arg_menu_list ) un ( menu_id )
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.menu me <span style="color: #C76A40;
            font-weight: 800;">on</span> un.menu_id = me.menu_id
              <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.acesso ac <span style="color: #C76A40;
            font-weight: 800;">on</span> me.menu_id = ac.acesso_menu_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ac.acesso_estado = _const.acesso_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ac.acesso_colaborador_propetario = arg_colaborador_propetario
            <span style="color: #C76A40;
            font-weight: 800;">where</span> ac.acesso_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
          ;

          <span style="color: #888">-- Obter todos os acessos ativos para esse colaborador</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> array_agg( ac ) <span style="color: #C76A40;
            font-weight: 800;">into</span> arg_acesso_lista
            <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.acesso ac
            <span style="color: #C76A40;
            font-weight: 800;">where</span> ac.acesso_colaborador_propetario = arg_colaborador_propetario
              <span style="color: #C76A40;
            font-weight: 800;">and</span> ac.acesso_estado = _const.acesso_estado_ativo
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;acesso&#x27;</span>, arg_acesso_lista
            )
          );

        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_colaborador_by_token {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> auth.funct_load_colaborador_by_token(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(colaborador_id <span style="color: #C76A40">uuid</span>, colaborador_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_apelido <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_mail <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_nif <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_foto <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_ficha <span style="color: #C76A40">jsonb</span>, tsexo_id <span style="color: #C76A40">smallint</span>, tsexo_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, tsexo_codigo <span style="color: #C76A40">character</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para devolver as informações de um colaborador apartir do seu token de acesso
            O tokem a ser devolvido tem que estar no prazo

            -- argumentos
              -- arg_colaborador_token corresponde ao token encripitado do colaborador
           \*\/</span>

          arg_colaborador_token <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_token&#x27;</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
              co.colaborador_id,
              co.colaborador_nome,
              co.colaborador_apelido,
              co.colaborador_email,
              co.colaborador_foto,
              co.colaborador_nif,
              co.colaborador_ficha,
              sx.tsexo_id,
              sx.tsexo_nome,
              sx.tsexo_codigo
            <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.colaborador co
              <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.tsexo sx <span style="color: #C76A40;
            font-weight: 800;">on</span> co.colaborador_tsexo_id = sx.tsexo_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span> auth._colaborador_token_encrypt( co ) = arg_colaborador_token
              <span style="color: #C76A40;
            font-weight: 800;">and</span> co.colaborador_tokenlimit &gt;= <span style="color: #397300">current_timestamp</span>
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }
    }

    export namespace _Libdom {
      export interface domsync {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.domsync(classname <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, columnname <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, <span style="color: #C76A40;
            font-weight: 800;">domain</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">text</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _comment <span style="color: #C76A40">record</span>;
          _domsync <span style="color: #C76A40">record</span>;
          _command <span style="color: #C76A40">text</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">for</span> _domsync <span style="color: #C76A40;
            font-weight: 800;">in</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __column_comment <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  ds.classname,
                  ds.columnname,
                  array_agg( ds.<span style="color: #C76A40;
            font-weight: 800;">domain</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> _domain,
                  format( <span style="color: #4d99bf">&#x27;&lt;ul&gt;%s&lt;/ul&gt;&#x27;</span>,
                    string_agg( format( <span style="color: #4d99bf">&#x27;&lt;li&gt;%s -&gt;&gt; %s&lt;/li&gt;&#x27;</span>, ds.<span style="color: #C76A40;
            font-weight: 800;">domain</span>, ds.<span style="color: #C76A40;
            font-weight: 800;">comment</span> ), <span style="color: #4d99bf">e&#x27;\n&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> ds.<span style="color: #C76A40;
            font-weight: 800;">comment</span> <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> )
                  ) <span style="color: #C76A40;
            font-weight: 800;">as</span> <span style="color: #C76A40;
            font-weight: 800;">comment</span>
                <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.domsync ds
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> libdom.<span style="color: #C76A40;
            font-weight: 800;">columns</span>( ds.classname::<span style="color: #C76A40">regclass</span> ) c <span style="color: #C76A40;
            font-weight: 800;">on</span> ds.columnname = c.name
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ds.classname = coalesce ( <span style="color: #1f7199">$1</span>, ds.classname )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ds.columnname = coalesce( <span style="color: #1f7199">$2</span>, ds.columnname )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ds.<span style="color: #C76A40;
            font-weight: 800;">domain</span> = coalesce( <span style="color: #1f7199">$3</span>, ds.<span style="color: #C76A40;
            font-weight: 800;">domain</span> )
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ds.classname, ds.columnname
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __column_comment cc
                <span style="color: #C76A40;
            font-weight: 800;">where</span> domsync.<span style="color: #C76A40;
            font-weight: 800;">domain</span> = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( cc._domain ) <span style="color: #C76A40;
            font-weight: 800;">or</span> domsync.<span style="color: #C76A40;
            font-weight: 800;">domain</span> <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
          <span style="color: #C76A40;
            font-weight: 800;">loop</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  format( <span style="color: #4d99bf">&#x27;&lt;table&gt;&lt;tr&gt;&lt;th&gt;lable&lt;/th&gt;&lt;th&gt;value&lt;/th&gt;&lt;th&gt;domain&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;/tr&gt;%s&lt;/table&gt;&#x27;</span>, string_agg( format( <span style="color: #4d99bf">&#x27;&lt;tr&gt;%s %s %s %s &lt;/tr&gt;&#x27;</span>,
                    format( <span style="color: #4d99bf">&#x27;&lt;td&gt;%s&lt;/td&gt;&#x27;</span>, es.label ),
                    format( <span style="color: #4d99bf">&#x27;&lt;td&gt;%s&lt;/td&gt;&#x27;</span>, es.<span style="color: #C76A40;
            font-weight: 800;">value</span> ),
                    format( <span style="color: #4d99bf">&#x27;&lt;td&gt;%s&lt;/td&gt;&#x27;</span>, es.<span style="color: #C76A40;
            font-weight: 800;">domain</span> ),
                    format( <span style="color: #4d99bf">&#x27;&lt;td&gt;%s&lt;/td&gt;&#x27;</span>, es.name )
                  ), <span style="color: #4d99bf">e&#x27;\n&#x27;</span> ) ) <span style="color: #C76A40;
            font-weight: 800;">as</span> <span style="color: #C76A40;
            font-weight: 800;">comment</span>
                  <span style="color: #C76A40;
            font-weight: 800;">into</span> _comment
                <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.entryset es
                <span style="color: #C76A40;
            font-weight: 800;">where</span> es.<span style="color: #C76A40;
            font-weight: 800;">domain</span> = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( _domsync._domain );

              _command := format( <span style="color: #4d99bf">&#x27;comment on column %s.%I is $comment$ %s $comment$;&#x27;</span>, _domsync.classname, _domsync.columnname, format( <span style="color: #4d99bf">e&#x27;&lt;html&gt;&lt;style&gt;
        table, th, td {
          border:1px solid black;
        }
        &lt;/style&gt;&lt;body&gt;&lt;div&gt;%s\n%s&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span>, _domsync.<span style="color: #C76A40;
            font-weight: 800;">comment</span>, _comment.<span style="color: #C76A40;
            font-weight: 800;">comment</span> ) );
              <span style="color: #C76A40;
            font-weight: 800;">execute</span> _command;
              <span style="color: #C76A40;
            font-weight: 800;">return next</span> _command;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface entry_drop {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.entry_drop(arg_name <span style="color: #C76A40">name</span>, arg_dropforce <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">boolean</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            * Essa função serve para registrar o valor de uma constante na base de dados
            * Se a constante já tiver o valor definido esse valor pode ser subistituido
              pelo novo desde que o parametro arg_entryset_replace estiver verdadeiro
            * Caso existir sem o parametro arg_entryset_replace verdadeiro uma excessão sera lançada
           \*\/</span>
          _entryset libdom.entryset;
          command <span style="color: #C76A40">text</span>;
          arg_entryset_continer <span style="color: #C76A40">regtype</span> := <span style="color: #4d99bf">&#x27;libdom.constant&#x27;</span>::<span style="color: #C76A40">regtype</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          arg_dropforce := coalesce( arg_dropforce, <span style="color: #C76A40;
            font-weight: 800;">false</span> );
          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _entryset
            <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.entryset const
            <span style="color: #C76A40;
            font-weight: 800;">where</span> const.name = arg_name
          ;

          <span style="color: #888">-- Destruir a constante casao existir</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_dropforce <span style="color: #C76A40;
            font-weight: 800;">then</span>
            command := format( <span style="color: #4d99bf">&#x27;alter type %s drop attribute if exists %I cascade;&#x27;</span>, arg_entryset_continer, arg_name );
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            command := format( <span style="color: #4d99bf">&#x27;alter type %s drop attribute if exists %I;&#x27;</span>, arg_entryset_continer, arg_name );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">execute</span> command;

          <span style="color: #888">-- Deletar o valor de constante</span>
          <span style="color: #C76A40;
            font-weight: 800;">delete</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.entryset <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40">name</span> = arg_name;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface sync_drop {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.sync_drop(<span style="color: #C76A40">name</span> <span style="color: #C76A40">name</span>, classtype <span style="color: #C76A40">regtype</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">text</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          command <span style="color: #C76A40">text</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          command := format( <span style="color: #4d99bf">&#x27;alter type %s drop attribute if exists %I&#x27;</span>, classtype, <span style="color: #C76A40">name</span> );
          <span style="color: #C76A40;
            font-weight: 800;">execute</span> command;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.<span style="color: #C76A40;
            font-weight: 800;">get</span>(arg_name <span style="color: #C76A40">name</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">text</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">PARALLEL SAFE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

          <span style="color: #888">\/\**
              Essa função serve para devolver o valor especifico de uma constante
           \*\/</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> cv.<span style="color: #C76A40;
            font-weight: 800;">value</span>
            <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.entryset cv
            <span style="color: #C76A40;
            font-weight: 800;">where</span> cv.name = arg_name;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _Domain_Of_16734 {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.domain_of(<span style="color: #C76A40">name</span> <span style="color: #C76A40">name</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">text</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">PARALLEL SAFE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

          <span style="color: #888">\/\**
              Essa função serve para devolver o valor especifico de uma constante
           \*\/</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> cv.label
            <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.entryset cv
            <span style="color: #C76A40;
            font-weight: 800;">where</span> cv.name = domain_of.name;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface entry {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.entry(<span style="color: #C76A40">name</span> <span style="color: #C76A40">name</span>, <span style="color: #C76A40;
            font-weight: 800;">type</span> <span style="color: #C76A40">regtype</span>, val <span style="color: #C76A40">anyelement</span>, <span style="color: #C76A40;
            font-weight: 800;">domain</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, label <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, editable <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>, <span style="color: #C76A40;
            font-weight: 800;">comment</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, force <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">boolean</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            * Essa função serve para registrar o valor de uma constante na base de dados
            * Se a constante já tiver o valor definido esse valor pode ser subistituido
              pelo novo desde que o parametro arg_entryset_replace estiver verdadeiro
            * Caso existir sem o parametro arg_entryset_replace verdadeiro uma excessão sera lançada
           \*\/</span>
          _entryset libdom.entryset;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          editable := coalesce( editable, <span style="color: #C76A40;
            font-weight: 800;">false</span> );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">domain</span> <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.entryset e
              <span style="color: #C76A40;
            font-weight: 800;">where</span> e.<span style="color: #C76A40;
            font-weight: 800;">domain</span> = entry.<span style="color: #C76A40;
            font-weight: 800;">domain</span>
                <span style="color: #C76A40;
            font-weight: 800;">and</span> e.name != entry.name
                <span style="color: #C76A40;
            font-weight: 800;">and</span> e.<span style="color: #C76A40;
            font-weight: 800;">value</span> = val::<span style="color: #C76A40">text</span>
          ) <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> force <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;Já existe um dominio com o mesmo valor para este grupo!&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _entryset
            <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.entryset const
            <span style="color: #C76A40;
            font-weight: 800;">where</span> const.name = entry.name
          ;


          <span style="color: #888">-- Deletar o valor de constante</span>
          <span style="color: #C76A40;
            font-weight: 800;">delete</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.entryset e <span style="color: #C76A40;
            font-weight: 800;">where</span> e.name = entry.name;

          <span style="color: #888">-- Recriar o valor de constante</span>
          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> libdom.entryset(
            <span style="color: #C76A40">name</span>,
            <span style="color: #C76A40;
            font-weight: 800;">type</span>,
            <span style="color: #C76A40;
            font-weight: 800;">value</span>,
            editable,
            label,
            <span style="color: #C76A40;
            font-weight: 800;">comment</span>,
            <span style="color: #C76A40;
            font-weight: 800;">domain</span>
          ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
             entry.name,
             entry.<span style="color: #C76A40;
            font-weight: 800;">type</span>,
             entry.val,
             entry.editable,
             entry.label,
             entry.<span style="color: #C76A40;
            font-weight: 800;">comment</span>,
             entry.<span style="color: #C76A40;
            font-weight: 800;">domain</span>
           ) <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _entryset;
          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface trigger_sync_domsync {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.trigger_sync_domsync()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _new libdom.domsync;
          _old libdom.domsync;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #397300">tg_op</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> ( <span style="color: #4d99bf">&#x27;UPDATE&#x27;</span>, <span style="color: #4d99bf">&#x27;INSERT&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">perform</span> libdom.domsync( _new.classname, _new.columnname, _new.<span style="color: #C76A40;
            font-weight: 800;">domain</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface rebuild {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.rebuild(clean <span style="color: #C76A40">boolean</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">text</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _data <span style="color: #C76A40">record</span>;
          _const libdom.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _dom libdom.<span style="color: #C76A40;
            font-weight: 800;">domain</span>;
          command <span style="color: #C76A40">text</span>;
          constant_class <span style="color: #C76A40">regtype</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;libdom.constant&#x27;</span>::<span style="color: #C76A40">regtype</span>;
          domain_class <span style="color: #C76A40">regtype</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;libdom.domain&#x27;</span>::<span style="color: #C76A40">regtype</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #888">-- Lipar todos os atributos atual nas classe de dominio e de constant</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> clean <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">for</span> _data <span style="color: #C76A40;
            font-weight: 800;">in</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_each (to_jsonb( _const ))
            <span style="color: #C76A40;
            font-weight: 800;">loop</span>
              command := format( <span style="color: #4d99bf">&#x27;alter type %s drop attribute if exists %I&#x27;</span>, _data.key, constant_class );
              <span style="color: #C76A40;
            font-weight: 800;">execute</span> command;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

            <span style="color: #C76A40;
            font-weight: 800;">for</span> _data <span style="color: #C76A40;
            font-weight: 800;">in</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_each (to_jsonb( _dom ))
            <span style="color: #C76A40;
            font-weight: 800;">loop</span>
              command := format( <span style="color: #4d99bf">&#x27;alter type %s drop attribute if exists %I&#x27;</span>, _data.key, domain_class);
              <span style="color: #C76A40;
            font-weight: 800;">execute</span> command;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- Recriar todos os atributos para a classe de dominio e de constant</span>
          <span style="color: #C76A40;
            font-weight: 800;">for</span> _data <span style="color: #C76A40;
            font-weight: 800;">in</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.entryset e
          <span style="color: #C76A40;
            font-weight: 800;">loop</span>
            <span style="color: #C76A40;
            font-weight: 800;">return next</span> to_jsonb( _data )::<span style="color: #C76A40">text</span>;
            <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.sync_entry( _data.name, <span style="color: #4d99bf">&#x27;libdom.constant&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.sync_entry( _data.name, <span style="color: #4d99bf">&#x27;libdom.domain&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.domsync( <span style="color: #C76A40;
            font-weight: 800;">null</span>, <span style="color: #C76A40;
            font-weight: 800;">null</span>, <span style="color: #C76A40;
            font-weight: 800;">null</span> );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface api_change_entryset {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.api_change_entryset(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            essa funcao server para editar uma entrada editavel
           \*\/</span>
          <span style="color: #C76A40">name</span> <span style="color: #C76A40">name</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;name&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">value</span> <span style="color: #C76A40">varchar</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;value&#x27;</span>;
          label <span style="color: #C76A40">varchar</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;label&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">domain</span> <span style="color: #C76A40">varchar</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;domain&#x27;</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">return</span> libdom.<span style="color: #C76A40;
            font-weight: 800;">set</span>( <span style="color: #C76A40">name</span>, <span style="color: #C76A40;
            font-weight: 800;">value</span>, label, <span style="color: #C76A40;
            font-weight: 800;">domain</span>, <span style="color: #C76A40;
            font-weight: 800;">false</span> );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface columns {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.<span style="color: #C76A40;
            font-weight: 800;">columns</span>(<span style="color: #C76A40">regclass</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(<span style="color: #C76A40">name</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, <span style="color: #C76A40;
            font-weight: 800;">type</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, defaults <span style="color: #C76A40">text</span>, isarray <span style="color: #C76A40">boolean</span>, isgenerated <span style="color: #C76A40">boolean</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">PARALLEL SAFE</span> <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">with</span> __columns <span style="color: #C76A40;
            font-weight: 800;">as</span> (
          <span style="color: #C76A40;
            font-weight: 800;">select</span>
            col.<span style="color: #397300">column_name</span>,
            format_type( pt.oid, atttypmod )::<span style="color: #C76A40">varchar</span> column_type,
            col.column_default,
            col.data_type = <span style="color: #4d99bf">&#x27;ARRAY&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> is_array,
            col.is_generated = <span style="color: #4d99bf">&#x27;ALWAYS&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> is_generated
          <span style="color: #C76A40;
            font-weight: 800;">from</span> information_schema.<span style="color: #C76A40;
            font-weight: 800;">columns</span> col
                 <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> pg_class c <span style="color: #C76A40;
            font-weight: 800;">on</span> c.relname = col.<span style="color: #397300">table_name</span>
            <span style="color: #C76A40;
            font-weight: 800;">and</span> col.table_schema::<span style="color: #C76A40">regnamespace</span> = c.relnamespace
                 <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> pg_attribute att <span style="color: #C76A40;
            font-weight: 800;">on</span> col.<span style="color: #397300">column_name</span> = att.attname
            <span style="color: #C76A40;
            font-weight: 800;">and</span> att.attrelid = format( <span style="color: #4d99bf">&#x27;%s.%s&#x27;</span>, col.table_schema, col.<span style="color: #397300">table_name</span> )::<span style="color: #C76A40">regclass</span>::<span style="color: #C76A40">oid</span>
                 <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> pg_type pt <span style="color: #C76A40;
            font-weight: 800;">on</span> att.atttypid = pt.oid
          <span style="color: #C76A40;
            font-weight: 800;">where</span> c.oid = <span style="color: #1f7199">$1</span>
        ) <span style="color: #C76A40;
            font-weight: 800;">select</span> *
        <span style="color: #C76A40;
            font-weight: 800;">from</span> __columns _c
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface api_load_entryset {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.api_load_entryset(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( e )
            <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.entryset e
            <span style="color: #C76A40;
            font-weight: 800;">where</span> e.editable
            <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> e.<span style="color: #C76A40;
            font-weight: 800;">domain</span> <span style="color: #C76A40;
            font-weight: 800;">nulls last</span>,
              e.label,
              e.name,
              e.<span style="color: #C76A40;
            font-weight: 800;">value</span>

        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface constant {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.<span style="color: #C76A40;
            font-weight: 800;">constant</span>(<span style="color: #C76A40;
            font-weight: 800;">VARIADIC</span> prefix <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>[] <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #4d99bf">&#x27;{}&#x27;</span>::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>[])
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> libdom.<span style="color: #C76A40;
            font-weight: 800;">constant</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">PARALLEL SAFE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #888">\/\**
            Essa função serve para carregar os valores das constante e inicia-la
           \*\/</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::libdom.<span style="color: #C76A40;
            font-weight: 800;">constant</span>, libdom.constant_document( <span style="color: #C76A40;
            font-weight: 800;">variadic</span> prefix ));
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _Domain_Of_16735 {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.domain_of(<span style="color: #C76A40;
            font-weight: 800;">domain</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, <span style="color: #C76A40;
            font-weight: 800;">value</span> <span style="color: #C76A40">text</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">text</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">PARALLEL SAFE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

          <span style="color: #888">\/\**
              Essa função serve para devolver o valor especifico de uma constante
           \*\/</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> cv.label
            <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.entryset cv
            <span style="color: #C76A40;
            font-weight: 800;">where</span> cv.name = domain_of.<span style="color: #C76A40;
            font-weight: 800;">domain</span>
              <span style="color: #C76A40;
            font-weight: 800;">and</span> cv.<span style="color: #C76A40;
            font-weight: 800;">value</span> = domain_of.<span style="color: #C76A40;
            font-weight: 800;">value</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface trigger_sync_entry {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.trigger_sync_entry()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _new libdom.entryset;
          _old libdom.entryset;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _new := <span style="color: #397300">new</span>;
          _old := <span style="color: #397300">old</span>;


          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #397300">tg_op</span> = <span style="color: #4d99bf">&#x27;UPDATE&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> _new.name != _old.name <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">perform</span> libdom.sync_drop( _old.name, <span style="color: #4d99bf">&#x27;libdom.constant&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">perform</span> libdom.sync_drop( _old.name, <span style="color: #4d99bf">&#x27;libdom.domain&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #397300">tg_op</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> ( <span style="color: #4d99bf">&#x27;INSERT&#x27;</span>, <span style="color: #4d99bf">&#x27;UPDATE&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">and</span> (
            coalesce( _new.name::<span style="color: #C76A40">text</span>, <span style="color: #4d99bf">&#x27;&#x27;</span> ) != coalesce( _old.name::<span style="color: #C76A40">text</span>, <span style="color: #4d99bf">&#x27;&#x27;</span> )
            <span style="color: #C76A40;
            font-weight: 800;">or</span> coalesce( _new.<span style="color: #C76A40;
            font-weight: 800;">type</span>::<span style="color: #C76A40">text</span>, <span style="color: #4d99bf">&#x27;&#x27;</span> ) != coalesce( _old.<span style="color: #C76A40;
            font-weight: 800;">type</span>::<span style="color: #C76A40">text</span>, <span style="color: #4d99bf">&#x27;&#x27;</span> )
            <span style="color: #C76A40;
            font-weight: 800;">or</span> coalesce( _new.<span style="color: #C76A40;
            font-weight: 800;">comment</span>::<span style="color: #C76A40">text</span>, <span style="color: #4d99bf">&#x27;&#x27;</span> ) != coalesce( _old.<span style="color: #C76A40;
            font-weight: 800;">comment</span>::<span style="color: #C76A40">text</span>, <span style="color: #4d99bf">&#x27;&#x27;</span> )
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">perform</span> libdom.sync_entry( _new.name, <span style="color: #4d99bf">&#x27;libdom.constant&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">perform</span> libdom.sync_entry( _new.name, <span style="color: #4d99bf">&#x27;libdom.domain&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">perform</span> libdom.domsync( <span style="color: #C76A40;
            font-weight: 800;">null</span>, <span style="color: #C76A40;
            font-weight: 800;">null</span>, _new.<span style="color: #C76A40;
            font-weight: 800;">domain</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #397300">tg_op</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> ( <span style="color: #4d99bf">&#x27;DELETE&#x27;</span>  ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">perform</span> libdom.sync_drop( _old.name, <span style="color: #4d99bf">&#x27;libdom.constant&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">perform</span> libdom.sync_drop( _old.name, <span style="color: #4d99bf">&#x27;libdom.domain&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;


          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #397300">tg_op</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> ( <span style="color: #4d99bf">&#x27;INSERT&#x27;</span>, <span style="color: #4d99bf">&#x27;UPDATE&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> _new;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface domain {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.<span style="color: #C76A40;
            font-weight: 800;">domain</span>(<span style="color: #C76A40;
            font-weight: 800;">VARIADIC</span> prefix <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>[] <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #4d99bf">&#x27;{}&#x27;</span>::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>[])
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> libdom.<span style="color: #C76A40;
            font-weight: 800;">domain</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">PARALLEL SAFE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
              <span style="color: #888">\/\**
                Essa função serve para carregar os valores das constante e inicia-la
               \*\/</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::libdom.<span style="color: #C76A40;
            font-weight: 800;">domain</span>, libdom.domain_document( <span style="color: #C76A40;
            font-weight: 800;">variadic</span> prefix ));
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface domain_document {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.domain_document(<span style="color: #C76A40;
            font-weight: 800;">VARIADIC</span> prefix <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>[] <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #4d99bf">&#x27;{}&#x27;</span>::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>[])
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">PARALLEL SAFE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #888">-- Devolver o mapeamento dos estados</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span>
              jsonb_object_agg( cv.name, cv.label )
            <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.prefix( <span style="color: #C76A40;
            font-weight: 800;">variadic</span> prefix ) cv
          ;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface describe {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.describe(<span style="color: #C76A40;
            font-weight: 800;">VARIADIC</span> prefix <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>[] <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>[])
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(declaration <span style="color: #C76A40">text</span>, <span style="color: #C76A40">name</span> <span style="color: #C76A40">name</span>, <span style="color: #C76A40;
            font-weight: 800;">type</span> <span style="color: #C76A40">regtype</span>, <span style="color: #C76A40;
            font-weight: 800;">value</span> <span style="color: #C76A40">text</span>, <span style="color: #C76A40;
            font-weight: 800;">domain</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, label <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, editable <span style="color: #C76A40">boolean</span>, <span style="color: #C76A40;
            font-weight: 800;">comment</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, &quot;default&quot; <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #888">-- Devolver o mapeamento dos estados</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span>
              format( <span style="color: #4d99bf">&#x27;%I %s default %L::%s;&#x27;</span>, cv.name, cv.<span style="color: #C76A40;
            font-weight: 800;">type</span>, cv.<span style="color: #C76A40;
            font-weight: 800;">value</span>, cv.<span style="color: #C76A40;
            font-weight: 800;">type</span> ),
              cv.*,
              format( <span style="color: #4d99bf">&#x27;libdom.get(%L::name)::%s&#x27;</span>, cv.name, cv.<span style="color: #C76A40;
            font-weight: 800;">type</span> )
            <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.prefix(  <span style="color: #C76A40;
            font-weight: 800;">variadic</span> prefix ) cv
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface exports {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.exports(<span style="color: #397300">schema_name</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #4d99bf">&#x27;libdom&#x27;</span>::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, <span style="color: #C76A40;
            font-weight: 800;">VARIADIC</span> <span style="color: #C76A40">name</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>[] <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">ARRAY</span>[]::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>[])
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(<span style="color: #C76A40">name</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, <span style="color: #C76A40;
            font-weight: 800;">type</span> <span style="color: #C76A40">regtype</span>, <span style="color: #C76A40;
            font-weight: 800;">value</span> <span style="color: #C76A40">text</span>, declaration <span style="color: #C76A40">text</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">with</span> names <span style="color: #C76A40;
            font-weight: 800;">as</span> (
          <span style="color: #C76A40;
            font-weight: 800;">select</span> array_agg( <span style="color: #C76A40;
            font-weight: 800;">distinct</span> coalesce( un, <span style="color: #4d99bf">&#x27;&#x27;</span>)||<span style="color: #4d99bf">&#x27;%&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> list
          <span style="color: #C76A40;
            font-weight: 800;">from</span> unnest( <span style="color: #1f7199">$2</span> ) un
        )
          <span style="color: #C76A40;
            font-weight: 800;">select</span>
            cv.name,
            cv.<span style="color: #C76A40;
            font-weight: 800;">type</span>,
            cv.<span style="color: #C76A40;
            font-weight: 800;">value</span>,
            format( <span style="color: #4d99bf">&#x27;select %I.entry(name := %L, type := %L::regtype, val := %L::text, domain := %L::varchar, label := %L, editable := %L, comment := %L );&#x27;</span>,
                    <span style="color: #397300">schema_name</span>,
                    cv.name,
                    cv.<span style="color: #C76A40;
            font-weight: 800;">type</span>,
                    cv.<span style="color: #C76A40;
            font-weight: 800;">value</span>,
                    cv.<span style="color: #C76A40;
            font-weight: 800;">domain</span>,
                    cv.label,
                    cv.editable,
                    cv.<span style="color: #C76A40;
            font-weight: 800;">comment</span>
              )
          <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.entryset cv <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> names na <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
          <span style="color: #C76A40;
            font-weight: 800;">where</span> cv.name <span style="color: #C76A40;
            font-weight: 800;">like</span> <span style="color: #C76A40;
            font-weight: 800;">any</span>( na.list )
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface entry_list {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.entry_list(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _name <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;name&#x27;</span>;
          _value <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;value&#x27;</span>;
          _domain <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;domain&#x27;</span>;
          _label <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;label&#x27;</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __entry <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  es.name,
                  es.<span style="color: #C76A40;
            font-weight: 800;">type</span>,
                  es.<span style="color: #C76A40;
            font-weight: 800;">value</span>,
                  es.<span style="color: #C76A40;
            font-weight: 800;">domain</span>,
                  es.label
                <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.entryset es
                <span style="color: #C76A40;
            font-weight: 800;">where</span> es.name = coalesce( _name, es.name )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> es.<span style="color: #C76A40;
            font-weight: 800;">value</span> = coalesce( _value, es.<span style="color: #C76A40;
            font-weight: 800;">value</span> )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( es.<span style="color: #C76A40;
            font-weight: 800;">domain</span>, <span style="color: #4d99bf">&#x27;&#x27;</span> ) = coalesce( _domain, es.<span style="color: #C76A40;
            font-weight: 800;">domain</span>, <span style="color: #4d99bf">&#x27;&#x27;</span> )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( es.label, <span style="color: #4d99bf">&#x27;&#x27;</span> ) = coalesce( _label, es.label, <span style="color: #4d99bf">&#x27;&#x27;</span> )
              ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _e )
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __entry _e
                  <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> _e.<span style="color: #C76A40;
            font-weight: 800;">domain</span>,
                    _e.label,
                    _e.name,
                    _e.<span style="color: #C76A40;
            font-weight: 800;">value</span>
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface sync_entry {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.sync_entry(<span style="color: #C76A40">name</span> <span style="color: #C76A40">name</span>, classtype <span style="color: #C76A40">regtype</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">text</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Syncronizar uma entry em na calsse expecificada
           \*\/</span>
          command <span style="color: #C76A40">text</span>;
          _entry libdom.entryset;
          _type <span style="color: #C76A40">regtype</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;text&#x27;</span>::<span style="color: #C76A40">regtype</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _entry
            <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.entryset e
            <span style="color: #C76A40;
            font-weight: 800;">where</span> e.name = sync_entry.name;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> classtype = <span style="color: #4d99bf">&#x27;libdom.constant&#x27;</span>::<span style="color: #C76A40">regtype</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _type := _entry.<span style="color: #C76A40;
            font-weight: 800;">type</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- Destruir a constante casao existir</span>
          command := format( <span style="color: #4d99bf">&#x27;alter type %s drop attribute if exists %I;&#x27;</span>, classtype, <span style="color: #C76A40">name</span> );
          <span style="color: #C76A40;
            font-weight: 800;">execute</span> command;
          <span style="color: #C76A40;
            font-weight: 800;">return next</span> command;

          <span style="color: #888">-- Recriar a constante novamente</span>
          command := format( <span style="color: #4d99bf">&#x27;alter type %s add attribute %I %s;&#x27;</span>, classtype, <span style="color: #C76A40">name</span>, _type );
          <span style="color: #C76A40;
            font-weight: 800;">execute</span> command;
          <span style="color: #C76A40;
            font-weight: 800;">return next</span> command;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _entry.<span style="color: #C76A40;
            font-weight: 800;">comment</span> <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            command := format( <span style="color: #4d99bf">&#x27;comment on column %s.%I is %L;&#x27;</span>, classtype, <span style="color: #C76A40">name</span>, _entry.<span style="color: #C76A40;
            font-weight: 800;">comment</span> );
            <span style="color: #C76A40;
            font-weight: 800;">execute</span> command;
            <span style="color: #C76A40;
            font-weight: 800;">return next</span> command;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _set {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.<span style="color: #C76A40;
            font-weight: 800;">set</span>(<span style="color: #C76A40">name</span> <span style="color: #C76A40">name</span>, <span style="color: #C76A40;
            font-weight: 800;">value</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, label <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, <span style="color: #C76A40;
            font-weight: 800;">domain</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, force <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
              Essa função serve para atualizar o valor de uma constante
           \*\/</span>
          _entryset libdom.entryset;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">domain</span> <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
              <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.entryset e
              <span style="color: #C76A40;
            font-weight: 800;">where</span> e.<span style="color: #C76A40;
            font-weight: 800;">domain</span> = <span style="color: #C76A40;
            font-weight: 800;">set</span>.<span style="color: #C76A40;
            font-weight: 800;">domain</span>
                <span style="color: #C76A40;
            font-weight: 800;">and</span> e.name != <span style="color: #C76A40;
            font-weight: 800;">set</span>.name
                <span style="color: #C76A40;
            font-weight: 800;">and</span> e.<span style="color: #C76A40;
            font-weight: 800;">value</span> = <span style="color: #C76A40;
            font-weight: 800;">set</span>.<span style="color: #C76A40;
            font-weight: 800;">value</span>::<span style="color: #C76A40">text</span>
            ) <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> force <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> jsonb_build_object(
              <span style="color: #4d99bf">&#x27;result&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">false</span>,
              <span style="color: #4d99bf">&#x27;message&#x27;</span>, <span style="color: #4d99bf">&#x27;Já existe um dominio com o mesmo valor para este grupo!&#x27;</span>
            );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> !<span style="color: #C76A40;
            font-weight: 800;">exists</span>(
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.entryset e
              <span style="color: #C76A40;
            font-weight: 800;">where</span> e.name = <span style="color: #C76A40;
            font-weight: 800;">set</span>.name
                <span style="color: #C76A40;
            font-weight: 800;">and</span> e.editable
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> jsonb_build_object(
                <span style="color: #4d99bf">&#x27;result&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">false</span>,
                <span style="color: #4d99bf">&#x27;message&#x27;</span>, <span style="color: #4d99bf">&#x27;Não existe uma entrada editavel com este nome!&#x27;</span>
              );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">update</span> libdom.entryset
            <span style="color: #C76A40;
            font-weight: 800;">set</span> ( <span style="color: #C76A40;
            font-weight: 800;">value</span>, label, <span style="color: #C76A40;
            font-weight: 800;">domain</span> ) = ( <span style="color: #C76A40;
            font-weight: 800;">value</span>, label, <span style="color: #C76A40;
            font-weight: 800;">domain</span> )
            <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40">name</span> = <span style="color: #C76A40">name</span>
            <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _entryset
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> jsonb_build_object(
            <span style="color: #4d99bf">&#x27;result&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">true</span>,
            <span style="color: #4d99bf">&#x27;data&#x27;</span>, jsonb_build_object(
              <span style="color: #4d99bf">&#x27;entryset&#x27;</span>, _entryset
            )
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface domset {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.domset(_class <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, _column <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, _domain <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, _comment <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">boolean</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**doc

           doc\*\/</span>
          _data <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">update</span> libdom.domsync
              <span style="color: #C76A40;
            font-weight: 800;">set</span> <span style="color: #C76A40;
            font-weight: 800;">domain</span> = _domain,
                  <span style="color: #C76A40;
            font-weight: 800;">comment</span> = _comment
            <span style="color: #C76A40;
            font-weight: 800;">where</span> classname = _class
              <span style="color: #C76A40;
            font-weight: 800;">and</span> columnname = _column
            <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
          ;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _data.classname <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> libdom.domsync(
              classname,
              columnname,
              <span style="color: #C76A40;
            font-weight: 800;">domain</span>,
              <span style="color: #C76A40;
            font-weight: 800;">comment</span>
            ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
              _class,
              _column,
              _domain,
              _comment
            );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface prefix {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.prefix(<span style="color: #C76A40;
            font-weight: 800;">VARIADIC</span> prefix <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>[] <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #4d99bf">&#x27;{}&#x27;</span>::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>[])
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> libdom.entryset
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">PARALLEL SAFE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _prefix <span style="color: #C76A40">varchar</span>[];
          _length <span style="color: #C76A40">int</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> coalesce( array_length( prefix, <span style="color: #C76A40">1</span>), <span style="color: #C76A40">0</span> );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> array_agg( format( <span style="color: #4d99bf">&#x27;%s%%&#x27;</span>, e.element ) ) <span style="color: #C76A40;
            font-weight: 800;">into</span> _prefix
          <span style="color: #C76A40;
            font-weight: 800;">from</span> unnest( coalesce( prefix, <span style="color: #4d99bf">&#x27;{}&#x27;</span>::<span style="color: #C76A40">text</span>[] ) ) e ( element );

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> e.*
            <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.entryset e
            <span style="color: #C76A40;
            font-weight: 800;">where</span> e.name <span style="color: #C76A40;
            font-weight: 800;">like</span> <span style="color: #C76A40;
            font-weight: 800;">any</span>( _prefix )
               <span style="color: #C76A40;
            font-weight: 800;">or</span> _length = <span style="color: #C76A40">0</span>
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface constant_document {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> libdom.constant_document(<span style="color: #C76A40;
            font-weight: 800;">VARIADIC</span> prefix <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>[] <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #4d99bf">&#x27;{}&#x27;</span>::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>[])
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">PARALLEL SAFE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #888">-- Devolver o mapeamento dos estados</span>
           <span style="color: #C76A40;
            font-weight: 800;">select</span>
              jsonb_object_agg( cv.name, cv.<span style="color: #C76A40;
            font-weight: 800;">value</span> )
            <span style="color: #C76A40;
            font-weight: 800;">from</span> libdom.prefix( <span style="color: #C76A40;
            font-weight: 800;">variadic</span> prefix ) cv
        ;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }
    }

    export namespace _Tweeks {
      export interface funct_pos_load_posto {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_load_posto(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para devolver o cambio do dia de uma moeda
            filter := {
              arg_chave_temporaria: CHAVE;
            }
          \*\/</span>

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _chave_doc <span style="color: #C76A40">jsonb</span>;
          _posto tweeks.posto;
          _posto_disponivel <span style="color: #C76A40">boolean</span>;
          _local <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          ___branch <span style="color: #C76A40">uuid</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _local := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local();
          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _chave_doc
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.funct_load_chave( args );

          _posto := jsonb_populate_record( _posto, _chave_doc );
          _posto_disponivel := _chave_doc-&gt;&gt;<span style="color: #4d99bf">&#x27;posto_disponivel&#x27;</span>;
          
          
          ___branch := tweeks.__branch_uid( _posto.posto_colaborador_id, _posto.posto_espaco_auth );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _chave_doc <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _posto_disponivel <span style="color: #C76A40;
            font-weight: 800;">or</span> _posto.posto_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return next</span> _chave_doc;
            <span style="color: #C76A40;
            font-weight: 800;">return</span>;
          elseif _chave_doc <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return next</span> _chave_doc;

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __cambio <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                c.currency_id,
                c.currency_name,
                c.currency_code,
                cb.cambio_id,
                cb.cambio_taxa,
                cb.cambio_data,
                cb.cambio_estado,
                cb.cambio_dataatualizacao,
                cb.cambio_espaco_auth,
                rank( ) <span style="color: #C76A40;
            font-weight: 800;">over</span> ( <span style="color: #C76A40;
            font-weight: 800;">partition</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> cb.cambio_currency_id, cb.cambio_espaco_auth <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> cb.cambio_dataregistro <span style="color: #C76A40;
            font-weight: 800;">desc</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> cambio_rank
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.cambio cb
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> geoinfo.currency c <span style="color: #C76A40;
            font-weight: 800;">on</span> cb.cambio_currency_id = c.currency_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> cb.cambio_data &lt;= <span style="color: #397300">current_timestamp</span>::<span style="color: #C76A40">date</span>
                <span style="color: #C76A40;
            font-weight: 800;">and</span> cb.cambio_estado != _const.maguita_cambio_estado_anulado
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> cb.cambio_dataregistro <span style="color: #C76A40;
            font-weight: 800;">desc</span>
            ), __serie <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> 
                  se.serie_id,
                  se.serie_numero,
                  se.serie_sequencia,
                  se.serie_quantidade,
                  se.serie_designacao,
                  se.serie_numatorizacao,
                  ts.tserie_id,
                  ts.tserie_desc,
                  ts.tserie_code,
                  ts.tserie_financa,
                  aut.autorizacao_uid,
                  aut.autorizacao_ano
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.serie se
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.tserie ts <span style="color: #C76A40;
            font-weight: 800;">on</span> se.serie_tserie_id = ts.tserie_id
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.autorizacao aut <span style="color: #C76A40;
            font-weight: 800;">on</span> se.serie_autorizacao_uid = aut.autorizacao_uid
                <span style="color: #C76A40;
            font-weight: 800;">where</span> se._branch_uid = ___branch
            ), __space_cambio <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  e.espaco_id,
                  e.espaco_nome,
                  e.espaco_nivel,
                  e.espaco_vender,
                  al.aloca_id,
                  to_jsonb( fatura ) <span style="color: #C76A40;
            font-weight: 800;">as</span> &quot;FATURA&quot;,
                  to_jsonb( frecibo ) <span style="color: #C76A40;
            font-weight: 800;">as</span> &quot;FATURARECIBO&quot;,
                  al.aloca_estado,
                  al.aloca_montante,
                  _local.cluster_identifier,
                  _local.cluster_name,
                  _local.cluster_domain,
                  _local.cluster_port,
                  array_agg( c ) <span style="color: #C76A40;
            font-weight: 800;">as</span> espaco_cambios
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __cambio c
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> c.cambio_espaco_auth = e.espaco_id
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> e.espaco_estado = _const.maguita_espaco_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.aloca al <span style="color: #C76A40;
            font-weight: 800;">on</span> e.espaco_id = al.aloca_espaco_destino
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> al.aloca_posto_id = _posto.posto_id
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> al.aloca_estado = _const.maguita_aloca_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> __serie fatura <span style="color: #C76A40;
            font-weight: 800;">on</span> al.aloca_serie_fatura = fatura.serie_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> __serie frecibo <span style="color: #C76A40;
            font-weight: 800;">on</span> al.aloca_serie_faturarecibo = frecibo.serie_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> c.cambio_rank = <span style="color: #C76A40">1</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> e.espaco_vender = _local.cluster_identifier
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> 
                  al.aloca_id,
                  e.espaco_id,
                  to_jsonb( fatura ),
                  to_jsonb( frecibo )
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( sc )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __space_cambio sc
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_load_artigo_extras {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_load_artigo_extras(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              arg_artigo_id: UID,
              arg_espaco_auth: UID,
              arg_colaborador_id: UID
            }
           \*\/</span>
          arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span>;
        <span style="color: #888">--   arg_espaco_auth uuid not null default args-&gt;&gt;&#x27;arg_espaco_auth&#x27;;</span>
        <span style="color: #888">--   arg_colaborador_id uuid not null default args-&gt;&gt;&#x27;arg_colaborador_id&#x27;;</span>

            _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span> __item <span style="color: #C76A40;
            font-weight: 800;">as</span>(
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  art.artigo_id,
                  art.artigo_nome,
                  l.link_metadata
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo art
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.link l <span style="color: #C76A40;
            font-weight: 800;">on</span> to_jsonb( art ) @&gt; l.link_referencia
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_estado = _const.maguita_link_estado_ativo
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_tlink_id = _const.maguita_tlink_preco
                <span style="color: #C76A40;
            font-weight: 800;">where</span> art.artigo_classe_id = _const.classe_itemextra
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_estado = _const.artigo_estado_ativo
            ), __extras <span style="color: #C76A40;
            font-weight: 800;">as</span>(
              <span style="color: #C76A40;
            font-weight: 800;">select</span> it.*
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.dispoe d
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __item it <span style="color: #C76A40;
            font-weight: 800;">on</span> d.dispoe_artigo_item = it.artigo_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> d.dispoe_artigo_id = arg_artigo_id
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( e ) <span style="color: #C76A40;
            font-weight: 800;">from</span> __extras e;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos__sync_conta_amount {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos__sync_conta_amount(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          arg_conta_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_conta_id&#x27;</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _conta tweeks.conta;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
        <span style="color: #888">--   with __vendas  as(</span>
        <span style="color: #888">--     select</span>
        <span style="color: #888">--         ve.*,</span>
        <span style="color: #888">--         coalesce( sum( vi.venda_montantetotal ), 0.0 ) as _venda_montanteagregado</span>
        <span style="color: #888">--       from tweeks.venda ve</span>
        <span style="color: #888">--         left join tweeks.venda vi on ve.venda_id = vi.venda_venda_id</span>
        <span style="color: #888">--           and vi.venda_conta_id = arg_conta_id</span>
        <span style="color: #888">--           and vi.venda_estado in ( _const.maguita_venda_estado_aberto, _const.maguita_venda_estado_fechado )</span>
        <span style="color: #888">--</span>
        <span style="color: #888">--       where ve.venda_conta_id  = arg_conta_id</span>
        <span style="color: #888">--         and ve.venda_estado = _const.maguita_venda_estado_aberto</span>
        <span style="color: #888">--         and ve.venda_venda_id is null</span>
        <span style="color: #888">--</span>
        <span style="color: #888">--       group by ve.venda_id</span>
        <span style="color: #888">--   ), __venda_calcs as (</span>
        <span style="color: #888">--     select</span>
        <span style="color: #888">--         _ve._venda_montanteagregado,</span>
        <span style="color: #888">--         _ve.venda_id,</span>
        <span style="color: #888">--         _ve.venda_montante + _ve._venda_montanteagregado as _venda_montantetotal,</span>
        <span style="color: #888">--         _vi.*</span>
        <span style="color: #888">--       from __vendas _ve</span>
        <span style="color: #888">--         inner join tweeks.funct_pos__calc_imposto( _ve.venda_artigo_id, _ve.venda_montante + _ve._venda_montanteagregado, args || jsonb_build_object(</span>
        <span style="color: #888">--           &#x27;arg_venda_id&#x27;, _ve.venda_id</span>
        <span style="color: #888">--         )) _vi on true</span>
        <span style="color: #888">--       where _ve.venda_id = _ve.venda_id</span>
        <span style="color: #888">--         and _ve.venda_conta_id = arg_conta_id</span>
        <span style="color: #888">--         and true in (</span>
        <span style="color: #888">--           _ve.venda_montantetotal != _ve.venda_montante + _ve._venda_montanteagregado,</span>
        <span style="color: #888">--           _ve.venda_montanteagregado != _ve._venda_montanteagregado,</span>
        <span style="color: #888">--           _ve.venda_imposto != _vi.venda_imposto,</span>
        <span style="color: #888">--           _ve.venda_impostoadicionar != _vi.venda_impostoadicionar,</span>
        <span style="color: #888">--           _ve.venda_impostoretirar != _vi.venda_impostoretirar,</span>
        <span style="color: #888">--           _ve.venda_montantesemimposto != _vi.venda_montantesemimposto,</span>
        <span style="color: #888">--           _ve.venda_montantecomimposto != _vi.venda_montantecomimposto</span>
        <span style="color: #888">--         )</span>
        <span style="color: #888">--     ), __sync_calc as (</span>
        <span style="color: #888">--     update tweeks.venda _up</span>
        <span style="color: #888">--       set</span>
        <span style="color: #888">--           venda_montantetotal = _vc._venda_montantetotal,</span>
        <span style="color: #888">--           venda_montanteagregado = _vc._venda_montanteagregado,</span>
        <span style="color: #888">--           venda_imposto = _vc.venda_imposto,</span>
        <span style="color: #888">--           venda_impostoadicionar = _vc.venda_impostoadicionar,</span>
        <span style="color: #888">--           venda_impostoretirar = _vc.venda_impostoretirar,</span>
        <span style="color: #888">--           venda_montantesemimposto = _vc.venda_montantesemimposto,</span>
        <span style="color: #888">--           venda_montantecomimposto = _vc.venda_montantecomimposto</span>
        <span style="color: #888">--       from __venda_calcs _vc</span>
        <span style="color: #888">--       where _vc.venda_id = _up.venda_id</span>
        <span style="color: #888">--       returning _up.*, _vc.impostos</span>
        <span style="color: #888">--   ) select count( * ) as changes, jsonb_agg( to_jsonb( s )) as syncs into _data from __sync_calc s;</span>


          <span style="color: #C76A40;
            font-weight: 800;">with</span> __final_amount <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> sum( ve.venda_montantecomimposto ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_montante
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.venda ve
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ve.venda_conta_id = arg_conta_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_estado <span style="color: #C76A40;
            font-weight: 800;">in</span> (
                  _const.maguita_venda_estado_aberto,
                  _const.maguita_venda_estado_fechado
                )
          ), __sync_conta <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.conta _c <span style="color: #C76A40;
            font-weight: 800;">set</span>
                conta_montante = _ve.conta_montante
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __final_amount _ve
              <span style="color: #C76A40;
            font-weight: 800;">where</span> _c.conta_id = arg_conta_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> _c.conta_montante != _ve.conta_montante
              <span style="color: #C76A40;
            font-weight: 800;">returning</span> *
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _conta <span style="color: #C76A40;
            font-weight: 800;">from</span> __sync_conta;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> jsonb_build_object(
            <span style="color: #4d99bf">&#x27;conta&#x27;</span>, _conta
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_colaborador {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_colaborador(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para aatualizar as informações do colaborador
            args := {
              arg_espaco_auth: ID
              arg_espaco: [ ]
              arg_colaborador_id: ID,
              arg_colaborador_editar: ID,
              arg_colaborador_email: MAIL,
              arg_colaborador_nome: NOME,
              arg_colaborador_apelido: APELIDO,
              arg_colaborador_datanascimento: DATA,
              arg_colaborador_nif: NIF,
              arg_colaborador_ficha: FICHA,
              arg_colaborador_foto: FICHA,
              arg_tsexo_id: SEXO
            }
            arg_colaborador_editar corresponde ao id do colaborador que sera atualizado
            arg_colaborador_id corresponde ao id do colaborador que esata efetuar a atualização
          \*\/</span>

          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>       := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_colaborador_editar <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>   := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_editar&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>             := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;

          arg_colaborador_email <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>   := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_email&#x27;</span>;
          arg_colaborador_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>    := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_nome&#x27;</span>;
          arg_colaborador_apelido <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_apelido&#x27;</span>;
          arg_colaborador_datanascimento <span style="color: #C76A40">date</span>       := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_datanascimento&#x27;</span>;
          arg_colaborador_nif <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>     := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_nif&#x27;</span>;
          arg_colaborador_ficha <span style="color: #C76A40">jsonb</span>               := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_ficha&#x27;</span>;
          arg_colaborador_foto <span style="color: #C76A40">varchar</span>               := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_foto&#x27;</span>;
          arg_tsexo_id <span style="color: #C76A40">int2</span>                         := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_tsexo_id&#x27;</span>;
          arg_espaco <span style="color: #C76A40">jsonb</span>                      := args-&gt;<span style="color: #4d99bf">&#x27;arg_espaco&#x27;</span>;

          _colaborador auth.colaborador := auth._get_colaborador( arg_colaborador_editar );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span> := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #888">-- Tanto o nif, quanto o email deve ser único na base de dados</span>
          arg_colaborador_email := lib.str_normalize( lower( arg_colaborador_email ) );
          arg_colaborador_nif := lib.str_normalize( lower( arg_colaborador_nif ) );

          <span style="color: #888">-- Quando existir email e estiver associado ao utro colaborador então</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_colaborador_email <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>  <span style="color: #C76A40;
            font-weight: 800;">and</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.colaborador
              <span style="color: #C76A40;
            font-weight: 800;">where</span> colaborador_email = arg_colaborador_email
                <span style="color: #C76A40;
            font-weight: 800;">and</span> colaborador_id != _colaborador.colaborador_id
          ) &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;Email já existe!&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- Quando existir um colaborador o nif expecificado</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_colaborador_nif <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span>  (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * ) &gt; <span style="color: #C76A40">0</span>
              <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.colaborador co
              <span style="color: #C76A40;
            font-weight: 800;">where</span> co.colaborador_nif = arg_colaborador_nif
                <span style="color: #C76A40;
            font-weight: 800;">and</span> co.colaborador_id != _colaborador.colaborador_id
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;NIF já existe!&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- A atualização deve ser feita apenas quando o novo valor vier nulo</span>
          <span style="color: #C76A40;
            font-weight: 800;">update</span> auth.colaborador
            <span style="color: #C76A40;
            font-weight: 800;">set</span> colaborador_email = coalesce( arg_colaborador_email, colaborador_email ),
                colaborador_nome = coalesce( lib.str_normalize( arg_colaborador_nome ), colaborador_nome ),
                colaborador_apelido = coalesce( lib.str_normalize( arg_colaborador_apelido ), colaborador_apelido ),
                colaborador_tsexo_id = coalesce( arg_tsexo_id, colaborador_tsexo_id ),
                colaborador_datanascimento = coalesce( arg_colaborador_datanascimento, colaborador_datanascimento ),
                colaborador_nif = coalesce( arg_colaborador_nif, colaborador_nif ),
                colaborador_foto = coalesce( arg_colaborador_foto, colaborador_foto ),
                colaborador_ficha = coalesce( arg_colaborador_ficha, colaborador_ficha ),
                colaborador_colaborador_atualizacao = arg_colaborador_id,
                colaborador_dataatualizacao = now()
            <span style="color: #C76A40;
            font-weight: 800;">where</span> colaborador_id = _colaborador.colaborador_id
            <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _colaborador
          ;

          <span style="color: #C76A40;
            font-weight: 800;">perform</span> tweeks.funct_reg_trabalha(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth,
              <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
              <span style="color: #4d99bf">&#x27;arg_colaborador_propetario&#x27;</span>, _colaborador.colaborador_id,
              <span style="color: #4d99bf">&#x27;arg_espaco&#x27;</span>, arg_espaco
            )
          );

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true();
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_caixa {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks._get_caixa(arg_caixa_id <span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> caixa
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #888">-- Essa função serve para obter uma instancia da caixa</span>
        <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.caixa cx <span style="color: #C76A40;
            font-weight: 800;">where</span> cx.caixa_id = arg_caixa_id;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_caixa_by_colaborador {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_caixa_by_colaborador(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(caixa_id <span style="color: #C76A40">uuid</span>, caixa_montanteinicial <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, caixa_estado <span style="color: #C76A40">smallint</span>, caixa_dataregistro <span style="color: #C76A40">timestamp</span> <span style="color: #C76A40">with time zone</span>, caixa_dataatualizacao <span style="color: #C76A40">timestamp</span> <span style="color: #C76A40">with time zone</span>, posto_id <span style="color: #C76A40">uuid</span>, posto_designacao <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, posto_montante <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, posto_estado <span style="color: #C76A40">smallint</span>, posto_dataregistro <span style="color: #C76A40">timestamp</span> <span style="color: #C76A40">with time zone</span>, posto_dataatualizacao <span style="color: #C76A40">timestamp</span> <span style="color: #C76A40">with time zone</span>, espaco_id <span style="color: #C76A40">uuid</span>, espaco_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para carragar a posto do colaborador
            filter := {
              arg_colaborador_id: ID,
            }
           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
              ab.caixa_id,
              ab.caixa_montanteinicial,
              ab.caixa_estado,
              ab.caixa_dataregistro,
              ab.caixa_dataatualizacao,
              cx.posto_id,
              cx.posto_designacao,
              cx.posto_montante,
              cx.posto_estado,
              cx.posto_dataregistro,
              cx.posto_dataatualizacao,
              esp.espaco_id,
              esp.espaco_nome
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.caixa ab
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.posto cx <span style="color: #C76A40;
            font-weight: 800;">on</span> ab.caixa_posto_id = cx.posto_id
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco esp <span style="color: #C76A40;
            font-weight: 800;">on</span> cx.posto_espaco_id = esp.espaco_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span> ab.caixa_colaborador_id = arg_colaborador_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> ab.caixa_estado = _const.caixa_estado_ativo
              <span style="color: #C76A40;
            font-weight: 800;">and</span> cx.posto_estado = _const.posto_estado_aberto
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_cluster_by_branch {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_cluster_by_branch(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              arg_branch_uid: UID
            }
           \*\/</span>
          arg_branch_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_branch_uid&#x27;</span>;
          _branch tweeks.branch;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _branch := tweeks.__get_branch( arg_branch_uid );

          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span>
            __clusters <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  c.cluster_identifier,
                  c.cluster_name,
                  c.cluster_configs,
                  c.cluster_type,
                  c.cluster_path,
                  c.cluster_grants,
                  c.cluster_version,
                  c.cluster_sequence
                <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c
                <span style="color: #C76A40;
            font-weight: 800;">where</span> c.cluster_identifier = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _branch.branch_clusters )
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( c )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __clusters c;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_serie {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_serie(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            arg_espaco_auth
            arg_colaborador_id
            arg_autorizacao_id
           \*\/</span>
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_autorizacao_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_autorizacao_id&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          ___branch_uid <span style="color: #C76A40">uuid</span>;
          _espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens_static( arg_espaco_auth );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          ___branch_uid := tweeks.__branch_uid( <span style="color: #C76A40;
            font-weight: 800;">null</span>, arg_espaco_auth );
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span>
              __serie <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span> _vs.*,
                    e.espaco_id,
                    e.espaco_nome
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.serie _vs
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> _vs.serie_espaco_id = e.espaco_id
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> _vs._branch_uid = ___branch_uid
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( _vs.serie_autorizacao_uid ) = coalesce( arg_autorizacao_id, _vs.serie_autorizacao_uid )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> (
                      _vs.serie_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _espaco_child ),
                      _vs.serie_espaco_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _espaco_child )
                    ) <span style="color: #C76A40;
            font-weight: 800;">and</span> _vs.serie_estado != _const.maguita_serie_estado_anulado
              )
            <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _s )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __serie _s;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_load_conta_data {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_load_conta_data(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\**
              Essa função devolve uma mesa juntamente com as conta associada que ainda esta aberta
              filter := {
                with_client:boolean
                arg_posto_id: ID
                arg_espaco_auth: ID
                arg_colaborador_id: ID
                arg_conta_id: ID
              }
             \*\/</span>

        <span style="color: #888">--     arg_posto_id uuid  not null default filter-&gt;&gt;&#x27;arg_posto_id&#x27;;</span>
            arg_espaco_auth <span style="color: #C76A40">uuid</span>  <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
            arg_conta_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_conta_id&#x27;</span>;
            arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
            _with_client <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;with_client&#x27;</span>;

            _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
            _client <span style="color: #C76A40">jsonb</span>;
            _conta tweeks.conta;
            ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _with_client <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( c ) <span style="color: #C76A40;
            font-weight: 800;">into</span> _client
              <span style="color: #C76A40;
            font-weight: 800;">from</span> cliente c
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.conta ct <span style="color: #C76A40;
            font-weight: 800;">on</span> c.cliente_id = ct.conta_cliente_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_id = arg_conta_id
            ;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _client <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _client := jsonb_build_object();
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _conta
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
            <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_id = arg_conta_id
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span>
            __venda <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                v.venda_id,
                v.venda_conta_id,
                v.venda_venda_id,
                v.venda_quantidade,
                v.venda_custoquantidade,
                v.venda_custounitario,
                v.venda_montante,
                v.venda_montantesemimposto,
                v.venda_montantecomimposto,
                v.venda_montantetotal,
                v.venda_imposto,
                v.venda_impostoadicionar,
                v.venda_impostoretirar,
                v.venda_montanteagregado,
                v.venda_isencao,
                v.venda_estado,
                v.venda_estadopreparacao,
                v.venda_metadata,
                v.venda_descricao,
                v.venda_validade,
                v.venda_editado,
                v.venda_taxas,
                v.venda_lote,
                a.artigo_id,
                a.artigo_nome,
                a.artigo_codigo,
                a.artigo_compostoquantidade,
                a.artigo_artigo_id,
                u.unit_id,
                u.unit_code,
                u.unit_name,
                tx.taxa_percentagem,
                tx.taxa_taxa,
                tip.tipoimposto_id,
                tip.tipoimposto_codigo,
                tip.tipoimposto_nome
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.venda v
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo a <span style="color: #C76A40;
            font-weight: 800;">on</span> v.venda_artigo_id = a.artigo_id
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.taxa tx <span style="color: #C76A40;
            font-weight: 800;">on</span> tx.taxa_id = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( v.venda_taxas )
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.tipoimposto tip <span style="color: #C76A40;
            font-weight: 800;">on</span> tx.taxa_tipoimposto_id = tip.tipoimposto_id
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.unit u <span style="color: #C76A40;
            font-weight: 800;">on</span> a.artigo_unit_id = u.unit_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> v._branch_uid = ___branch
                <span style="color: #C76A40;
            font-weight: 800;">and</span> v.venda_estado <span style="color: #C76A40;
            font-weight: 800;">in</span> (
                   _const.maguita_venda_estado_aberto,
                   _const.maguita_venda_estado_fechado
                )
            ), __venda_group <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  v.venda_id <span style="color: #C76A40;
            font-weight: 800;">as</span> _venda_id,
                  v.venda_conta_id <span style="color: #C76A40;
            font-weight: 800;">as</span> _venda_conta_id,
                  coalesce( array_agg( vi <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> vi.artigo_nome ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> vi.venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> ),
                    <span style="color: #C76A40;
            font-weight: 800;">array</span>[]::<span style="color: #C76A40">record</span>[]
                  ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_itens
                <span style="color: #C76A40;
            font-weight: 800;">from</span>  tweeks.venda v
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo a <span style="color: #C76A40;
            font-weight: 800;">on</span> v.venda_artigo_id = a.artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> __venda vi <span style="color: #C76A40;
            font-weight: 800;">on</span> v.venda_id = vi.venda_venda_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> v.venda_estado <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.maguita_venda_estado_aberto,  _const.maguita_venda_estado_fechado )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> v.venda_venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> v.venda_conta_id = arg_conta_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> v.venda_estado <span style="color: #C76A40;
            font-weight: 800;">in</span> (
                    _const.maguita_venda_estado_aberto,
                    _const.maguita_venda_estado_fechado
                  )
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> v.venda_id, a.artigo_id
            ), __conta <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  c.conta_id,
                  c.conta_numero,
                  c.conta_numerofatura,
                  c.conta_montante,
                  c.conta_mesa,
                  c.conta_estado,
                  c.conta_serie,
                  c.conta_observacao,
                  c.conta_extension,
                  c.conta_props,
                  c.conta_serie_id,
                  c._tgrupo_id,
                  c.conta_data,
                  c.conta_dataregistro,
                  c.conta_conta_docorigin,
                  c.conta_titular,
                  c.conta_titularnif,
                  eur.*,
                  cb.cambio_id,
                  cb.cambio_taxa,
                  cb.cambio_data,
                  se.serie_id,
                  se.serie_designacao,
                  se.serie_numero,
                  ccl.cliente_id,
                  ccl.cliente_code,
                  ccl.cliente_nif,
                  ccl.cliente_titular,
                  ccl.cliente_metadata,
                  de.deposito_montante,
                  de.deposito_montantetroco,
                  de.deposito_montantefinal,
                  de.deposito_montantemoeda,
                  de.deposito_tpaga_id,
                  coalesce( corigen.conta_numerofatura, c.conta_docorigin ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_documentoorigem,
                  coalesce( corigen.conta_data, c.conta_datedocorigin ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_datedocorigin,
                  array_agg( to_jsonb( v )||to_jsonb( vg ) <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> v.artigo_nome ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_vendas,
                  ts.tserie_id,
                  ts.tserie_desc,
                  ts.tserie_code,
                  ts.tserie_financa
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta c
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> geoinfo.currency eur <span style="color: #C76A40;
            font-weight: 800;">on</span> c.conta_currency_id = eur.currency_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.cambio cb <span style="color: #C76A40;
            font-weight: 800;">on</span> c.conta_cambio_uid = cb.cambio_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.serie se <span style="color: #C76A40;
            font-weight: 800;">on</span> c.conta_serie_id = se.serie_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.tserie ts <span style="color: #C76A40;
            font-weight: 800;">on</span> se.serie_tserie_id = ts.tserie_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.cliente ccl <span style="color: #C76A40;
            font-weight: 800;">on</span> c.conta_cliente_id = ccl.cliente_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.conta corigen <span style="color: #C76A40;
            font-weight: 800;">on</span> c.conta_conta_docorigin = corigen.conta_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> __venda_group vg <span style="color: #C76A40;
            font-weight: 800;">on</span> c.conta_id = vg._venda_conta_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> __venda v <span style="color: #C76A40;
            font-weight: 800;">on</span> vg._venda_id = v.venda_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.deposito de <span style="color: #C76A40;
            font-weight: 800;">on</span> c.conta_id = (de.deposito_referencia-&gt;&gt;<span style="color: #4d99bf">&#x27;conta_id&#x27;</span>)::<span style="color: #C76A40">uuid</span>
                <span style="color: #C76A40;
            font-weight: 800;">where</span> c.conta_id = arg_conta_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> c._branch_uid = ___branch
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> c.conta_id, 
                  de.deposito_id,
                  ccl.cliente_id,
                  corigen.conta_id,
                  ts.tserie_id,
                  se.serie_id,
                  eur.currency_id,
                  cb.cambio_id
             ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( c ) || _client <span style="color: #C76A40;
            font-weight: 800;">from</span> __conta c
          ;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta._tgrupo_id = _const.maguita_tgrupo_cnormal <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return query</span>
              <span style="color: #C76A40;
            font-weight: 800;">with</span> __deposito <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    de.deposito_id,
                    de.deposito_montante,
                    de.deposito_montantemoeda,
                    de.deposito_montantetroco,
                    de.deposito_montantefinal,
                    de.deposito_taxacambio,
                    cu.currency_code,
                    cu.currency_id,
                    cu.currency_name,
                    tp.tpaga_id,
                    tp.tpaga_designacao,
                    p.posto_designacao,
                    p.posto_id,
                    cx.caixa_id
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.deposito de
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> geoinfo.currency cu <span style="color: #C76A40;
            font-weight: 800;">on</span> de.deposito_currency_id = cu.currency_id
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.tpaga tp <span style="color: #C76A40;
            font-weight: 800;">on</span> de.deposito_tpaga_id = tp.tpaga_id
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.caixa cx <span style="color: #C76A40;
            font-weight: 800;">on</span> de.deposito_caixa_id = cx.caixa_id
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.posto p <span style="color: #C76A40;
            font-weight: 800;">on</span> cx.caixa_posto_id = p.posto_id
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> (de.deposito_referencia-&gt;&gt;<span style="color: #4d99bf">&#x27;conta_id&#x27;</span>)::<span style="color: #C76A40">uuid</span> = _conta.conta_id
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> de._branch_uid = ___branch
              ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _de )
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __deposito _de
            ;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_link_associacao {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_link_associacao(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para
            args := {
              arg_colaborador_id: ID,
              arg_espaco_auth: ID
              arg_link_nome: NOME,
              arg_link_referencia: REF,
              arg_link_referenciareplace: boolean | default true, -- indica se todos os links apara esse referencia atual vão deixar de existir
              arg_links: [
                { arg_espaco_destino: ID  }
              ]
            }
           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
          arg_links <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span>  args-&gt;<span style="color: #4d99bf">&#x27;arg_links&#x27;</span>;
          arg_espacos <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> ( el.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_destino&#x27;</span> )::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( arg_links ) el( doc ));
          arg_link_referenciareplace <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_link_referenciareplace&#x27;</span>;

          arg_link_referencia <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_link_referencia&#x27;</span>;
          arg_link_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_link_nome&#x27;</span>;

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _link tweeks.link;
          _data <span style="color: #C76A40">record</span>;
          arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> arg_link_referencia-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_id&#x27;</span>;
          _artigo tweeks.artigo;
          _classe tweeks.classe;
          ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          _aux <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          arg_link_referenciareplace := coalesce( arg_link_referenciareplace, <span style="color: #C76A40;
            font-weight: 800;">true</span> );
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_artigo_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _artigo := tweeks._get_artigo( arg_artigo_id );
            _classe := tweeks._get_classe( _artigo.artigo_classe_id );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- Desativar desacociar todos dos espaços filhos que não estao na lista</span>
          <span style="color: #C76A40;
            font-weight: 800;">with</span> aux <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #888">-- listar todos os links que devem ser mortos</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.link
              <span style="color: #C76A40;
            font-weight: 800;">where</span> link_referencia @&gt; arg_link_referencia
                <span style="color: #C76A40;
            font-weight: 800;">and</span> link_estado = _const.maguita_link_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> link_tlink_id = _const.maguita_tlink_associacao
                <span style="color: #C76A40;
            font-weight: 800;">and</span> link_espaco_destino != <span style="color: #C76A40;
            font-weight: 800;">all</span> ( arg_espacos )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> link_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> _branch_uid = ___branch
                <span style="color: #C76A40;
            font-weight: 800;">and</span> arg_link_referenciareplace
          )
          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.link
            <span style="color: #C76A40;
            font-weight: 800;">set</span> link_estado = _const.maguita_link_estado_fechado,
                link_dataatualizacao = <span style="color: #397300">current_timestamp</span>,
                link_colaborador_atualizacao = arg_colaborador_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span> link_id <span style="color: #C76A40;
            font-weight: 800;">in</span> ( <span style="color: #C76A40;
            font-weight: 800;">select</span> link_id <span style="color: #C76A40;
            font-weight: 800;">from</span> aux )
              <span style="color: #C76A40;
            font-weight: 800;">or</span> link_link_associacao <span style="color: #C76A40;
            font-weight: 800;">in</span> ( <span style="color: #C76A40;
            font-weight: 800;">select</span> link_id <span style="color: #C76A40;
            font-weight: 800;">from</span> aux )
          ;

          <span style="color: #C76A40;
            font-weight: 800;">for</span> _data <span style="color: #C76A40;
            font-weight: 800;">in</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                ( it.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_destino&#x27;</span> )::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> arg_espaco_destino,
                ( it.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_link_custo&#x27;</span> )::<span style="color: #C76A40">numeric</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> arg_link_custo,
                ( it.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_link_quantidadecusto&#x27;</span> )::<span style="color: #C76A40">numeric</span> arg_link_quantidadecusto
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( arg_links ) it ( doc )
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.link l <span style="color: #C76A40;
            font-weight: 800;">on</span> it.doc @&gt; jsonb_build_object( <span style="color: #4d99bf">&#x27;arg_espaco_destino&#x27;</span>, l.link_espaco_destino )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_referencia @&gt; arg_link_referencia
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_estado = _const.maguita_link_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_tlink_id = _const.maguita_tlink_associacao
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> l._branch_uid = ___branch
              <span style="color: #C76A40;
            font-weight: 800;">where</span> l.link_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
          <span style="color: #C76A40;
            font-weight: 800;">loop</span>

            <span style="color: #888">-- Lincar os protudos ao espaço</span>
            <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.link (
              link_tlink_id,
              link_referencia,
              link_espaco_auth,
              link_espaco_destino,
              link_colaborador_id,
              link_posicao,
              link_nome,
              link_estado
            ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
              _const.maguita_tlink_associacao,
              arg_link_referencia,
              arg_espaco_auth,
              _data.arg_espaco_destino,
              arg_colaborador_id,
              <span style="color: #C76A40">-1</span>,
              arg_link_nome,
              _const.maguita_link_estado_ativo
            ) <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _link ;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> coalesce( _data.arg_link_quantidadecusto, <span style="color: #C76A40">0</span> ) = <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> coalesce( _data.arg_link_custo, <span style="color: #C76A40">0</span> ) = <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              _data.arg_link_quantidadecusto := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
              _data.arg_link_custo := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #888">-- Linkar tambem a classe quando for linkar o produto (adicionar o link da classe ao espaco se ainda não houver)</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _artigo.artigo_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * ) = <span style="color: #C76A40">0</span>
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.link lk
                <span style="color: #C76A40;
            font-weight: 800;">where</span> lk.link_espaco_destino = _data.arg_espaco_destino
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> lk.link_referencia @&gt; <span style="color: #C76A40;
            font-weight: 800;">rule</span>.classe_referencia( _classe.classe_id )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> lk.link_tlink_id = _const.maguita_tlink_associacao
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> lk.link_estado = _const.maguita_link_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> lk._branch_uid = ___branch
            ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #888">-- Criar o link para o destino</span>
              <span style="color: #C76A40;
            font-weight: 800;">perform</span> tweeks.funct_reg_link_associacao( jsonb_build_object(
                <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
                <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth,
                <span style="color: #4d99bf">&#x27;arg_link_nome&#x27;</span>, _classe.classe_nome,
                <span style="color: #4d99bf">&#x27;arg_link_referencia&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">rule</span>.classe_referencia( _classe.classe_id ),
                <span style="color: #4d99bf">&#x27;arg_link_referenciareplace&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">false</span>,
                <span style="color: #4d99bf">&#x27;arg_links&#x27;</span>, json_build_array( json_build_object(
                  <span style="color: #4d99bf">&#x27;arg_espaco_destino&#x27;</span>, _data.arg_espaco_destino
                ))
              ));
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #888">-- Quando for artigo linkar também os tipos de imposto ao espaco</span>
            <span style="color: #C76A40;
            font-weight: 800;">for</span> _aux <span style="color: #C76A40;
            font-weight: 800;">in</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.imposto ip
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.tipoimposto tip <span style="color: #C76A40;
            font-weight: 800;">on</span> ip.imposto_tipoimposto_id = tip.tipoimposto_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.link lk <span style="color: #C76A40;
            font-weight: 800;">on</span> lk.link_referencia @&gt; <span style="color: #C76A40;
            font-weight: 800;">rule</span>.tipoimposto_referencia( tip.tipoimposto_id )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> lk.link_estado = _const.maguita_link_estado_ativo
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> lk.link_espaco_destino = _data.arg_espaco_destino
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> lk.link_tlink_id = _const.maguita_tlink_associacao
                <span style="color: #C76A40;
            font-weight: 800;">where</span> _artigo.artigo_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ip._branch_uid = ___branch
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> lk._branch_uid = ___branch
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ip.imposto_artigo_id = _artigo.artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ip.imposto_estado = _const.maguita_imposto_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> lk.link_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
            <span style="color: #C76A40;
            font-weight: 800;">loop</span>
              <span style="color: #C76A40;
            font-weight: 800;">perform</span> tweeks.funct_reg_link_associacao( jsonb_build_object(
                  <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
                  <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth,
                  <span style="color: #4d99bf">&#x27;arg_link_nome&#x27;</span>, _aux.tipoimposto_nome,
                  <span style="color: #4d99bf">&#x27;arg_link_referencia&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">rule</span>.tipoimposto_referencia( _aux.tipoimposto_id ),
                  <span style="color: #4d99bf">&#x27;arg_link_referenciareplace&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">false</span>,
                  <span style="color: #4d99bf">&#x27;arg_links&#x27;</span>, json_build_array( json_build_object(
                    <span style="color: #4d99bf">&#x27;arg_espaco_destino&#x27;</span>, _data.arg_espaco_destino
                  ))
                ));
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span>  <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;link&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">array</span>(
              <span style="color: #C76A40;
            font-weight: 800;">select</span> l
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.link l
                <span style="color: #C76A40;
            font-weight: 800;">where</span> l.link_referencia @&gt; arg_link_referencia
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_estado = _const.maguita_link_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_tlink_id = _const.maguita_tlink_associacao
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> l._branch_uid = ___branch
            )
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __load_cambio_day {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__load_cambio_day(arg_espaco_auth <span style="color: #C76A40">uuid</span>, arg_currency_id <span style="color: #C76A40">smallint</span>, arg_cambio_data <span style="color: #C76A40">date</span>, _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>())
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(cambio_id <span style="color: #C76A40">uuid</span>, cambio_taxa <span style="color: #C76A40">numeric</span>, cambio_data <span style="color: #C76A40">date</span>, cambio_estado <span style="color: #C76A40">smallint</span>, cambio_dataregistro <span style="color: #C76A40">timestamp</span> <span style="color: #C76A40">with time zone</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">select</span>
              cb.cambio_id,
              cb.cambio_taxa,
              cb.cambio_data,
              cb.cambio_estado,
              cb.cambio_dataatualizacao
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.cambio cb
            <span style="color: #C76A40;
            font-weight: 800;">where</span> cb.cambio_currency_id = arg_currency_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> cb.cambio_data &lt;= coalesce( arg_cambio_data, <span style="color: #397300">current_date</span> )
              <span style="color: #C76A40;
            font-weight: 800;">and</span> cb.cambio_estado != _const.maguita_cambio_estado_anulado
              <span style="color: #C76A40;
            font-weight: 800;">and</span> cb.cambio_espaco_auth = arg_espaco_auth
            <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> cb.cambio_dataregistro <span style="color: #C76A40;
            font-weight: 800;">desc</span>
            <span style="color: #C76A40;
            font-weight: 800;">limit</span> <span style="color: #C76A40">1</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_sets_guia {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_sets_guia(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> guia
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\**
              args := {
                guia: tweeks.guia {
                  guia_toperacao_id: TOPERACAO,
                  guia_espaco_entrada: UID
                  guia_espaco_saida: UID
                  guia_tguia_id: TGUIA
                  guia_numero: NUMERO,
                  guia_metadata: { ... any data },
                  guia_dataoperacao: DATE,
                  guia_observacao: OBS,
                  guia_refs: { },
                  guia_refuid: UID
                  guia_refclass: string( regclass )

                },

                //Relativos a Guia
                custoguia: tweeks.custoguia[
                  custoguia_montante: MONTANTE,
                  custoguia_descricao: DESCRICAO PARA O CUSTO
                  custoguia_tcusto_id: 1 - DESPESA | 2 - RECEITA
                ],
                arg_colaborador_id uuid,
                arg_espaco_auth uuid
              }
             \*\/</span>
            _args tweeks.guia;
            arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
            arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
            _iNext tweeks.custoguia;
            _custoguia tweeks.custoguia;
            _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
            _branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
            _args := jsonb_populate_record( _args, args-&gt;<span style="color: #4d99bf">&#x27;guia&#x27;</span> );

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _args.guia_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              
              _args.guia_numero := tweeks.__generate_guia_code( _branch, _args.guia_toperacao_id );
              _args._braunc_uid := _branch;
              _args.guia_espaco_auth := arg_espaco_auth;
              _args.guia_colaborador_id := arg_colaborador_id;

              <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _args
                <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets_in( _args )
              ;
              <span style="color: #C76A40;
            font-weight: 800;">for</span> _iNext <span style="color: #C76A40;
            font-weight: 800;">in</span>
                <span style="color: #C76A40;
            font-weight: 800;">select</span> cg.*
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;custoguia&#x27;</span> ) e( doc )
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::tweeks.custoguia, e.doc ) cg <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
              <span style="color: #C76A40;
            font-weight: 800;">loop</span>
                _iNext.custoguia_colaborador_id := arg_colaborador_id;
                _iNext.custoguia_espaco_auth := arg_espaco_auth;
                _iNext.custoguia_guia_uid := _args.guia_uid;
                _iNext._branch_uid := _branch;
                <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _custoguia
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets_in( _iNext );
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
            <span style="color: #C76A40;
            font-weight: 800;">else</span>
              _args._braunc_uid := _branch;
              _args.guia_colaborador_atualizacao := arg_colaborador_id;
              _args.guia_dateupdate := arg_colaborador_id;

              <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _args
                <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets_up( _args )
              ;
              <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.custoguia
                <span style="color: #C76A40;
            font-weight: 800;">set</span> custoguia_estado = _const.maguita_custoguia_estado_canselado,
                    custoguia_dateupdate = clock_timestamp(),
                    custoguia_colaborador_atualizacao = arg_colaborador_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> custoguia_guia_uid = _args.guia_uid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> custoguia_estado = _const.maguita_custoguia_estado_ativo
              ;

              <span style="color: #C76A40;
            font-weight: 800;">for</span> _iNext <span style="color: #C76A40;
            font-weight: 800;">in</span>
                <span style="color: #C76A40;
            font-weight: 800;">select</span> cg.*
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;custoguia&#x27;</span> ) e( doc )
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::tweeks.custoguia, e.doc ) cg <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                <span style="color: #C76A40;
            font-weight: 800;">loop</span>
                  _iNext.custoguia_guia_uid := _args.guia_uid;
                  _iNext.custoguia_colaborador_id := arg_colaborador_id;
                  _iNext.custoguia_dateupdate := clock_timestamp();
                  <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _custoguia
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets_in( _iNext );
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">return</span> _args;
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_ordem_classe {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_ordem_classe(parms <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">boolean</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\** Essa função serve para caregar os artigos pelas sua categoria
              parms := [{
                parms_classe_id: ID
                parms_classe_position: SMALLINT
              }]
            \*\/</span>
            i <span style="color: #C76A40">jsonb</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">for</span> i <span style="color: #C76A40;
            font-weight: 800;">in</span> <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements(parms)
            <span style="color: #C76A40;
            font-weight: 800;">loop</span>
                <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.classe
                    <span style="color: #C76A40;
            font-weight: 800;">set</span>
                        classe_position = (i::<span style="color: #C76A40">jsonb</span> -&gt;&gt;<span style="color: #4d99bf">&#x27;parms_classe_position&#x27;</span>)::<span style="color: #C76A40">smallint</span>
                <span style="color: #C76A40;
            font-weight: 800;">where</span> classe_id = (i::<span style="color: #C76A40">jsonb</span> -&gt;&gt;<span style="color: #4d99bf">&#x27;parms_classe_id&#x27;</span>)::<span style="color: #C76A40">uuid</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_artigo {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks._get_artigo(arg_atigo_id <span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> artigo
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #888">-- Ess funcao serve para obter uma instancia de artigo</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">where</span> art.artigo_id = arg_atigo_id;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_classe {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_classe(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função cria uma nova classe
            args {
              arg_espaco_auth: ID
              arg_colaborador_id: ID
              arg_espacos:[{
                espaco_id: UID
              }]

              classe_id:UID     --Apenas para quando for editar
              classe_nome: NOME
              classe_foto: FOTO
              classe_classe_id: ID
            }
           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_classe_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lib.str_normalize( args-&gt;&gt;<span style="color: #4d99bf">&#x27;classe_nome&#x27;</span> );
          arg_classe_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;classe_id&#x27;</span>;
          _arg_espacos <span style="color: #C76A40">jsonb</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> e.doc <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;arg_espacos&#x27;</span> ) e( doc ) );
          arg_espacos_id <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> (e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;espaco_id&#x27;</span>)::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;arg_espacos&#x27;</span> ) e( doc ) );

          arg_espaco_child <span style="color: #C76A40">uuid</span>[];

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _classe tweeks.classe;
          _link tweeks.link;
          _links <span style="color: #C76A40">jsonb</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          arg_espaco_child := <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens_static( arg_espaco_auth );

          <span style="color: #888">-- Verificar se existe a instancia da classe</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _classe
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.classe cla
            <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #397300">public</span>.unaccent( lower( lib.str_normalize( cla.classe_nome ) ) ) = <span style="color: #397300">public</span>.unaccent( lower( lib.str_normalize( arg_classe_nome ) ))
          ;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _classe.classe_id = _const.classe_itemextra <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;Esse nome de categoria esta reservado!&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_classe_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _classe
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.classe c
              <span style="color: #C76A40;
            font-weight: 800;">where</span> c.classe_id = arg_classe_id;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _classe.classe_colaborador_id := arg_colaborador_id;
          _classe.classe_espaco_auth := (args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>)::<span style="color: #C76A40">uuid</span>;

          <span style="color: #888">-- select * into _classe from tweeks.classe;</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _classe
            <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets( _classe, replacer :=  args )
          ;


          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.link
            <span style="color: #C76A40;
            font-weight: 800;">set</span> link_estado = _const.maguita_link_estado_fechado,
                link_colaborador_atualizacao = arg_colaborador_id,
                link_dataatualizacao = <span style="color: #397300">current_timestamp</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> link_estado = _const.maguita_link_estado_ativo
              <span style="color: #C76A40;
            font-weight: 800;">and</span> link_tlink_id = _const.maguita_tlink_classe
              <span style="color: #C76A40;
            font-weight: 800;">and</span> link_referencia @&gt; lib.sets_ref( _classe )
              <span style="color: #C76A40;
            font-weight: 800;">and</span> link_espaco_destino = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
        <span style="color: #888">--       and link_espaco_destino != all( arg_espacos_id )</span>
          ;

          <span style="color: #888">-- Criar ligação com as classes</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> jsonb_agg( to_jsonb( e ) ) <span style="color: #C76A40;
            font-weight: 800;">into</span> _links
            <span style="color: #C76A40;
            font-weight: 800;">from</span> unnest( _arg_espacos ) e( doc )
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco esp <span style="color: #C76A40;
            font-weight: 800;">on</span>  e.doc @&gt; lib.sets_ref( esp )
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> lib.sets( _row := <span style="color: #C76A40;
            font-weight: 800;">null</span>::tweeks.link, replacer := e.doc|| jsonb_build_object(
                <span style="color: #4d99bf">&#x27;link_tlink_id&#x27;</span>, _const.maguita_tlink_classe,
                <span style="color: #4d99bf">&#x27;link_espaco_destino&#x27;</span>, esp.espaco_id,
                <span style="color: #4d99bf">&#x27;link_espaco_auth&#x27;</span>, arg_espaco_auth,
                <span style="color: #4d99bf">&#x27;link_colaborador_id&#x27;</span>, arg_colaborador_id,
                <span style="color: #4d99bf">&#x27;link_referencia&#x27;</span>, lib.sets_ref( _classe ),
                <span style="color: #4d99bf">&#x27;link_nome&#x27;</span>, format( <span style="color: #4d99bf">&#x27;Ligação da categoria %I com %I&#x27;</span>, _classe.classe_nome, esp.espaco_nome ),
                <span style="color: #4d99bf">&#x27;link_metadata&#x27;</span>, jsonb_build_object()
              ) ) <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true(jsonb_build_object(
            <span style="color: #4d99bf">&#x27;classe&#x27;</span>, _classe,
            <span style="color: #4d99bf">&#x27;links&#x27;</span>, _links
          ));
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_report_transacao {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_report_transacao(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para devolver dados para relatório de transação
            filter := {
              arg_data_registro: { start: DATE, end: DATE },
              arg_posto_id: ID,
              arg_tmovimento_id: ID,
              arg_toperacao_montante: ID,
              arg_colaborador_id: ID,
              arg_transacao_zerar: ID,
            }
           \*\/</span>
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          arg_data_registro_start <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_registro&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;start&#x27;</span>;
          arg_data_registro_end <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_registro&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;end&#x27;</span>;

          arg_posto_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_id&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );

          arg_tmovimento_id <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_tmovimento_id&#x27;</span>;
          arg_toperacao_montante <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_toperacao_montante&#x27;</span>;
          arg_transacao_zerar <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_transacao_zerar&#x27;</span>;
          arg_documento <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_documento&#x27;</span>;


        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> report <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> *,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> trans.transacao_zerar <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #4d99bf">&#x27;Zerado&#x27;</span>
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #4d99bf">&#x27;Lançado&#x27;</span>
                  <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> transacao_zerardesignacao,
                lib.str_normalize( format( <span style="color: #4d99bf">&#x27;%s %s&#x27;</span>, col.colaborador_nome, col.colaborador_apelido ) ) <span style="color: #C76A40;
            font-weight: 800;">as</span> colaborador_nomecompleto,
                <span style="color: #C76A40;
            font-weight: 800;">case</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> t.tmovimento_id = _const.tmovimento_credito <span style="color: #C76A40;
            font-weight: 800;">then</span> trans.transacao_montante <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> transacao_montantecredito,
                <span style="color: #C76A40;
            font-weight: 800;">case</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> t.tmovimento_id = _const.tmovimento_debito <span style="color: #C76A40;
            font-weight: 800;">then</span> trans.transacao_montante <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> transacao_montantedebito
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.transacao trans
                     <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.posto pos <span style="color: #C76A40;
            font-weight: 800;">on</span> trans.transacao_posto_id = pos.posto_id
                     <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.tmovimento t <span style="color: #C76A40;
            font-weight: 800;">on</span> trans.transacao_tmovimento_id = t.tmovimento_id
                     <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.toperacao top <span style="color: #C76A40;
            font-weight: 800;">on</span> trans.transacao_toperacao_id = top.toperacao_id
                     <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.colaborador col <span style="color: #C76A40;
            font-weight: 800;">on</span> trans.transacao_colaborador_id = col.colaborador_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> trans.transacao_dataregistro::<span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">between</span> coalesce( arg_data_registro_start,  trans.transacao_dataregistro::<span style="color: #C76A40">date</span> ) <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( arg_data_registro_end,  trans.transacao_dataregistro::<span style="color: #C76A40">date</span> )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> pos.posto_id = coalesce( arg_posto_id, pos.posto_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> t.tmovimento_id = coalesce( arg_tmovimento_id, t.tmovimento_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> top.toperacao_id = coalesce( arg_toperacao_montante, top.toperacao_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> trans.transacao_zerar = coalesce( arg_transacao_zerar, trans.transacao_zerar )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> col.colaborador_id = coalesce( arg_colaborador_id, col.colaborador_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> lower( <span style="color: #397300">public</span>.unaccent( trans.transacao_documento ) ) <span style="color: #C76A40;
            font-weight: 800;">like</span> <span style="color: #4d99bf">&#x27;%&#x27;</span>||lower( <span style="color: #397300">public</span>.unaccent( coalesce( arg_documento, trans.transacao_documento) ) )||<span style="color: #4d99bf">&#x27;%&#x27;</span>
                <span style="color: #C76A40;
            font-weight: 800;">and</span> trans.transacao_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> trans.transacao_dataregistro <span style="color: #C76A40;
            font-weight: 800;">asc</span>
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
              lib.jsonb_values( to_jsonb( r ) ,
                <span style="color: #4d99bf">&#x27;transacao_documento&#x27;</span>,
                <span style="color: #4d99bf">&#x27;transacao_zerardesignacao&#x27;</span>,
                <span style="color: #4d99bf">&#x27;transacao_montante&#x27;</span>,
                <span style="color: #4d99bf">&#x27;transacao_montantecredito&#x27;</span>,
                <span style="color: #4d99bf">&#x27;transacao_montantedebito&#x27;</span>,
                <span style="color: #4d99bf">&#x27;transacao_montanteinicial&#x27;</span>,
                <span style="color: #4d99bf">&#x27;transacao_montantefinal&#x27;</span>,
                <span style="color: #4d99bf">&#x27;transacao_observacao&#x27;</span>,
                <span style="color: #4d99bf">&#x27;transacao_dataregistro&#x27;</span>,
                <span style="color: #4d99bf">&#x27;posto_designacao&#x27;</span>,
                <span style="color: #4d99bf">&#x27;tmovimento_designacao&#x27;</span>,
                <span style="color: #4d99bf">&#x27;toperacao_designacao&#x27;</span>,
                <span style="color: #4d99bf">&#x27;colaborador_nome&#x27;</span>,
                <span style="color: #4d99bf">&#x27;colaborador_apelido&#x27;</span>,
                <span style="color: #4d99bf">&#x27;colaborador_nomecompleto&#x27;</span>
              ) <span style="color: #C76A40;
            font-weight: 800;">from</span> report r;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface viewargs_set {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.viewargs_set(key <span style="color: #C76A40">text</span>, element <span style="color: #C76A40">anyelement</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(param <span style="color: #C76A40">text</span>, <span style="color: #C76A40;
            font-weight: 800;">value</span> <span style="color: #C76A40">jsonb</span>, <span style="color: #C76A40">text</span> <span style="color: #C76A40">text</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">select</span> *
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.viewargs_sets( jsonb_build_object( key, element ));
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_mesa {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_mesa(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para atualizar informação da mesa
            args := {
              arg_mesa_id: ID,
              arg_colaborador_id: ID,
              arg_mesa_designacao: DESIGNACAO,
              arg_mesa_numero: DESIGNACAO,
              arg_mesa_lotacao: DESIGNACAO
            }
           \*\/</span>
          arg_mesa_designacao <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_mesa_designacao&#x27;</span>;
          arg_mesa_numero <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_mesa_numero&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_mesa_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_mesa_id&#x27;</span>;
          _mesa tweeks.mesa;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #888">-- Garantir que o numero de mesa seja unico</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * ) &gt; <span style="color: #C76A40">0</span>
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.mesa m
              <span style="color: #C76A40;
            font-weight: 800;">where</span> m.mesa_numero =  arg_mesa_numero
                <span style="color: #C76A40;
            font-weight: 800;">and</span> m.mesa_id != arg_mesa_id
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;@mesa.numero.already-exist&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.mesa
            <span style="color: #C76A40;
            font-weight: 800;">set</span> mesa_designacao = coalesce( arg_mesa_designacao, mesa_designacao ),
                mesa_numero = coalesce( arg_mesa_numero, mesa_numero ),
                mesa_colaborador_atualizacao = arg_colaborador_id,
                mesa_dataatualizacao = <span style="color: #397300">current_timestamp</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> mesa_id = arg_mesa_id
            <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _mesa
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;mesa&#x27;</span>, _mesa
          );

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_link_disable {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_link_disable(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para desativar uma link
            args := {
              arg_link_id: ID,
              arg_colaborador_id: ID
            }
           \*\/</span>

          arg_link_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_link_id&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _link tweeks.link;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">lock</span> tweeks.link <span style="color: #C76A40;
            font-weight: 800;">in</span> <span style="color: #C76A40;
            font-weight: 800;">share mode</span>;

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _link := tweeks._get_link( arg_link_id );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _link.link_estado != _const.link_estado_ativo <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;@tweeks.link.is-closed&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- Fechar os links e os sublink associados a esse</span>
          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.link
            <span style="color: #C76A40;
            font-weight: 800;">set</span> link_estado = _const.link_estado_fechado,
                link_colaborador_atualizacao = arg_colaborador_id,
                link_dataatualizacao = <span style="color: #397300">current_timestamp</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> link_id <span style="color: #C76A40;
            font-weight: 800;">in</span> (
              <span style="color: #C76A40;
            font-weight: 800;">with</span> <span style="color: #C76A40;
            font-weight: 800;">recursive</span> aux <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                  <span style="color: #C76A40;
            font-weight: 800;">select</span> a.link_id
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.link a
                    <span style="color: #C76A40;
            font-weight: 800;">where</span> a.link_id = arg_link_id
                <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
                  <span style="color: #C76A40;
            font-weight: 800;">select</span> a2.link_id
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.link a2
                      <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> aux <span style="color: #C76A40;
            font-weight: 800;">on</span> a2.link_link_id = aux.link_id
                    <span style="color: #C76A40;
            font-weight: 800;">where</span> a2.link_estado = _const.link_estado_ativo
              )
              <span style="color: #C76A40;
            font-weight: 800;">select</span> link_id
                <span style="color: #C76A40;
            font-weight: 800;">from</span> aux
            );

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;link&#x27;</span>, _link
          );

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_entrada {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_entrada(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(entrada_id <span style="color: #C76A40">uuid</span>, entrada_data <span style="color: #C76A40">date</span>, entrada_codigofatura <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, entrada_quantidade <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, entrada_montante <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, entrada_descricao <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, entrada_estado <span style="color: #C76A40">smallint</span>, entrada_dataregistro <span style="color: #C76A40">timestamp</span> <span style="color: #C76A40">with time zone</span>, entrada_dataatualizacao <span style="color: #C76A40">timestamp</span> <span style="color: #C76A40">with time zone</span>, artigo_id <span style="color: #C76A40">uuid</span>, artigo_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, artigo_codigo <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, espaco_id <span style="color: #C76A40">uuid</span>, espaco_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, fornecedor_id <span style="color: #C76A40">uuid</span>, fornecedor_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, fornecedor_nif <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
              Essa função serve para listar as entradas de artigos no stock
              filter := {
                arg_fornecedor_id: ID,
                arg_artigo_id: ID,
                arg_local_id: ID,
              }
           \*\/</span>

          arg_fornecedor_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_fornecedor_id&#x27;</span>;
          arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;&gt; <span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span>;
          arg_espaco_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                ent.entrada_id ,
                ent.entrada_data,
                ent.entrada_codigofatura,
                ent.entrada_quantidade,
                ent.entrada_montante,
                ent.entrada_descricao,
                ent.entrada_estado,
                ent.entrada_dataregistro,
                ent.entrada_dataatualizacao,

                art.artigo_id,
                art.artigo_nome,
                art.artigo_codigo,

                esp.espaco_id,
                esp.espaco_nome,

                forn.fornecedor_id,
                forn.fornecedor_nome,
                forn.fornecedor_nif
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.entrada ent
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> ent.entrada_artigo_id = art.artigo_id
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco esp <span style="color: #C76A40;
            font-weight: 800;">on</span> ent.entrada_espaco_id = esp.espaco_id
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.fornecedor forn <span style="color: #C76A40;
            font-weight: 800;">on</span> ent.entrada_fornecedor_id = forn.fornecedor_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> forn.fornecedor_id = coalesce( arg_fornecedor_id, forn.fornecedor_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_id = coalesce( arg_artigo_id, art.artigo_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> esp.espaco_id = coalesce( arg_espaco_id, esp.espaco_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> forn.fornecedor_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ent.entrada_data <span style="color: #C76A40;
            font-weight: 800;">desc</span>,
                ent.entrada_dataregistro <span style="color: #C76A40;
            font-weight: 800;">desc</span>
            ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_conta {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_conta(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            \/\**
              Essa função registra um nova conta
              arg = {

                -- obrigatorios
                arg_colaborador_id: ID,
                arg_conta_id: ID,
                arg_espaco_auth: ID,
                arg_posto_id: ID,
                arg_mesa_numero: NUMERO,


                -- requerido
                arg_vendas: [
                  {
                    arg_venda_id: ID,
                    arg_artigo_id: ID,
                    arg_venda_quantidade: QUANT,
                    arg_venda_custounitario: CUSTO,

                    arg_agregas: [
                      {
                        arg_agrega_id: ID,
                        arg_item_id: ID,
                        arg_item_quantidadecusto: QUANT/CUSTO
                        arg_item_custo: CUSTO,
                        arg_agrega_quantidade: QUANT,
                        arg_agrega_montante: MONTANTE
                      }
                    ]
                  }
                ]
              }
             \*\/</span>
           \*\/

          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_conta_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_conta_id&#x27;</span>;
          arg_posto_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_id&#x27;</span>;

          arg_mesa_numero <span style="color: #C76A40">varchar</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_mesa_numero&#x27;</span>;
          arg_vendas <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_vendas&#x27;</span>;

          arg_reserva_id <span style="color: #C76A40">uuid</span>  <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_reserva_id&#x27;</span>;
          arg_currency_id <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_currency_id&#x27;</span>;
          arg_tpaga_id <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_tpaga_id&#x27;</span>;
          arg_conta_titular <span style="color: #C76A40">varchar</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_conta_titular&#x27;</span>;
          arg_conta_data <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_conta_data&#x27;</span>;

          arg_vendas_id <span style="color: #C76A40">uuid</span> [] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> ( ele.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_venda_id&#x27;</span> )::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( arg_vendas ) ele( doc ) <span style="color: #C76A40;
            font-weight: 800;">where</span> ele.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_venda_id&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> );

          _conta tweeks.conta;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _mesa tweeks.mesa;
          _res lib.result;
          _data <span style="color: #C76A40">record</span>;
          _data_item <span style="color: #C76A40">record</span>;
          _stock tweeks.stock;

          arg_venda_add <span style="color: #C76A40">jsonb</span>;
          arg_venda_change <span style="color: #C76A40">jsonb</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _conta := tweeks._get_conta( arg_conta_id );
          _mesa := tweeks._get_mesa( arg_colaborador_id, arg_espaco_auth, arg_mesa_numero );
          _mesa.mesa_estado := coalesce( _mesa.mesa_estado, _const.mesa_estado_disponivel );
          _mesa.mesa_id := coalesce( _mesa.mesa_id, <span style="color: #C76A40">-1</span> );

        <span style="color: #888">--   -- A mesa tem de estar disponivel para associa-la a conta</span>
        <span style="color: #888">--   if _conta.conta_mesa_id != _mesa.mesa_id and _mesa.mesa_estado != _const.mesa_estado_disponivel then</span>
        <span style="color: #888">--     return false ? &#x27;@tweeks.conta.mesa.estado.not-open&#x27;;</span>
        <span style="color: #888">--   end if;</span>


          <span style="color: #888">-- Validar as vendas e distirgir quais vão ser atualizado, e quais vão ser registrados e quais não vão ter acão</span>
          <span style="color: #C76A40;
            font-weight: 800;">for</span> _data <span style="color: #C76A40;
            font-weight: 800;">in</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
            <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( arg_vendas ) v( venda_document )
             <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> jsonb_to_record( v.venda_document ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venl(
                arg_venda_id <span style="color: #C76A40">int</span>,
                arg_artigo_id <span style="color: #C76A40">int</span>,
                arg_venda_quantidade <span style="color: #C76A40">float</span>,
                arg_venda_custounitario <span style="color: #C76A40">float</span>,
                arg_agregas <span style="color: #C76A40">jsonb</span>
              ) <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                   <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> venl.arg_artigo_id = art.artigo_id
                   <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.venda ve <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_id = ve.venda_artigo_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_id = venl.arg_venda_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_estado = _const.venda_estado_aberto
            <span style="color: #C76A40;
            font-weight: 800;">loop</span>

              <span style="color: #C76A40;
            font-weight: 800;">if</span> _data.venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                arg_venda_change := coalesce( arg_venda_change, jsonb_build_array());
                arg_venda_change := arg_venda_change || (_data.venda_document );
              <span style="color: #C76A40;
            font-weight: 800;">else</span>
                arg_venda_add := coalesce( arg_venda_add, jsonb_build_array() );
                arg_venda_add := arg_venda_add || _data.venda_document;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

          <span style="color: #888">-- canselar todas as vendas não removidas da conta</span>
          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.venda
          <span style="color: #C76A40;
            font-weight: 800;">set</span> venda_estado = _const.venda_estado_canselado,
              venda_colaborador_atualizacao = arg_colaborador_id,
              venda_dataatualizacao = <span style="color: #397300">current_timestamp</span>
          <span style="color: #C76A40;
            font-weight: 800;">where</span> venda_id != <span style="color: #C76A40;
            font-weight: 800;">all</span> ( arg_vendas_id )
            <span style="color: #C76A40;
            font-weight: 800;">and</span> venda_conta_id = arg_conta_id
            <span style="color: #C76A40;
            font-weight: 800;">and</span> venda_estado = _const.venda_estado_aberto
          ;

          <span style="color: #888">-- Alterar as vendas antigas</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_venda_change <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>

            <span style="color: #C76A40;
            font-weight: 800;">perform</span> tweeks.funct_change_venda(
              jsonb_build_object(
                <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
                <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth,
                <span style="color: #4d99bf">&#x27;arg_message_error&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">true</span>,
                <span style="color: #4d99bf">&#x27;arg_conta_id&#x27;</span>, arg_conta_id,
                <span style="color: #4d99bf">&#x27;arg_vendas&#x27;</span>, arg_venda_change
              )
            );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_venda_add <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">perform</span> tweeks.funct_reg_venda(
              jsonb_build_object(
                <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
                <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth,
                <span style="color: #4d99bf">&#x27;arg_message_error&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">true</span>,
                <span style="color: #4d99bf">&#x27;arg_conta_id&#x27;</span>, arg_conta_id,
                <span style="color: #4d99bf">&#x27;arg_vendas&#x27;</span>, arg_venda_add
              )
            );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- Quando houver alteração da mesa então mover a conta para outra mesa</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta.conta_mesa_id != _mesa.mesa_id <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.conta
              <span style="color: #C76A40;
            font-weight: 800;">set</span> conta_mesa_id = _mesa.mesa_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> conta_id = _conta.conta_id
                  <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _conta;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? _res.message || jsonb_build_object(
            <span style="color: #4d99bf">&#x27;conta&#x27;</span>, _conta,
            <span style="color: #4d99bf">&#x27;venda&#x27;</span>, ( <span style="color: #C76A40;
            font-weight: 800;">with</span> asVend <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( ve ) || jsonb_build_object( <span style="color: #4d99bf">&#x27;agrega&#x27;</span>, jsonb_agg( a ) )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.venda ve
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span>  agrega a <span style="color: #C76A40;
            font-weight: 800;">on</span> ve.venda_id = a.agrega_venda_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> a.agrega_estado = _const.agrega_estado_aberto
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ve.venda_conta_id = _conta.conta_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_estado = _const.venda_estado_aberto
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ve.venda_id
              ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
                array_agg( to_jsonb( av ) ) <span style="color: #C76A40;
            font-weight: 800;">from</span> asVend aV
            )
          );

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_sets_branch {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_sets_branch(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args: {
               branch_uid?
               arg_colaborador_id : UID,
               arg_espaco_id : UID
               branch_tbranch_id
               branch_name
               branch_path
               branch_user := { ESTRUTURA DE CRIAÇÃO DO COLABORADOR | ESTRUTURA DE ATUALIZACAO DE COLABORADOR  }
               branch_workspace := { ESTRUTURA DE CRIAÇÃO DO ESPACO | ESTRUTURA DE ATUALIZACAO DE ESPACO  }
               branch_licence
               branch_clusters
               branch_grants : { menu: [ MENU-ID-1, MENU-ID-2, MENU-ID-3, MENU-ID-4 ] }
            }
           \*\/</span>
          _result <span style="color: #C76A40">record</span>;
          _branch <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.branch;
          OPERATION_INSERT <span style="color: #C76A40">char</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;I&#x27;</span>;
          OPERATION_UPDATE <span style="color: #C76A40">char</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;U&#x27;</span>;
          _colaborator lib.result;
          _espaco lib.result;
          _args <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.branch;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _all_space <span style="color: #C76A40">record</span>;
          _arg_menu_list <span style="color: #C76A40">jsonb</span>;

          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_id&#x27;</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _args := jsonb_populate_record( _args, args );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _args.branch_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _args.branch_user := jsonb_build_object( <span style="color: #4d99bf">&#x27;creator&#x27;</span>, _args.branch_user );
            _args.branch_workspace := jsonb_build_object( <span style="color: #4d99bf">&#x27;creator&#x27;</span>, _args.branch_workspace );
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _branch
            <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.branch b
            <span style="color: #C76A40;
            font-weight: 800;">where</span> b.branch_uid = _args.branch_uid
            ;
            _args.branch_user := _branch.branch_user || jsonb_build_object( <span style="color: #4d99bf">&#x27;updater&#x27;</span>, _args.branch_user );
            _args.branch_workspace := _branch.branch_workspace || jsonb_build_object( <span style="color: #4d99bf">&#x27;updater&#x27;</span>, _args.branch_workspace );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">select</span>
            s.*,
            ( s.&quot;returning&quot;::<span style="color: #C76A40;
            font-weight: 800;">cluster</span>.branch).*
          <span style="color: #C76A40;
            font-weight: 800;">into</span> _result
          <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets( _args ) s
          ;

          _branch := _result.&quot;returning&quot;;

          <span style="color: #888">-- Quando um novo branch for criado</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> ( regexp_split_to_array( upper( _result.operation ), <span style="color: #4d99bf">&#x27;&#x27;</span> ) )[<span style="color: #C76A40">1</span>] = OPERATION_INSERT <span style="color: #C76A40;
            font-weight: 800;">then</span>

            _espaco := tweeks.funct_reg_espaco( (_branch.branch_workspace-&gt;<span style="color: #4d99bf">&#x27;creator&#x27;</span>)||jsonb_build_object(
                <span style="color: #4d99bf">&#x27;arg_branch_uid&#x27;</span>, _branch.branch_uid
              ));

            <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _espaco.result <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;%&#x27;</span>, _espaco;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            _branch.branch_main_workspace := ( _espaco.message-&gt;<span style="color: #4d99bf">&#x27;espaco&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;espaco_id&#x27;</span>);

            _colaborator := tweeks.funct_reg_colaborador(  ( _branch.branch_user-&gt;<span style="color: #4d99bf">&#x27;creator&#x27;</span> )|| jsonb_build_object(
                <span style="color: #4d99bf">&#x27;arg_branch_uid&#x27;</span>, _branch.branch_uid,
                <span style="color: #4d99bf">&#x27;arg_colaborador_tipo&#x27;</span>, _const.colaborador_tipo_user_master,
                <span style="color: #4d99bf">&#x27;arg_espaco&#x27;</span>, jsonb_build_array(
                    jsonb_build_object( <span style="color: #4d99bf">&#x27;arg_espaco_id&#x27;</span>, _branch.branch_main_workspace )
                  )
              ));

            <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _colaborator.result <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;%&#x27;</span>, _colaborator;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            _branch.branch_main_user :=  ( _colaborator.message-&gt;<span style="color: #4d99bf">&#x27;colaborador&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;colaborador_id&#x27;</span>);

            <span style="color: #C76A40;
            font-weight: 800;">with</span> __news_space <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.espaco e
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.trabalha tr <span style="color: #C76A40;
            font-weight: 800;">on</span> e.espaco_id = tr.trabalha_espaco_destino
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> tr.trabalha_estado = _const.transferencia_estado_ativo
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> tr.trabalha_colaborador_proprietario = lib.to_uuid( <span style="color: #C76A40">2</span> )
                <span style="color: #C76A40;
            font-weight: 800;">where</span> tr.trabalha_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> e.espaco_nivel &lt;= <span style="color: #C76A40">1</span>
            ) <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.trabalha(
              trabalha_espaco_destino,
              trabalha_espaco_auth,
              trabalha_colaborador_proprietario,
              trabalha_colaborador_id
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
                n.espaco_id,
                lib.to_uuid( <span style="color: #C76A40">1</span> ),
                lib.to_uuid( <span style="color: #C76A40">2</span> ),
                lib.to_uuid( <span style="color: #C76A40">1</span> )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __news_space n
            ;

            <span style="color: #888">-- Mapear o colaborador e o espaco principal no branch</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> (  &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _branch
            <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets_up( _branch, <span style="color: #C76A40;
            font-weight: 800;">ref</span> := lib.sets_ref( _branch) )
            ;
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            _arg_menu_list := _branch.branch_user-&gt;<span style="color: #4d99bf">&#x27;updater&#x27;</span>-&gt;<span style="color: #4d99bf">&#x27;arg_menu_list&#x27;</span>;

            _colaborator := tweeks.funct_change_colaborador(  ( _branch.branch_user-&gt;<span style="color: #4d99bf">&#x27;updater&#x27;</span> )|| jsonb_build_object(
                <span style="color: #4d99bf">&#x27;arg_colaborador_tipo&#x27;</span>, _const.colaborador_tipo_user_master,
                <span style="color: #4d99bf">&#x27;arg_espaco&#x27;</span>, jsonb_build_array(
                    jsonb_build_object( <span style="color: #4d99bf">&#x27;arg_espaco_id&#x27;</span>, _branch.branch_main_workspace )
                  )
              ));

            <span style="color: #C76A40;
            font-weight: 800;">perform</span> auth.funct_reg_acesso(
                jsonb_build_object(
                    <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
                    <span style="color: #4d99bf">&#x27;arg_colaborador_propetario&#x27;</span>, _branch.branch_main_user,
                    <span style="color: #4d99bf">&#x27;arg_menu_list&#x27;</span>, _arg_menu_list,
                    <span style="color: #4d99bf">&#x27;_branch_uid&#x27;</span>, _branch.branch_uid
                  )
              );
            _espaco  := tweeks.funct_change_espaco( _branch.branch_workspace-&gt;<span style="color: #4d99bf">&#x27;updater&#x27;</span> || jsonb_build_object(
              <span style="color: #4d99bf">&#x27;xBranch&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">true</span>
            ));
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true( jsonb_build_object(
            <span style="color: #4d99bf">&#x27;branch&#x27;</span>, _branch
            ) || coalesce( _colaborator.message, jsonb_build_object() ) || coalesce( _espaco.message, jsonb_build_object() ) );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __generate_acerto_code {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__generate_acerto_code(brc <span style="color: #C76A40">uuid</span>, user_brc <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>, space_brc <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _code <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;
          _len <span style="color: #C76A40">int</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40">6</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _cluster := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local();
          brc := coalesce( brc, tweeks.__branch_uid( user_brc, space_brc ));

          <span style="color: #C76A40;
            font-weight: 800;">while</span> _code <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>
              _code := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.next( <span style="color: #4d99bf">&#x27;acerto.code/seq&#x27;</span>, sub := brc::<span style="color: #C76A40">text</span>, lpad := _len, lpad_char := <span style="color: #4d99bf">&#x27;0&#x27;</span> );
              <span style="color: #C76A40;
            font-weight: 800;">if</span>( <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
                  <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.acerto c
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> c.acerto_codigo = _code
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> c._branch_uid = coalesce( brc, c._branch_uid )
                )) <span style="color: #C76A40;
            font-weight: 800;">then</span>
                _code := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
          <span style="color: #C76A40;
            font-weight: 800;">return</span> _code;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_artigo {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_artigo(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\**
              Essa funçao serve para registar os artigos associado aos seus item extras
              {
                ///PARA-QUANDO-FOR-COMPOSTO
                    artigo_artigo_id: ID
                    artigo_compostoquantidade:DOUBLE
                PARA-QUANDO-FOR-COMPOSTO//

                artigo_classe_id: ID,
                artigo_codigo: CODIGO,
                artigo_nome: NOME,
                artigo_preparacao: TRUE|FALSE,
                artigo_stocknegativo: TRUE|FALSE,
                artigo_foto: FOTO,
                artigo_descricao: DESCRICAO,

                --
                artigo_id: ID

                arg_colaborador_id: ID,
                arg_espaco_auth: ID

                arg_items: [
                  @id/item_id,
                  @id/item_id,
                  @id/item_id
                ],

                arg_links: [
                  { espaco_id: ID, precario_custo: CUSTO, precario_quantidade: QUANT_CUSTO, stock_minimo:QUANT }
                ],

                arg_imposto: [ {
                    arg_tipoimposto_id: ID,
                    arg_taplicar_id: ID,
                    arg_imposto_valor: VALOR, # Por equanto envie null
                    arg_imposto_percentagem: PERCENTAGEM, # Por enquanto envie null
                }],

                arg_ean_codes: [ { ean_code:*CODE, ean_dateout:DATE|NULL, ean_datein:DATE|NULL } ]
                arg_ean_disable: [ CODES ]
              }
             \*\/</span>

            arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_id&#x27;</span>;
            arg_artigo_compostoid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_artigo_id&#x27;</span>;
            arg_artigo_compostoquantidade <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_compostoquantidade&#x27;</span>;
            arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
            arg_classe_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_classe_id&#x27;</span>;
            arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
            arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );

            arg_artigo_codigo <span style="color: #C76A40">varchar</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>  <span style="color: #C76A40;
            font-weight: 800;">default</span> lib.str_normalize( args-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_codigo&#x27;</span> );

            _artigo tweeks.artigo;
            _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
            _res_precario lib.result;
            _result lib.result;
            _branch <span style="color: #C76A40">uuid</span> := tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
            _args tweeks.artigo;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          
            <span style="color: #C76A40;
            font-weight: 800;">if</span> jsonb_typeof(args-&gt;<span style="color: #4d99bf">&#x27;artigo_codigoimposto&#x27;</span> ) != <span style="color: #4d99bf">&#x27;object&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                args := args || jsonb_build_object( <span style="color: #4d99bf">&#x27;artigo_codigoimposto&#x27;</span>, jsonb_build_object(
                  <span style="color: #4d99bf">&#x27;FATURACAO&#x27;</span>, args-&gt;<span style="color: #4d99bf">&#x27;artigo_codigoimposto&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;NOTACREDITO&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">null</span>,
                  <span style="color: #4d99bf">&#x27;NOTADEBITO&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">null</span>
                ));
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
            _args := jsonb_populate_record( _args, args );
            _artigo := tweeks._get_artigo( _args.artigo_id );

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _args.artigo_classe_id = _const.classe_itemextra <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;Não pode registar um item extra!&#x27;</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #888">-- Nome não pode ser duplicado</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * ) &gt; <span style="color: #C76A40">0</span>
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo art
                <span style="color: #C76A40;
            font-weight: 800;">where</span> lib.str_normalize( <span style="color: #397300">public</span>.unaccent( lower ( art.artigo_nome ) ) ) = lib.str_normalize( <span style="color: #397300">public</span>.unaccent( lower ( _args.artigo_nome ) ) )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> art._branch_uid = _branch
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_id::<span style="color: #C76A40">text</span> != coalesce( arg_artigo_id::<span style="color: #C76A40">text</span>, art.artigo_id||<span style="color: #4d99bf">&#x27;!?&#x27;</span> )
            ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;Nome do artigo já existe!&#x27;</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #888">-- Quando o artigo for novo</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _artigo.artigo_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #888">-- Avaliar a composição do artigo</span>
              <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_artigo_compostoid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> ( arg_artigo_compostoquantidade <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> arg_artigo_compostoquantidade = <span style="color: #C76A40">0</span> ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;Para artigos composto, é necessario expecificar a quantidade do itens a compor&#x27;</span>;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

              _args.artigo_colaborador_id := arg_colaborador_id;
              _args.artigo_espaco_auth := arg_espaco_auth;
              _args.artigo_dataregistro := clock_timestamp();
            <span style="color: #C76A40;
            font-weight: 800;">else</span>
              _args.artigo_colaborador_id := _artigo.artigo_colaborador_id;
              _args.artigo_espaco_auth := _artigo.artigo_espaco_auth;
              _args.artigo_dataregistro := _artigo.artigo_dataregistro;
              _args.artigo_colaborador_atualizacao := arg_colaborador_id;
              _args.artigo_dataatualizacao := clock_timestamp();
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #888">-- Garantir que o codigo do artigo não seja duplicado</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _args.artigo_codigo <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * ) &gt; <span style="color: #C76A40">0</span>
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo art
              <span style="color: #C76A40;
            font-weight: 800;">where</span> lib.str_normalize( lower( art.artigo_codigo ) ) = lib.str_normalize( lower( _args.artigo_codigo ) )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_id::<span style="color: #C76A40">text</span> != coalesce( arg_artigo_id::<span style="color: #C76A40">text</span>, art.artigo_id||<span style="color: #4d99bf">&#x27;!?&#x27;</span> )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
            ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;Código do artigo já existe!&#x27;</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _args.artigo_codigo <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              _args.artigo_codigo := tweeks.__generate_artigo_code( _args.artigo_classe_id );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _artigo
              <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets( _args, jsonb_build_object(
                <span style="color: #4d99bf">&#x27;artigo_artigo_id&#x27;</span>, _args.artigo_artigo_id,
                <span style="color: #4d99bf">&#x27;artigo_compostoquantidade&#x27;</span>, _args.artigo_compostoquantidade
              ))
            ;

            _result := tweeks.funct_reg_dispoe(
              jsonb_build_object(
                <span style="color: #4d99bf">&#x27;arg_atrigo_id&#x27;</span>, _artigo.artigo_id,
                <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth,
                <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
                <span style="color: #4d99bf">&#x27;arg_items&#x27;</span>, args-&gt;<span style="color: #4d99bf">&#x27;arg_items&#x27;</span>
              )
            );

            _res_precario := tweeks.funct_reg_precario(
                jsonb_build_object(
                <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth,
                <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
                <span style="color: #4d99bf">&#x27;arg_forced&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">true</span>,
                <span style="color: #4d99bf">&#x27;arg_precario_referencia&#x27;</span>, lib.sets_ref( _artigo ),
                <span style="color: #4d99bf">&#x27;arg_links&#x27;</span>, args-&gt;<span style="color: #4d99bf">&#x27;arg_links&#x27;</span>
              )
            );

            <span style="color: #C76A40;
            font-weight: 800;">perform</span> tweeks.funct_reg_imposto(
            jsonb_build_object(
                <span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span>, _artigo.artigo_id,
                <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
                <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth,
                <span style="color: #4d99bf">&#x27;arg_imposto&#x27;</span>, args-&gt;<span style="color: #4d99bf">&#x27;arg_imposto&#x27;</span>
              )
            );

            <span style="color: #C76A40;
            font-weight: 800;">perform</span> tweeks.funct_reg_ean( jsonb_build_object(
              <span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span>, _artigo.artigo_id,
              <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth,
              <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
              <span style="color: #4d99bf">&#x27;arg_ean_codes&#x27;</span>, coalesce( args-&gt;<span style="color: #4d99bf">&#x27;arg_ean_codes&#x27;</span>, jsonb_build_array() ),
              <span style="color: #4d99bf">&#x27;arg_ean_disable&#x27;</span>, coalesce( args-&gt;<span style="color: #4d99bf">&#x27;arg_ean_disable&#x27;</span>, jsonb_build_array() )
            ));

            _result.message := _result.message || _res_precario.message || jsonb_build_object(
                <span style="color: #4d99bf">&#x27;artigo&#x27;</span>, _artigo
            );

            <span style="color: #C76A40;
            font-weight: 800;">return</span> _result;

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
            <span style="color: #C76A40;
            font-weight: 800;">begin</span>
                <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
                <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
            <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface sets_parametrizacao {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.sets_parametrizacao(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**doc
            args := {
              arg_colaborador_id:UID
              arg_espaco_auth: UID,
              parametrizacao_uid?
              parametrizacao_props
              parametrizacao_tags* varchar[],
              parametrizacao_estado?
            }
           doc\*\/</span>
          _user_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          _espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( _user_id, _espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _parametrizacao tweeks.parametrizacao;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _parametrizacao := jsonb_populate_record( _parametrizacao, args );
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _parametrizacao.parametrizacao_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _parametrizacao.parametrizacao_user_uid := _user_id;
            _parametrizacao.parametrizacao_espaco_auth := _espaco_auth;
            _parametrizacao._branch_uid := ___branch;
          <span style="color: #C76A40;
            font-weight: 800;">else</span> 
            _parametrizacao.parametrizacao_user_update := _user_id;
            _parametrizacao.parametrizacao_dateupdate := clock_timestamp();
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* 
            <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets( _parametrizacao )
            <span style="color: #C76A40;
            font-weight: 800;">into</span> _parametrizacao
          ;
          
          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true( jsonb_build_object(
            <span style="color: #4d99bf">&#x27;parametrizacao&#x27;</span>, _parametrizacao
          ));
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __sets_defaults_units {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__sets_defaults_units(___branch <span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$ 
          <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            document <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;[
          {
            &quot;unit_base&quot;: &quot;518f2d5c-352d-4011-b17a-b349de5d6919&quot;,
            &quot;unit_code&quot;: &quot;Unit&quot;,
            &quot;unit_name&quot;: &quot;Unidades&quot;
          },
          {
            &quot;unit_base&quot;: &quot;a20f0dbb-1ce9-45ee-b885-ec48f4c33632&quot;,
            &quot;unit_code&quot;: &quot;KG&quot;,
            &quot;unit_name&quot;: &quot;Kilogramas&quot;
          },
          {
            &quot;unit_base&quot;: &quot;d169ba13-590d-443c-812c-441af1ee014d&quot;,
            &quot;unit_code&quot;: &quot;G&quot;,
            &quot;unit_name&quot;: &quot;Gramas&quot;
          },
          {
            &quot;unit_base&quot;: &quot;79651d0d-476a-481b-9f6c-366297525691&quot;,
            &quot;unit_code&quot;: &quot;T&quot;,
            &quot;unit_name&quot;: &quot;Toneladas&quot;
          },
          {
            &quot;unit_base&quot;: &quot;3ffba798-fa68-4ece-a15c-264df6453c6c&quot;,
            &quot;unit_code&quot;: &quot;PAC&quot;,
            &quot;unit_name&quot;: &quot;Pacotes&quot;
          },
          {
            &quot;unit_base&quot;: &quot;3ffba798-fa68-4ece-a15c-264df6453c8c&quot;,
            &quot;unit_code&quot;: &quot;PEC&quot;,
            &quot;unit_name&quot;: &quot;Peças&quot;
          },
          {
            &quot;unit_base&quot;: &quot;14d0e806-5006-46e1-b94c-4f9562a5c66f&quot;,
            &quot;unit_code&quot;: &quot;CX&quot;,
            &quot;unit_name&quot;: &quot;Caixas&quot;
          },
          {
            &quot;unit_base&quot;: &quot;79b7ead5-ec55-4a46-82f1-da67e3cc137b&quot;,
            &quot;unit_code&quot;: &quot;SC&quot;,
            &quot;unit_name&quot;: &quot;Sacos&quot;
          },
          {
            &quot;unit_base&quot;: &quot;7e8534e8-515e-4a41-bec4-22242d495c77&quot;,
            &quot;unit_code&quot;: &quot;L&quot;,
            &quot;unit_name&quot;: &quot;Litros&quot;
          },
          {
            &quot;unit_base&quot;: &quot;42d19814-7f1b-4915-bc5a-c4d134dc475a&quot;,
            &quot;unit_code&quot;: &quot;EMB&quot;,
            &quot;unit_name&quot;: &quot;Embalagem&quot;
          }
        ]&#x27;</span>::<span style="color: #C76A40">jsonb</span>;
            _unit tweeks.unit;
            _next <span style="color: #C76A40">record</span>;
            _data <span style="color: #C76A40">record</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.branch b 
              <span style="color: #C76A40;
            font-weight: 800;">where</span> b._branch_uid = ___branch
              <span style="color: #C76A40;
            font-weight: 800;">into</span>  _data
            ;
            
            <span style="color: #C76A40;
            font-weight: 800;">for</span> _next <span style="color: #C76A40;
            font-weight: 800;">in</span>
              <span style="color: #C76A40;
            font-weight: 800;">with</span> __unit <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  (u.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;unit_base&#x27;</span>)::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> unit_base,
                  u.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;unit_code&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> unit_code,
                  u.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;unit_name&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> unit_name
                <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( document ) u( doc )
              ) <span style="color: #C76A40;
            font-weight: 800;">select</span> _u.*
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __unit _u
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.unit u <span style="color: #C76A40;
            font-weight: 800;">on</span> u.unit_base = _u.unit_base
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> u._branch_uid = _data._branch_uid
                <span style="color: #C76A40;
            font-weight: 800;">where</span> u.unit_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
            <span style="color: #C76A40;
            font-weight: 800;">loop</span>
              _unit := jsonb_populate_record( _unit, to_jsonb( _next ));
              _unit._branch_uid := _data._branch_uid;
              _unit.unit_user_id := _data.branch_main_user;
              _unit.unit_espaco_auth := _data.branch_main_workspace;
              <span style="color: #C76A40;
            font-weight: 800;">return query</span> 
                <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( &quot;returning&quot;::tweeks.unit )
                  <span style="color: #C76A40;
            font-weight: 800;">from</span>  lib.sets( _unit );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_artigo_estado {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_artigo_estado(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para ativar ou desativar o estado do um artigo
            args = {
              arg_colaborador_id: ID,
              arg_espaco_auth: ID,
              arg_artigo_id: ID
            }
          \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _artigo tweeks.artigo;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _artigo := tweeks._get_artigo( arg_artigo_id );

          <span style="color: #888">-- Se o espaço for o proprietario do artigo então desativar/reativar o artigo na boa</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _artigo.artigo_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.artigo
              <span style="color: #C76A40;
            font-weight: 800;">set</span>
                artigo_estado = lib.swith( artigo_estado, _const.artigo_estado_ativo, _const.artigo_estado_fechado  ),
                artigo_colaborador_atualizacao = arg_colaborador_id,
                artigo_dataatualizacao = <span style="color: #397300">current_timestamp</span>
              <span style="color: #C76A40;
            font-weight: 800;">where</span> artigo_id = arg_artigo_id
              <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _artigo
            ;

            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
              <span style="color: #4d99bf">&#x27;artigo&#x27;</span>, _artigo,
              <span style="color: #4d99bf">&#x27;text&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">case</span>
                <span style="color: #C76A40;
            font-weight: 800;">when</span> _artigo.artigo_estado = _const.artigo_estado_ativo   <span style="color: #C76A40;
            font-weight: 800;">then</span> format( <span style="color: #4d99bf">&#x27;O artigo &quot;%s&quot; foi ativado!&#x27;</span>, _artigo.artigo_nome )
                <span style="color: #C76A40;
            font-weight: 800;">when</span> _artigo.artigo_estado = _const.artigo_estado_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span> format( <span style="color: #4d99bf">&#x27;O artigo &quot;%s&quot; foi desativo!&#x27;</span>, _artigo.artigo_nome )
              <span style="color: #C76A40;
            font-weight: 800;">end</span>
            );

          <span style="color: #888">-- os outros só podem desativar apenas os links do artigos associados a ele</span>
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> tweeks.funct_change_link_unlink(
                jsonb_build_object(
                  <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth,
                  <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
                  <span style="color: #4d99bf">&#x27;arg_link_referencia&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">rule</span>.artigo_referencia( arg_artigo_id )
                )
              );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;




        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __tg_fluxo_on_venda {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__tg_fluxo_on_venda()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _new tweeks.venda;
          _old tweeks.venda;
          _fluxo tweeks.fluxo;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _conta tweeks.conta;
          ___restaurar <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>;
          __debitar <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_replication() <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _new := <span style="color: #397300">new</span>;
          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #397300">tg_op</span> = <span style="color: #4d99bf">&#x27;UPDATE&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              _old := <span style="color: #397300">old</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _new.venda_proforma <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;O campo venda_proforma não foi definido!&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _fluxo.fluxo_toperacao_id := _const.maguita_toperacao_venda;
          _fluxo.fluxo_documento := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          _fluxo.fluxo_data := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          _fluxo.fluxo_referencia := jsonb_build_object( <span style="color: #4d99bf">&#x27;venda_id&#x27;</span>, _new.venda_id );
          _fluxo.fluxo_regclass := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( pg_typeof( <span style="color: #397300">new</span> )::<span style="color: #C76A40">text</span>::<span style="color: #C76A40">regclass</span> );
          _fluxo.fluxo_refuid := _new.venda_id;
          _fluxo.fluxo_colaborador_id := _new.venda_colaborador_id;
          _fluxo.fluxo_espaco_auth := _new.venda_espaco_auth;
          
          
          <span style="color: #888">-- Report o stock quando mudar a conta de normal para proforma</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #397300">tg_op</span> = <span style="color: #4d99bf">&#x27;UPDATE&#x27;</span> 
            <span style="color: #C76A40;
            font-weight: 800;">and</span> ___restaurar
            <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _old.venda_proforma 
            <span style="color: #C76A40;
            font-weight: 800;">and</span> _new.venda_proforma 
          <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _fluxo.fluxo_quantidadein := _old.venda_quantidade;
            _fluxo.fluxo_artigo_in := _old.venda_artigo_id;
            _fluxo.fluxo_espaco_in := _old.venda_espaco_auth;
            _fluxo.fluxo_observacao := format( <span style="color: #4d99bf">&#x27;Reposição do artigo no stock por transformação de conta normal em proforma&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">perform</span> lib.sets_in( _fluxo );
            ___restaurar := <span style="color: #C76A40;
            font-weight: 800;">false</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          
          <span style="color: #888">-- Report o stock quando atualizar a  quantidade na venda normal ou o venda for anulada</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #397300">tg_op</span> = <span style="color: #4d99bf">&#x27;UPDATE&#x27;</span>
            <span style="color: #C76A40;
            font-weight: 800;">and</span> ___restaurar
            <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _old.venda_proforma 
            <span style="color: #C76A40;
            font-weight: 800;">and</span> _old.venda_quantidade != _new.venda_quantidade
          <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _fluxo.fluxo_quantidadein := _old.venda_quantidade;
            _fluxo.fluxo_artigo_in := _old.venda_artigo_id;
            _fluxo.fluxo_espaco_in := _old.venda_espaco_auth;
            _fluxo.fluxo_observacao := format( <span style="color: #4d99bf">&#x27;Reposição do artigo no stock por atualização da quantidade na conta&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">perform</span> lib.sets_in( _fluxo );
            ___restaurar := <span style="color: #C76A40;
            font-weight: 800;">false</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #888">-- Report o stock quando a venda for anulada</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #397300">tg_op</span> = <span style="color: #4d99bf">&#x27;UPDATE&#x27;</span>
            <span style="color: #C76A40;
            font-weight: 800;">and</span> ___restaurar
            <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _old.venda_proforma 
            <span style="color: #C76A40;
            font-weight: 800;">and</span> _old.venda_estado != _new.venda_estado
            <span style="color: #C76A40;
            font-weight: 800;">and</span> _new.venda_estado <span style="color: #C76A40;
            font-weight: 800;">in</span> (
              _const.maguita_venda_estado_anulado,
              _const.maguita_venda_estado_canselado
            )
          <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _fluxo.fluxo_quantidadein := _old.venda_quantidade;
            _fluxo.fluxo_artigo_in := _old.venda_artigo_id;
            _fluxo.fluxo_espaco_in := _old.venda_espaco_auth;
            _fluxo.fluxo_observacao := format( <span style="color: #4d99bf">&#x27;Reposição do artigo no stock por Anulação/Canselamento da conta&#x27;</span>);
            <span style="color: #C76A40;
            font-weight: 800;">perform</span> lib.sets_in( _fluxo );
            ___restaurar := <span style="color: #C76A40;
            font-weight: 800;">false</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _fluxo.fluxo_quantidadein := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          _fluxo.fluxo_artigo_in := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          _fluxo.fluxo_espaco_in := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          _fluxo.fluxo_quantidadeout := _new.venda_quantidade;
          _fluxo.fluxo_artigo_out := _new.venda_artigo_id;
          _fluxo.fluxo_espaco_out := _new.venda_espaco_auth;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #397300">tg_op</span> = <span style="color: #4d99bf">&#x27;INSERT&#x27;</span> 
            <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _new.venda_proforma 
            <span style="color: #C76A40;
            font-weight: 800;">and</span> __debitar 
          <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _fluxo.fluxo_observacao := format( <span style="color: #4d99bf">&#x27;Debito no stock atravez de uma venda&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">perform</span> lib.sets_in( _fluxo );
            __debitar := <span style="color: #C76A40;
            font-weight: 800;">false</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #397300">tg_op</span> = <span style="color: #4d99bf">&#x27;UPDATE&#x27;</span>
            <span style="color: #C76A40;
            font-weight: 800;">and</span> __debitar
            <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _new.venda_proforma
            <span style="color: #C76A40;
            font-weight: 800;">and</span> _new.venda_quantidade != _old.venda_quantidade
            <span style="color: #C76A40;
            font-weight: 800;">and</span> _new.venda_estado <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> (
              _const.maguita_venda_estado_anulado,
              _const.maguita_venda_estado_canselado
            )
          <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _fluxo.fluxo_observacao := format( <span style="color: #4d99bf">&#x27;Debito no stock atravez de uma venda&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">perform</span> lib.sets_in( _fluxo );
            __debitar := <span style="color: #C76A40;
            font-weight: 800;">false</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;


          <span style="color: #C76A40;
            font-weight: 800;">if</span> _old.venda_estado != _new.venda_estado <span style="color: #C76A40;
            font-weight: 800;">and</span> _new.venda_estado = _const.maguita_venda_estado_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _conta := tweeks._get_conta( _old.venda_conta_id );
            <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.fluxo
              <span style="color: #C76A40;
            font-weight: 800;">set</span> fluxo_documento = _conta.conta_numerofatura
              <span style="color: #C76A40;
            font-weight: 800;">where</span> fluxo_regclass = <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( pg_typeof( _new )::<span style="color: #C76A40">text</span>::<span style="color: #C76A40">regclass</span> )
              <span style="color: #C76A40;
            font-weight: 800;">and</span> ( fluxo_referencia-&gt;&gt;<span style="color: #4d99bf">&#x27;venda_id&#x27;</span>)::<span style="color: #C76A40">uuid</span> = _old.venda_id
            ;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __generate_posto_chave {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__generate_posto_chave()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">text</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
            <span style="color: #C76A40;
            font-weight: 800;">declare</span>
              chars <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span>||upper(<span style="color: #4d99bf">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span>)||<span style="color: #4d99bf">&#x27;0123456789&#x27;</span>||<span style="color: #4d99bf">&#x27;$#%&#x27;</span>;
              _posto_chave <span style="color: #C76A40">varchar</span>;
            <span style="color: #C76A40;
            font-weight: 800;">begin</span>
              _posto_chave := lib.dset_random_text( chars, (<span style="color: #C76A40">2</span>^<span style="color: #C76A40">8</span>)::<span style="color: #C76A40">int</span> )::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;
              <span style="color: #C76A40;
            font-weight: 800;">return</span> _posto_chave;
            <span style="color: #C76A40;
            font-weight: 800;">end</span>;
            $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_reg_conta {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_reg_conta(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função registra um nova conta
            arg = {
              -- obrigatorios
              arg_colaborador_id: ID,
              arg_espaco_auth: ID,

              conta_posto_id: ID,
              _serie_id: UUID

              -- opcional
              conta_mesa: { numero:NUM, descricao:TEXT, lotacao:NUM }
              conta_id: ID?
              conta_extension: {} | { reserva_id: UID }
              conta_chave: CHAVE

              conta_currency_id: ID,
              conta_tpaga_id: ID,

              conta_cliente_id:UID
              conta_titular: CLIENTE-NOME
              conta_titularnif: CLIENTE-NIF
              conta_data: DATA,
              conta_tserie_id

              -- requerido
              arg_vendas: [
                {
                  venda_id?: UID,
                  venda_artigo_id: UID,
                  venda_quantidade: QUANT,
                  venda_custounitario: COST
                  venda_custoquantidade: COST

                  + venda_editado
                  + venda_isencao
                  + venda_montante
                  + venda_montanteagregado
                  + venda_montantetotal
                  + venda_imposto
                  + venda_montantesemimposto
                  + venda_montantecomimposto
                  + venda_impostoadicionar
                  + venda_impostoretirar

                  + venda_descricao
                  + venda_lote
                  + venda_validade
                  + venda_metadata

                  arg_itens: [
                      venda_id: UID
                      venda_artigo_id: UID,
                      venda_quantidade: QUANT,
                      venda_custounitario: COST
                      venda_custoquantidade: COST
                      venda_descricao: DESCRICAO
                      venda_lote: LOTE
                      venda_validade: VALIDADE
                      venda_metadata: {... any extras data}
                    + venda_montantetotal
                  ]
                }
              ]
            }
           \*\/</span>

          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_conta_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;conta_id&#x27;</span>;
          arg_conta_chave <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;conta_chave&#x27;</span>;
          arg_vendas <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_vendas&#x27;</span>;

          _conta tweeks.conta;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _unsets <span style="color: #C76A40">jsonb</span>[];
          _vendas <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> ( e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;venda_id&#x27;</span> )::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;arg_vendas&#x27;</span> ) e ( doc ) <span style="color: #C76A40;
            font-weight: 800;">where</span> e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;venda_id&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>);
          _sync <span style="color: #C76A40">jsonb</span>;
          _reg_venda <span style="color: #C76A40">record</span>;
          _change tweeks.conta;
          _branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          _message <span style="color: #C76A40">text</span>;
          _new <span style="color: #C76A40">jsonb</span>;
          _old <span style="color: #C76A40">jsonb</span>;
          _serie_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_serie_id&#x27;</span>;
          _cambio <span style="color: #C76A40">record</span>;
          _currency <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _conta := tweeks._get_conta( arg_conta_id );
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta.conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct 
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_chave = arg_conta_chave
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ct._branch_uid = _branch
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Já existe uma conta com a mesma chave (atualize a pagina e tente novamente)!&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          _old := coalesce( to_jsonb( _conta ), jsonb_build_object() );
          _change := jsonb_populate_record( _conta, args );
          _change.conta_data := coalesce( _change.conta_data, <span style="color: #397300">current_date</span> );
          _new := to_jsonb( _change );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _change.conta_tserie_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false(format(<span style="color: #4d99bf">&#x27;O tipo de serie é não foi especificada, contactar o suporte!&#x27;</span> ) );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">select</span> *
            <span style="color: #C76A40;
            font-weight: 800;">from</span> geoinfo.currency cu 
            <span style="color: #C76A40;
            font-weight: 800;">where</span> cu.currency_id = _change.conta_currency_id
            <span style="color: #C76A40;
            font-weight: 800;">into</span> _currency
          ;
          
          <span style="color: #C76A40;
            font-weight: 800;">select</span> *
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.funct_load_cambio_ativo( args ) c( doc )
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::tweeks.cambio, c.doc ) cb <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::geoinfo.currency, c.doc ) cur <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>    
          <span style="color: #C76A40;
            font-weight: 800;">where</span> cur.currency_id = _change.conta_currency_id
            <span style="color: #C76A40;
            font-weight: 800;">limit</span> <span style="color: #C76A40">1</span>
            <span style="color: #C76A40;
            font-weight: 800;">into</span> _cambio
          ;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _change.conta_currency_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> _cambio.cambio_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false(format(<span style="color: #4d99bf">&#x27;Não existe cambio definido para %I!&#x27;</span>, _currency.currency_code ) );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _change.conta_currency_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _change.conta_cambio_uid := _cambio.cambio_id;
            _change.conta_taxacambio := _cambio.cambio_taxa;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _change.conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _change.conta_colaborador_id := arg_colaborador_id;
            _change.conta_espaco_auth := arg_espaco_auth;
            _change.conta_numero := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.next( <span style="color: #4d99bf">&#x27;conta.conta_numero/seq&#x27;</span>,
              sub := _branch::<span style="color: #C76A40">text</span>,
              lpad_char := <span style="color: #4d99bf">&#x27;0&#x27;</span>,
              lpad := <span style="color: #C76A40">5</span>
            );
            _new := to_jsonb( _change );
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            _change.conta_colaborador_atualizacao := arg_colaborador_id;
            _new := to_jsonb( _change );
            _change.conta_dataatualizacao := <span style="color: #397300">current_timestamp</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          _message := tweeks.__check_conta_data(
            _tserie_id := _change.conta_tserie_id,
            _conta_data := _change.conta_data,
            _raise := <span style="color: #C76A40;
            font-weight: 800;">false</span>,
            _serie_id := _serie_id
          );
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _message <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span>  <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( _message );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _new != _old <span style="color: #C76A40;
            font-weight: 800;">then</span> 
            <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _conta
              <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets( _change, replacer := args )  sets
            ;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #888">-- Canselar as vendas que não fazem mais parte de conta</span>
          <span style="color: #C76A40;
            font-weight: 800;">with</span> <span style="color: #C76A40;
            font-weight: 800;">recursive</span> __venda <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                ve.venda_id,
                ve.venda_estado
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.venda ve
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ve.venda_conta_id = _conta.conta_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_id != <span style="color: #C76A40;
            font-weight: 800;">all</span>( _vendas )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_estado <span style="color: #C76A40;
            font-weight: 800;">in</span> (
                  _const.maguita_venda_estado_aberto,
                  _const.maguita_venda_estado_fechado
                )
            <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  ve.venda_id,
                  ve.venda_estado
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __venda vs
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.venda ve <span style="color: #C76A40;
            font-weight: 800;">on</span> vs.venda_id = ve.venda_venda_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> vs.venda_estado <span style="color: #C76A40;
            font-weight: 800;">in</span> (
                  _const.maguita_venda_estado_aberto,
                  _const.maguita_venda_estado_fechado
                )
          ), __disable <span style="color: #C76A40;
            font-weight: 800;">as</span>(
            <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.venda up
              <span style="color: #C76A40;
            font-weight: 800;">set</span> venda_estado = _const.maguita_venda_estado_canselado
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __venda _v
              <span style="color: #C76A40;
            font-weight: 800;">where</span> up.venda_id = _v.venda_id
              <span style="color: #C76A40;
            font-weight: 800;">returning</span> *
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> array_agg( to_jsonb( d ) ) <span style="color: #C76A40;
            font-weight: 800;">into</span> _unsets
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __disable d;


          _reg_venda :=  tweeks.funct_pos_reg_venda(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;arg_vendas&#x27;</span>, arg_vendas,
              <span style="color: #4d99bf">&#x27;arg_message_error&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">true</span>,
              <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth,
              <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
              <span style="color: #4d99bf">&#x27;arg_conta_id&#x27;</span>, _conta.conta_id
            )
          );

          _sync := tweeks.funct_pos__sync_conta_amount(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;arg_conta_id&#x27;</span>, _conta.conta_id,
              <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
              <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth
            )
          );

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true( tweeks.funct_pos_load_conta_data( jsonb_build_object(
            <span style="color: #4d99bf">&#x27;arg_posto_id&#x27;</span>, args-&gt;<span style="color: #4d99bf">&#x27;conta_posto_id&#x27;</span>,
            <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth,
            <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
            <span style="color: #4d99bf">&#x27;arg_conta_id&#x27;</span>, _conta.conta_id
          )) || jsonb_build_object(
            <span style="color: #4d99bf">&#x27;sync&#x27;</span>, _sync,
            <span style="color: #4d99bf">&#x27;sets&#x27;</span>, _reg_venda.data-&gt;<span style="color: #4d99bf">&#x27;vendas&#x27;</span>,
            <span style="color: #4d99bf">&#x27;unsets&#x27;</span>, coalesce( _unsets, <span style="color: #C76A40;
            font-weight: 800;">array</span>[]::<span style="color: #C76A40">jsonb</span>[])
          ));

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_exception( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_link_unlink {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_link_unlink(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              arg_espaco_auth: ID,
              arg_colaborador_id: ID,
              arg_link_referencia: REF
            }
           \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_link_referencia <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;<span style="color: #4d99bf">&#x27;arg_link_referencia&#x27;</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.link
            <span style="color: #C76A40;
            font-weight: 800;">set</span> link_estado = _const.link_estado_fechado,
                link_colaborador_atualizacao = arg_colaborador_id,
                link_dataatualizacao = <span style="color: #397300">current_timestamp</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> link_referencia @&gt; arg_link_referencia
              <span style="color: #C76A40;
            font-weight: 800;">and</span> link_espaco_destino = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
              <span style="color: #C76A40;
            font-weight: 800;">and</span> link_estado = _const.link_estado_associacao
              <span style="color: #C76A40;
            font-weight: 800;">and</span> link_tlink_id = _const.tlink_associacao
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;text&#x27;</span>, <span style="color: #4d99bf">&#x27;A associação ao espaço foi desativado com sucesso&#x27;</span>
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_tipoimposto {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_tipoimposto(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para carregar os tipos de impostos registrados
            filter := {
              arg_espaco_auth: ID
              arg_colaborador_id UID
            }
           \*\/</span>

          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;

          ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> associacao <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                ls.link_referencia,

                jsonb_agg(
                  lib.jsonb_values(
                    to_jsonb( esp ),
                      <span style="color: #4d99bf">&#x27;espaco_id&#x27;</span>,
                      <span style="color: #4d99bf">&#x27;espaco_nome&#x27;</span>
                  )) <span style="color: #C76A40;
            font-weight: 800;">as</span> link

              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.link ls
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco esp <span style="color: #C76A40;
            font-weight: 800;">on</span> ls.link_espaco_destino = esp.espaco_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> esp._branch_uid = ___branch
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ls.link_tlink_id = _const.maguita_tlink_associacao
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ls.link_estado = _const.maguita_link_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ( ls.link_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child ) <span style="color: #C76A40;
            font-weight: 800;">or</span> ls.link_espaco_destino = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child ) )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ls._branch_uid = ___branch
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ls.link_referencia
            ), imposto_taxa <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                tip.*,
                txow.*,
                coalesce( ass.link, jsonb_build_array() ) <span style="color: #C76A40;
            font-weight: 800;">as</span> link,
                coalesce( tx.taxa_percentagem, (txow::tweeks.taxa).taxa_percentagem ) <span style="color: #C76A40;
            font-weight: 800;">as</span> taxa_percentagem,
                coalesce( tx.taxa_taxa, (txow::tweeks.taxa).taxa_taxa ) <span style="color: #C76A40;
            font-weight: 800;">as</span> taxa_taxa,
                arg_espaco_auth = tip.tipoimposto_espaco_auth <span style="color: #C76A40;
            font-weight: 800;">as</span> tipoimposto_editinfo,
                <span style="color: #C76A40;
            font-weight: 800;">true</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> tipoimposto_editespaco,
                <span style="color: #C76A40;
            font-weight: 800;">true</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> tipoimposto_edittaxa
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.tipoimposto tip
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> associacao ass <span style="color: #C76A40;
            font-weight: 800;">on</span> ass.link_referencia @&gt; jsonb_build_object( <span style="color: #4d99bf">&#x27;tipoimposto_id&#x27;</span>, tip.tipoimposto_id )
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.taxa tx <span style="color: #C76A40;
            font-weight: 800;">on</span> tip.tipoimposto_id = tx.taxa_tipoimposto_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> tx.taxa_estado = _const.taxa_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> tx.taxa_espaco_auth = arg_espaco_auth
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> tx._branch_uid = ___branch
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.taxa_espaco( tx, _const, arg_espaco_auth ) txow <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> tx.taxa_estado = _const.taxa_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> tx.taxa_espaco_auth = tip.tipoimposto_espaco_auth
              <span style="color: #C76A40;
            font-weight: 800;">where</span>
                  tip._branch_uid = ___branch
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ( tip.tipoimposto_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child ) <span style="color: #C76A40;
            font-weight: 800;">or</span> ass.link_referencia <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> )
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                tip.tipoimposto_nome
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
              lib.jsonb_values(
                it,
                <span style="color: #4d99bf">&#x27;tipoimposto_id&#x27;</span>,
                <span style="color: #4d99bf">&#x27;tipoimposto_nome&#x27;</span>,
                <span style="color: #4d99bf">&#x27;tipoimposto_codigo&#x27;</span>,
                <span style="color: #4d99bf">&#x27;tipoimposto_dataatuzaliacao&#x27;</span>,
                <span style="color: #4d99bf">&#x27;tipoimposto_estado&#x27;</span>,
                <span style="color: #4d99bf">&#x27;tipoimposto_dataregistro&#x27;</span>,
                <span style="color: #4d99bf">&#x27;link&#x27;</span>,
                <span style="color: #4d99bf">&#x27;taxa_percentagem&#x27;</span>,
                <span style="color: #4d99bf">&#x27;taxa_taxa&#x27;</span>,
                <span style="color: #4d99bf">&#x27;tipoimposto_edittaxa&#x27;</span>,
                <span style="color: #4d99bf">&#x27;tipoimposto_editespaco&#x27;</span>,
                <span style="color: #4d99bf">&#x27;tipoimposto_editinfo&#x27;</span>
              )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> imposto_taxa it
              ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_link_switch {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_link_switch(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para trocar duas link de posição
            arg_link_id: ID_LINK_PARENT,
            arg_espaco_destino: ID,
            arg_espaco_auth: ID,
            arg_colaborador_id: ID
            arg_link_posicao_1: POSICAO
            arg_link_posicao_2: POSICAO,
           \*\/</span>
          _link tweeks.link;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;

          arg_link_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_link_id&#x27;</span>;
          arg_espaco_destino <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_destino&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_link_posicao_1 <span style="color: #C76A40">int</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_link_posicao_1&#x27;</span>;
          arg_link_posicao_2 <span style="color: #C76A40">int</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_link_posicao_2&#x27;</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">lock</span> tweeks.link <span style="color: #C76A40;
            font-weight: 800;">in</span> <span style="color: #C76A40;
            font-weight: 800;">share mode</span>;
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          arg_espaco_destino := coalesce( arg_espaco_destino, arg_espaco_auth );

          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.link
            <span style="color: #C76A40;
            font-weight: 800;">set</span> link_posicao = lib.swith( link_posicao, arg_link_posicao_1, arg_link_posicao_2 ),
                link_colaborador_atualizacao = arg_colaborador_id,
                link_dataatualizacao = <span style="color: #397300">current_timestamp</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> link_posicao <span style="color: #C76A40;
            font-weight: 800;">in</span> ( arg_link_posicao_1, arg_link_posicao_2 )
              <span style="color: #C76A40;
            font-weight: 800;">and</span> link_estado = _const.link_estado_ativo
              <span style="color: #C76A40;
            font-weight: 800;">and</span> link_espaco_destino = arg_posto_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( link_link_id, <span style="color: #C76A40">-1</span> ) = coalesce( arg_link_id, <span style="color: #C76A40">-1</span> )
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;link&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">array</span>(
              <span style="color: #C76A40;
            font-weight: 800;">select</span> a
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.link a
                <span style="color: #C76A40;
            font-weight: 800;">where</span> link_posicao <span style="color: #C76A40;
            font-weight: 800;">in</span> ( arg_link_posicao_1, arg_link_posicao_2 )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> link_estado = _const.link_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> link_espaco_destino = arg_espaco_destino
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( link_link_id, <span style="color: #C76A40">-1</span> ) = coalesce( arg_link_id, <span style="color: #C76A40">-1</span> )
                <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> a.link_posicao
            )
          );

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_precario {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_precario(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para registrar e atualizar os preços dos itens
            args := {
              arg_espaco_auth: ID
              arg_colaborador_id: ID,
              arg_forced: boolean,
              arg_precario_referencia: {
                artigo_id: ID,
              },
              arg_links :[
                {  espaco_id: *ID,
                   stock_minimo: QUNT
                   precario_custo: CUSTO,
                   precario_quantidade: QUANT_CUSTO }
              ]
            }
          \*\/</span>

          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;

          arg_precario_referencia <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_precario_referencia&#x27;</span>;
          arg_forced <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_forced&#x27;</span>;
          arg_artigo_id <span style="color: #C76A40">uuid</span>;

          arg_espacos_destino <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span> ( <span style="color: #C76A40;
            font-weight: 800;">select</span> ( e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;espaco_id&#x27;</span> )::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;arg_links&#x27;</span>) e( doc ) );
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens_static( arg_espaco_auth );

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _artigo tweeks.artigo;
          _branch <span style="color: #C76A40">uuid</span> := tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          arg_forced := coalesce( arg_forced, <span style="color: #C76A40;
            font-weight: 800;">false</span> );

          arg_artigo_id := arg_precario_referencia-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_id&#x27;</span>;


          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> arg_forced <span style="color: #C76A40;
            font-weight: 800;">and</span> arg_artigo_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _artigo := tweeks._get_artigo( arg_artigo_id );

            <span style="color: #888">-- Alterar o preço apenas quando o artigo não estiver em nenhuma conta aberta</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> (
                 <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * ) &gt; <span style="color: #C76A40">0</span>
                 <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.venda ag
                 <span style="color: #C76A40;
            font-weight: 800;">where</span> ag.venda_artigo_id = arg_artigo_id
                   <span style="color: #C76A40;
            font-weight: 800;">and</span> ag.venda_estado <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.maguita_venda_estado_aberto )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ag._branch_uid = _branch
               ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;@tweeks.artigo.price-can-not-update-open-account&#x27;</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- Desativar o precario atual</span>
          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.link
            <span style="color: #C76A40;
            font-weight: 800;">set</span> link_estado = _const.maguita_link_estado_fechado,
                link_dataatualizacao = now(),
                link_colaborador_atualizacao = arg_colaborador_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span> link_referencia @&gt; arg_precario_referencia
              <span style="color: #C76A40;
            font-weight: 800;">and</span> link_estado = _const.maguita_link_estado_ativo
              <span style="color: #C76A40;
            font-weight: 800;">and</span> link_espaco_destino = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
              <span style="color: #C76A40;
            font-weight: 800;">and</span> _branch_uid = _branch
              <span style="color: #C76A40;
            font-weight: 800;">and</span> link_tlink_id = _const.maguita_tlink_preco   
          ;

           <span style="color: #888">-- Criar os novos precarios</span>
           <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.link(
              link_tlink_id,
              link_espaco_destino,
              link_espaco_auth,
              link_colaborador_id,
              link_referencia,
              link_posicao,
              link_nome,
              link_metadata
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
              (map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>()).maguita_tlink_preco,
              ( lp.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;espaco_id&#x27;</span> )::<span style="color: #C76A40">uuid</span>,
              arg_espaco_auth,
              arg_colaborador_id,
              arg_precario_referencia,
              <span style="color: #C76A40">0</span>,
              format( <span style="color: #4d99bf">&#x27;Preço de %s para %s&#x27;</span>, _artigo.artigo_nome, e.espaco_nome ),
              jsonb_build_object(
                  <span style="color: #4d99bf">&#x27;precario_custo&#x27;</span>, ( lp.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;precario_custo&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>,
                  <span style="color: #4d99bf">&#x27;stock_minimo&#x27;</span>, ( lp.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;stock_minimo&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>,
                  <span style="color: #4d99bf">&#x27;precario_quantidade&#x27;</span>, (lp.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;precario_quantidade&#x27;</span>)::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>
              )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;arg_links&#x27;</span> ) lp( doc )
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> (lp.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;espaco_id&#x27;</span>)::<span style="color: #C76A40">uuid</span> = e.espaco_id
            ;
          
          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true(jsonb_build_object(
            <span style="color: #4d99bf">&#x27;precario&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">array</span>(
                <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( l )
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.link l
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> l.link_espaco_destino = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espacos_destino )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> (l.link_referencia -&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_id&#x27;</span>)::<span style="color: #C76A40">uuid</span> = (arg_precario_referencia-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_id&#x27;</span>)::<span style="color: #C76A40">uuid</span>
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_estado = _const.maguita_link_estado_ativo
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_tlink_id = _const.maguita_tlink_preco
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> l._branch_uid = _branch
            )
          ));
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_classe_simple_report {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_classe_simple_report(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(classe_id <span style="color: #C76A40">uuid</span>, classe_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para carregar as listas de classes ativas
            filter := {
              arg_espaco_auth: ID
            }
          \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                cla.classe_id,
                cla.classe_nome
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.classe cla
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.link l <span style="color: #C76A40;
            font-weight: 800;">on</span> l.link_referencia @&gt; jsonb_build_object( <span style="color: #4d99bf">&#x27;classe_id&#x27;</span>, cla.classe_id )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_estado = _const.link_estado_associacao
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_tlink_id = _const.tlink_associacao
              <span style="color: #C76A40;
            font-weight: 800;">where</span> cla.classe_estado = _const.classe_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ( cla.classe_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child ) <span style="color: #C76A40;
            font-weight: 800;">or</span> l.link_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child ) <span style="color: #C76A40;
            font-weight: 800;">or</span> l.link_espaco_destino = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child ) )
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> cla.classe_id
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> cla.classe_id != _const.classe_itemextra <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">1</span>
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">2</span>
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">asc</span>,
                cla.classe_nome <span style="color: #C76A40;
            font-weight: 800;">asc</span>
            ;

          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">select</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>::<span style="color: #C76A40">int2</span>, <span style="color: #4d99bf">&#x27;Desativados&#x27;</span>::<span style="color: #C76A40">varchar</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface sets_lancamento {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.sets_lancamento(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\*
            arg_espaco_auth?:UUID
            arg_colaborador_id?:UUID

            lancamento_id?: UID
            arg_lancamento_incrementevia:BOOLEAN

            lancamento_tlancamento_id: SELECT*
            _tgrupo_id [{ maguita_tgrupo_ccorrente | maguita_tgrupo_cnormal }] default maguita_tgrupo_ccorrente
            lancamento_operacao := CREDITO =&gt; 1 | DEBITO =&gt; -1;
            lancamento_valor := _deposito.deposito_montantefinal;
            lancamento_cliente_id*
            lancamento_data := DATE;
            lancamento_documento?: DOCUMENTO;
            lancamento_descricao: DESCRICAO
           \*\/</span>
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _lancamento tweeks.lancamento;

          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_lancamento_incrementevia <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_lancamento_incrementevia&#x27;</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _lancamento := jsonb_populate_record( _lancamento, args );
          _lancamento._tgrupo_id := coalesce( _lancamento._tgrupo_id, _const.maguita_tgrupo_ccorrente );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _lancamento.lancamento_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _lancamento.lancamento_mode := _const.maguita_lancamento_mode_manual;
            _lancamento.lancamento_espaco_auth := coalesce( _lancamento.lancamento_espaco_auth, arg_espaco_auth );
            _lancamento.lancamento_colaborador_id := coalesce( _lancamento.lancamento_colaborador_id, arg_colaborador_id );
            _lancamento.lancamento_referencia := jsonb_build_object();
            _lancamento._branch_uid := coalesce( _lancamento._branch_uid, tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth ) );
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            _lancamento.lancamento_colaborador_atualizacao := arg_colaborador_id;
            _lancamento.lancamento_dataatualizacao := now();
            <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_lancamento_incrementevia <span style="color: #C76A40;
            font-weight: 800;">then</span>
              _lancamento.lancamento_via := coalesce( _lancamento.lancamento_via, <span style="color: #C76A40">1</span>)+<span style="color: #C76A40">1</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _lancamento
            <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets( _lancamento )
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true(jsonb_build_object(
            <span style="color: #4d99bf">&#x27;_lancamento&#x27;</span>, _lancamento
          ));
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_transferencia {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_transferencia(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(transferencia_id <span style="color: #C76A40">uuid</span>, transferencia_quantidade <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, transferencia_data <span style="color: #C76A40">date</span>, transferencia_documento <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, transferencia_observacao <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, transferencia_estado <span style="color: #C76A40">smallint</span>, transferencia_dataregistro <span style="color: #C76A40">timestamp</span> <span style="color: #C76A40">with time zone</span>, transferencia_dataatualizacao <span style="color: #C76A40">timestamp</span> <span style="color: #C76A40">with time zone</span>, artigo_id <span style="color: #C76A40">uuid</span>, artigo_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, artigo_codigo <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, origem_espaco_id <span style="color: #C76A40">uuid</span>, origem_espaco_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, destino_espaco_id <span style="color: #C76A40">uuid</span>, destino_espaco_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para listar as transferencias dos artigos
            filter := {
              arg_artigo_id: ID,
              arg_espaco_origem: ID,
              arg_espaco_destino: ID,
              arg_espaco_auth: ID,
            }
          \*\/</span>

          arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
          arg_espaco_origem <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_origem&#x27;</span>;
          arg_espaco_destino <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_destino&#x27;</span>;

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                trans.transferencia_id,
                trans.transferencia_quantidade,
                trans.transferencia_data,
                trans.transferencia_documento,
                trans.transferencia_observacao,
                trans.transferencia_estado,
                trans.transferencia_dataregistro,
                trans.transferencia_dataatualizacao,

                art.artigo_id,
                art.artigo_nome,
                art.artigo_codigo,

                esporg.espaco_id,
                esporg.espaco_nome,

                espdest.espaco_id,
                espdest.espaco_nome
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.transferencia trans
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.stock origen <span style="color: #C76A40;
            font-weight: 800;">on</span> trans.transferencia_stock_origem = origen.stock_id
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.stock dest <span style="color: #C76A40;
            font-weight: 800;">on</span> trans.transferencia_stock_destino = dest.stock_id
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> origen.stock_artigo_id = art.artigo_id
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco esporg <span style="color: #C76A40;
            font-weight: 800;">on</span> origen.stock_espacao_id = esporg.espaco_id
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco espdest <span style="color: #C76A40;
            font-weight: 800;">on</span> dest.stock_espacao_id = espdest.espaco_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> art.artigo_id = coalesce( arg_artigo_id, art.artigo_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> esporg.espaco_id = coalesce( arg_espaco_origem, esporg.espaco_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> espdest.espaco_id = coalesce( arg_espaco_destino, espdest.espaco_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> trans.transferencia_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_espaco_simple {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_espaco_simple(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função lista os espacos ativos
            filter := {
              arg_espaco_auth: ID
            }
          \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __espaco <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  esp.espaco_id,
                  esp.espaco_nome,
                  esp.espaco_codigo,
                  esp._branch_uid
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.espaco esp
                <span style="color: #C76A40;
            font-weight: 800;">where</span> esp.espaco_estado = _const.maguita_espaco_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ( esp.espaco_espaco_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_arg_espaco_child ) <span style="color: #C76A40;
            font-weight: 800;">or</span> esp.espaco_id = arg_espaco_auth )
                <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> esp.espaco_nome
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( e )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __espaco e
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_item {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_item(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\**
              Essa funçao serve para registar um item
              {
                arg_espaco_auth: ID
                arg_colaborador_id: ID

                artigo_id: ID
                artigo_nome: *NOME
                artigo_descricao: DESCRICAO
                precario_custo: *CUSTO
                precario_quantida: *QUANT
              }
             \*\/</span>

            arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
            arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;

            arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_id&#x27;</span>;
            arg_artigo_stocknegativo <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_stocknegativo&#x27;</span>;
            arg_artigo_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_nome&#x27;</span>;
            arg_precario_custo <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;precario_custo&#x27;</span>;
            arg_precario_quantidade <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;precario_quantidade&#x27;</span>;

            _result lib.result;
            _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
            arg_artigo_codigo <span style="color: #C76A40">varchar</span>;
            _artigo tweeks.artigo;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
            arg_artigo_stocknegativo := coalesce( arg_artigo_stocknegativo, <span style="color: #C76A40;
            font-weight: 800;">true</span> );
            args := args || jsonb_build_object(
              <span style="color: #4d99bf">&#x27;artigo_stocknegativo&#x27;</span>, arg_artigo_stocknegativo
            );

            arg_precario_quantidade := coalesce( arg_precario_quantidade, <span style="color: #C76A40">1</span> );
            <span style="color: #C76A40;
            font-weight: 800;">if</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * ) &gt; <span style="color: #C76A40">0</span>
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo it
                <span style="color: #C76A40;
            font-weight: 800;">where</span> lib.str_normalize( lower( it.artigo_nome ) ) = lib.str_normalize( lower( arg_artigo_nome ) )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> it.artigo_classe_id = _const.classe_itemextra
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> it.artigo_id::<span style="color: #C76A40">text</span> != coalesce( arg_artigo_id::<span style="color: #C76A40">text</span>, it.artigo_id::<span style="color: #C76A40">text</span>||<span style="color: #4d99bf">&#x27;!?&#x27;</span>)
            ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>? <span style="color: #4d99bf">&#x27;Nome do item já existe!&#x27;</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #888">-- Durante o registro</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_artigo_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">while</span> arg_artigo_codigo <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>
                    arg_artigo_codigo :=  format( <span style="color: #4d99bf">&#x27;item#%s&#x27;</span>, (random() * <span style="color: #C76A40">999999</span> )::<span style="color: #C76A40">int</span> );
                    <span style="color: #C76A40;
            font-weight: 800;">if</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * ) &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo <span style="color: #C76A40;
            font-weight: 800;">where</span> artigo_codigo = arg_artigo_codigo ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
                        arg_artigo_codigo := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
                    <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

                _artigo := jsonb_populate_record( _artigo, args );
                _artigo.artigo_espaco_auth := arg_espaco_auth;
                _artigo.artigo_colaborador_id := arg_colaborador_id;
                _artigo.artigo_codigo := arg_artigo_codigo;
                _artigo.artigo_stocknegativo := arg_artigo_stocknegativo;
                _artigo.artigo_classe_id := _const.classe_itemextra;

                <span style="color: #C76A40;
            font-weight: 800;">select</span> (&quot;returning&quot;).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _artigo <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets(_artigo );

            <span style="color: #C76A40;
            font-weight: 800;">elsif</span> arg_artigo_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              _artigo := tweeks._get_artigo( arg_artigo_id );
              _artigo := jsonb_populate_record( _artigo, to_jsonb( _artigo )|| args );
              _artigo.artigo_colaborador_atualizacao := arg_colaborador_id;
              _artigo.artigo_dataatualizacao := now();

              <span style="color: #888">-- Update artigos infos</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span> (&quot;returning&quot;).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _artigo
                <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets(_artigo )
                ;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            _result := tweeks.funct_reg_precario(
              jsonb_build_object(
                <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth,
                <span style="color: #4d99bf">&#x27;arg_forced&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">false</span>,
                <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
                <span style="color: #4d99bf">&#x27;arg_precario_referencia&#x27;</span>, jsonb_build_object( <span style="color: #4d99bf">&#x27;artigo_id&#x27;</span>, _artigo.artigo_id ),
                <span style="color: #4d99bf">&#x27;arg_links&#x27;</span>, json_build_array( jsonb_build_object(
                   <span style="color: #4d99bf">&#x27;espaco_id&#x27;</span>, arg_espaco_auth,
                   <span style="color: #4d99bf">&#x27;stock_minimo&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">null</span>,
                   <span style="color: #4d99bf">&#x27;precario_custo&#x27;</span>, arg_precario_custo,
                   <span style="color: #4d99bf">&#x27;precario_quantidade&#x27;</span>, arg_precario_quantidade
                 ))
              )
            );

            _result.message := _result.message || jsonb_build_object(
              <span style="color: #4d99bf">&#x27;artigo&#x27;</span>, _artigo
            );

            <span style="color: #C76A40;
            font-weight: 800;">return</span> _result;

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
            <span style="color: #C76A40;
            font-weight: 800;">begin</span>
                <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
                <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
            <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_item_estado {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_item_estado(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para ativar ou desativar o estado do um artigo
            args = {
              arg_colaborador_id: ID,
              arg_item_id: ID
            }
          \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_item_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_item_id&#x27;</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _artigo tweeks.artigo;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _artigo :=  tweeks._get_item( arg_item_id );
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _artigo.artigo_classe_id != _const.classe_itemextra <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;@artigo-is-not-item-extra&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;


          <span style="color: #888">-- Abrir ou fechar o item</span>
          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.artigo
            <span style="color: #C76A40;
            font-weight: 800;">set</span>
              artigo_estado = lib.swith( artigo_estado, _const.item_estado_ativo, _const.item_estado_fechado ),
              artigo_colaborador_atualizacao = arg_colaborador_id,
              artigo_dataatualizacao = <span style="color: #397300">current_timestamp</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> artigo_id = arg_item_id
            <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _artigo
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;artigo&#x27;</span>, _artigo
          );

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface ___override_auth_funct_load_grants {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.___override_auth_funct_load_grants(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            arg_colaborador_id: UID,
            arg_espaco_auth?: UID
           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          _branch tweeks.branch;
          _adminMenus <span style="color: #C76A40">jsonb</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _branch := tweeks.__get_branch( tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth ));

          _adminMenus := _branch.branch_grants-&gt;<span style="color: #4d99bf">&#x27;menu&#x27;</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _branch.branch_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _adminMenus := to_jsonb(<span style="color: #C76A40;
            font-weight: 800;">array</span>(
              <span style="color: #C76A40;
            font-weight: 800;">select</span> me.menu_id
                <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.menu me
                <span style="color: #C76A40;
            font-weight: 800;">where</span> me.menu_codigo <span style="color: #C76A40;
            font-weight: 800;">in</span> ( <span style="color: #4d99bf">&#x27;maguita.colaboradores&#x27;</span>, <span style="color: #4d99bf">&#x27;maguita.definicao&#x27;</span> )
            ));
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">select</span> *
            <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.funct_load_grants( jsonb_build_object(
              <span style="color: #4d99bf">&#x27;colaborador_id&#x27;</span>, arg_colaborador_id,
              <span style="color: #4d99bf">&#x27;menus&#x27;</span>, _adminMenus
            ));
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_conta_docs_financa {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_conta_docs_financa(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**doc
            args := {
              arg_colaborador_id: UID
              arg_espaco_auth: UID
              conta_fatura
              _tserie_id: UID
            }
           doc\*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          _tserie_id <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_tserie_id&#x27;</span>;
          _conta_fatura <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;conta_fatura&#x27;</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          __docs_of <span style="color: #C76A40">int2</span>[];
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _tserie_id = _const.maguita_tserie_notacredito <span style="color: #C76A40;
            font-weight: 800;">then</span> 
              __docs_of := <span style="color: #C76A40;
            font-weight: 800;">array</span>[
                _const.maguita_tserie_fatura,
                _const.maguita_tserie_faturarecibo,
                _const.maguita_tserie_faturasimplificada
              ]::<span style="color: #C76A40">int2</span>[];
          <span style="color: #C76A40;
            font-weight: 800;">elsif</span> _tserie_id = _const.maguita_tserie_notadebito <span style="color: #C76A40;
            font-weight: 800;">then</span> 
            __docs_of := <span style="color: #C76A40;
            font-weight: 800;">array</span>[ 
              _const.maguita_tserie_notacredito
            ]::<span style="color: #C76A40">int2</span>[];
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __venda_remanescete <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> 
                  ve.venda_id,
                  abs( ve.venda_quantidade ) - coalesce( sum( abs( ve2.venda_quantidade ) ), <span style="color: #C76A40">0.0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_quantidaderemanescente
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.venda ve
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.venda ve2 <span style="color: #C76A40;
            font-weight: 800;">on</span> ve.venda_id  = ve2.venda_venda_docorign
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ve2.venda_estado = _const.maguita_venda_estado_fechado
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ve.venda_estado = _const.maguita_venda_estado_fechado
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ve.venda_id
                <span style="color: #C76A40;
            font-weight: 800;">having</span> coalesce( sum( abs( ve2.venda_quantidade ) ), <span style="color: #C76A40">0.0</span>) &lt; abs( ve.venda_quantidade )
            ), __venda <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  ve.*,
                  art.*,
                  _ver.venda_quantidaderemanescente,
                  sum( tx.taxa_taxa ) <span style="color: #C76A40;
            font-weight: 800;">as</span> taxa_taxa,
                  sum( tx.taxa_percentagem ) <span style="color: #C76A40;
            font-weight: 800;">as</span> taxa_percentagem
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.venda ve
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __venda_remanescete _ver <span style="color: #C76A40;
            font-weight: 800;">on</span> ve.venda_id = _ver.venda_id
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> ve.venda_artigo_id = art.artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.taxa tx <span style="color: #C76A40;
            font-weight: 800;">on</span> tx.taxa_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( venda_taxas )
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ve._branch_uid  = arg_branch
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_estado = _const.maguita_venda_estado_fechado
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ve.venda_id,
                  art.artigo_id,
                 _ver.venda_quantidaderemanescente
            ), __venda_group <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  _ve.venda_id,
                  _ve.venda_conta_id,
                  coalesce( jsonb_agg( to_jsonb( _vei ) ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> _vei.venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>), jsonb_build_array() ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_itens
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __venda _ve
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> __venda _vei <span style="color: #C76A40;
            font-weight: 800;">on</span> _ve.venda_id = _vei.venda_venda_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> _ve.venda_venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> _ve.venda_id,
                  _ve.venda_conta_id

            ), __conta <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                ct.*,
                coalesce( 
                  jsonb_agg( to_jsonb( _veg ) || to_jsonb( _ved ) ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> _ved.venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> _veg.venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span>  <span style="color: #C76A40;
            font-weight: 800;">null</span> ), 
                  jsonb_build_array( )
                ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_vendas
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> __venda_group _veg <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_id = _veg.venda_conta_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> __venda _ved <span style="color: #C76A40;
            font-weight: 800;">on</span> _veg.venda_id = _ved.venda_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.venda venda_ncred <span style="color: #C76A40;
            font-weight: 800;">on</span> _veg.venda_id = venda_ncred.venda_venda_docorign
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> venda_ncred.venda_estado = _const.maguita_venda_estado_fechado
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ct._branch_uid = arg_branch
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_tserie_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( __docs_of )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_estado = _const.maguita_conta_estado_fechado
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_numerofatura = _conta_fatura
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ct.conta_id
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _ct )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __conta _ct
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_posto_open {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_posto_open(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para que um colaborador abra a posto
            args := {
              arg_colaborador_id: ID,
              arg_colaborador_proprietario: ID,
              arg_posto_montante: MONTANTE
            }
           \*\/</span>

          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_colaborador_proprietario <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_proprietario&#x27;</span>;
          arg_posto_montanteinicial <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_montanteinicial&#x27;</span>;

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _posto <span style="color: #C76A40">record</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _posto
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.posto cx
            <span style="color: #C76A40;
            font-weight: 800;">where</span> cx.posto_colaborador_proprietario = arg_colaborador_proprietario
              <span style="color: #C76A40;
            font-weight: 800;">and</span> cx.posto_estado <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.posto_estado_ativo, _const.posto_estado_pendete )
          ;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _posto.posto_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;@posto.colaborador.not-found&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _posto.posto_montanteinicial != arg_posto_montanteinicial <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;Montante inicial incorreto!&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.posto
            <span style="color: #C76A40;
            font-weight: 800;">set</span> posto_estado = _const.posto_estado_ativo,
                posto_colaborador_atualizacao = arg_colaborador_id,
                posto_dataatualizacao = <span style="color: #397300">current_timestamp</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> posto_id = _posto.posto_id
            <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _posto
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;posto&#x27;</span>, _posto
          );

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_items_simple {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_items_simple(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(artigo_id <span style="color: #C76A40">uuid</span>, artigo_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, artigo_descricao <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Devolver uma lista simples de items
            arg_espaco_auth: ID
          \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                art.artigo_id,
                art.artigo_nome,
                art.artigo_descricao
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo art
              <span style="color: #C76A40;
            font-weight: 800;">where</span> art.artigo_estado = _const.artigo_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_classe_id = _const.classe_itemextra
                <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_espaco_migrate {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_espaco_migrate(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            arg_espaco_migracao: UID
            arg_espaco_id: UID
            arg_colaborador_id: UID
           \*\/</span>
          arg_espaco_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_id&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_migracao <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_migracao&#x27;</span>;

          ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_id );
          _espaco tweeks.espaco;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _espaco := tweeks._get_espaco( arg_espaco_migracao );

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> <span style="color: #C76A40;
            font-weight: 800;">recursive</span> __espaco <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  e.espaco_id,
                  e.espaco_nome,
                  e.espaco_nivel,
                  e.espaco_espaco_id,
                  <span style="color: #C76A40;
            font-weight: 800;">array</span>[ e.espaco_id ]::<span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">as</span> <span style="color: #C76A40">path</span>
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.espaco e
                <span style="color: #C76A40;
            font-weight: 800;">where</span> e.espaco_nivel = <span style="color: #C76A40">1</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> _branch_uid = _branch_uid
              <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    es.espaco_id,
                    es.espaco_nome,
                    es.espaco_nivel,
                    es.espaco_espaco_id,
                    _e.path || es.espaco_id
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __espaco _e
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco es <span style="color: #C76A40;
            font-weight: 800;">on</span> _e.espaco_id = es.espaco_espaco_id
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> es._branch_uid = ___branch
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _es )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __espaco _es
                <span style="color: #C76A40;
            font-weight: 800;">where</span> arg_espaco_migracao != <span style="color: #C76A40;
            font-weight: 800;">all</span>( _es.path )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> _es.espaco_id != _espaco.espaco_espaco_id
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_load_colaborador {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_load_colaborador(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para devolver os colaboradores que tenha pelo menos um menu especificado
            filter := {
              posto_id: UUID,
              menus:[ CODE, CODE, CODE ]
            }
          *\*\/</span>
          arg_posto_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;posto_id&#x27;</span>;
          arg_menus <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>(<span style="color: #C76A40;
            font-weight: 800;">select</span> e.text <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements_text( args-&gt;<span style="color: #4d99bf">&#x27;menus&#x27;</span> ) e ( <span style="color: #C76A40">text</span> ));
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span>
            __espacos <span style="color: #C76A40;
            font-weight: 800;">as</span> ( <span style="color: #C76A40;
            font-weight: 800;">select</span> e.espaco_id, e.espaco_nome, e.espaco_estado <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.espaco e ),
            __colaborador <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    co.colaborador_id,
                    co.colaborador_nome,
                    co.colaborador_email,
                    co.colaborador_accesso,
                    co.colaborador_foto,
                    co.colaborador_estado
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.colaborador co
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.acesso ac <span style="color: #C76A40;
            font-weight: 800;">on</span> co.colaborador_id = ac.acesso_colaborador_propetario
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.menu me <span style="color: #C76A40;
            font-weight: 800;">on</span> ac.acesso_menu_id = me.menu_id
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> me.menu_codigo = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_menus )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ac.acesso_estado = _const.acesso_estado_ativo
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> co.colaborador_estado = _const.colaborador_estado_ativo
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> co.colaborador_accesso <span style="color: #C76A40;
            font-weight: 800;">in</span> (
                      _const.colaborador_accesso_ativo,
                      _const.colaborador_accesso_pendente
                    )
            ),
            __posto <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  po.posto_id,
                  array_agg( al.aloca_espaco_destino ) <span style="color: #C76A40;
            font-weight: 800;">as</span> posto_alocacao
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.posto po
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.aloca al <span style="color: #C76A40;
            font-weight: 800;">on</span> po.posto_id = al.aloca_posto_id
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> al.aloca_estado = _const.maguita_aloca_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">where</span> po.posto_id = arg_posto_id
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> po.posto_id
            ), __local <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  tr.trabalha_colaborador_proprietario,
                  array_agg( to_jsonb( e ) ) <span style="color: #C76A40;
            font-weight: 800;">as</span> colaborador_workspace
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.trabalha tr
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __posto p <span style="color: #C76A40;
            font-weight: 800;">on</span> tr.trabalha_espaco_destino = <span style="color: #C76A40;
            font-weight: 800;">any</span>( p.posto_alocacao )
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __espacos e <span style="color: #C76A40;
            font-weight: 800;">on</span> tr.trabalha_espaco_destino = e.espaco_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> tr.trabalha_estado = _const.maguita_trabalha_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> tr.trabalha_colaborador_proprietario
            ), __trabalhador <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __local lo
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __colaborador co <span style="color: #C76A40;
            font-weight: 800;">on</span> lo.trabalha_colaborador_proprietario = co.colaborador_id
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( tr ) <span style="color: #C76A40;
            font-weight: 800;">from</span> __trabalhador tr;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_artigo_simple {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_artigo_simple(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(artigo_id <span style="color: #C76A40">uuid</span>, artigo_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, artigo_descricao <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Devolver uma lista simples de artigos
            filter :{
              arg_espaco_auth: ID
            }
          \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                art.artigo_id,
                art.artigo_nome,
                art.artigo_descricao
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo art
              <span style="color: #C76A40;
            font-weight: 800;">where</span> art.artigo_estado = _const.artigo_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_classe_id != _const.classe_itemextra
                <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_espaco {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks._get_espaco(arg_espaco_id <span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> espaco
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #888">-- essa função serve para devolver uma intancia do espaco</span>
        <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.espaco esp <span style="color: #C76A40;
            font-weight: 800;">where</span> esp.espaco_id = arg_espaco_id;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __tg_conta_after_close {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__tg_conta_after_close()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>

          _new tweeks.conta;
          _old tweeks.conta;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_replication() <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _new := <span style="color: #397300">new</span>;
          _old := <span style="color: #397300">old</span>;
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _new.conta_estado != _old.conta_estado <span style="color: #C76A40;
            font-weight: 800;">and</span> _new.conta_estado <span style="color: #C76A40;
            font-weight: 800;">in</span> (
            _const.maguita_conta_estado_fechado,
            _const.maguita_conta_estado_anulado
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.venda
              <span style="color: #C76A40;
            font-weight: 800;">set</span> venda_estado = <span style="color: #C76A40;
            font-weight: 800;">case</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> _new.conta_estado = _const.maguita_conta_estado_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span> _const.maguita_venda_estado_fechado
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> _new.conta_estado = _const.maguita_conta_estado_anulado <span style="color: #C76A40;
            font-weight: 800;">then</span> _const.maguita_venda_estado_anulado
                <span style="color: #C76A40;
            font-weight: 800;">end</span>
              <span style="color: #C76A40;
            font-weight: 800;">where</span> venda_estado = _const.maguita_venda_estado_aberto
                <span style="color: #C76A40;
            font-weight: 800;">and</span> venda_conta_id = _old.conta_id;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_posto_estado {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_posto_estado(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para ativar ou desativar o estado do um artigo
            args = {
              arg_colaborador_id: ID,
              arg_posto_id: ID
            }
          \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_posto_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_id&#x27;</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _posto tweeks.posto;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _posto := tweeks._get_posto( arg_posto_id );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _posto.posto_estado = _const.maguita_posto_estado_aberto <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;Posto não pode ser encerrado!&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.posto
            <span style="color: #C76A40;
            font-weight: 800;">set</span>
              posto_estado = lib.swith( posto_estado, _const.maguita_posto_estado_encerado, _const.maguita_posto_estado_fechado  ),
              posto_colaborador_atualizacao = arg_colaborador_id,
              posto_dataatualizacao = <span style="color: #397300">current_timestamp</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> posto_id = arg_posto_id
            <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _posto
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;artigo&#x27;</span>, _posto,
            <span style="color: #4d99bf">&#x27;artigo_old&#x27;</span>, _posto,
            <span style="color: #4d99bf">&#x27;text&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">case</span>
              <span style="color: #C76A40;
            font-weight: 800;">when</span> _posto.posto_estado = _const.maguita_posto_estado_fechado   <span style="color: #C76A40;
            font-weight: 800;">then</span> format( <span style="color: #4d99bf">&#x27;O posto &quot;%s&quot; foi ativado!&#x27;</span>, _posto.posto_designacao )
              <span style="color: #C76A40;
            font-weight: 800;">when</span> _posto.posto_estado = _const.maguita_posto_estado_encerado <span style="color: #C76A40;
            font-weight: 800;">then</span> format( <span style="color: #4d99bf">&#x27;O posto &quot;%s&quot; foi desativo!&#x27;</span>, _posto.posto_designacao )
            <span style="color: #C76A40;
            font-weight: 800;">end</span>
          );

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_load_cliente {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_load_cliente(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_posto_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_id&#x27;</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          __branch_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #888">--language=PostgreSQL</span>
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __cliente <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  c.cliente_id,
                  c.cliente_titular,
                  c.cliente_nif
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.cliente c
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ( c._branch_uid = __branch_uid <span style="color: #C76A40;
            font-weight: 800;">and</span> c.cliente_estado = _const.maguita_cliente_estado_ativo )

                <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                  <span style="color: #C76A40;
            font-weight: 800;">case</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> c.cliente_id = lib.to_uuid( <span style="color: #C76A40">1</span> ) <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">1</span>
                    <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">2</span>
                  <span style="color: #C76A40;
            font-weight: 800;">end</span>,
                  c.cliente_titular
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _c ) <span style="color: #C76A40;
            font-weight: 800;">from</span> __cliente _c;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_reg_deposito {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_reg_deposito(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para registar uma nova amortizacao
            args := {
              arg_espaco_auth: ID,
              arg_colaborador_id: ID,
              deposito_montantetroco: TROCO*
              deposito_caixa_id: UID,
              deposito_tpaga_id: ID,
              deposito_currency_id: UID,
              deposito_posto_id: UID,
              deposito_cliente_id: UID,
              deposito_referencia: {conta_id}
              deposito_montantemoeda: MONTANTE,
              deposito_data: DATA,
              deposito_observacao: OBS?
              deposito_documento: DOC?
              deposito_docref: NUMERO DOC?,
              _tgrupo_id: UID
              _serie_id: UID
            }
          \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          _serie_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_serie_id&#x27;</span>;

          _deposito tweeks.deposito;
          _posto tweeks.posto;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _cambio <span style="color: #C76A40">record</span>;
          _caixa tweeks.caixa;
          _raise <span style="color: #C76A40">bool</span>;
          _rec <span style="color: #C76A40">record</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _raise := args-&gt;&gt;<span style="color: #4d99bf">&#x27;_raise&#x27;</span>;

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _deposito := jsonb_populate_record( _deposito, args );


          <span style="color: #C76A40;
            font-weight: 800;">if</span> _deposito.deposito_posto_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _posto := tweeks._get_posto( _deposito.deposito_posto_id );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _deposito.deposito_caixa_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _caixa := tweeks._get_caixa( _deposito.deposito_caixa_id );
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _caixa.caixa_estado != _const.maguita_caixa_estado_ativo <span style="color: #C76A40;
            font-weight: 800;">and</span> _raise <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;Não pode registar um deposito numa caixa fechado!&#x27;</span>;
            elseif _caixa.caixa_estado != _const.maguita_caixa_estado_ativo <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Não pode registar um deposito numa caixa fechado!&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          _deposito.deposito_data := coalesce( _deposito.deposito_data, <span style="color: #397300">current_date</span> );
          _deposito.deposito_colaborador_id := arg_colaborador_id;
          _deposito.deposito_espaco_auth := arg_espaco_auth;

          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _cambio <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.__load_cambio_day(
            arg_espaco_auth,
            _deposito.deposito_currency_id,
            <span style="color: #397300">current_date</span>,
            _const
          );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _cambio.cambio_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> _raise <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;@tweeks.conta.cambio-not-found&#x27;</span>;
          elseif _cambio.cambio_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Câmbio não foi encontrado!&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _deposito.deposito_montante := _deposito.deposito_montantemoeda * _cambio.cambio_taxa;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> coalesce( _deposito.deposito_montantetroco, <span style="color: #C76A40">0.0</span> ) &gt;= _deposito.deposito_montante <span style="color: #C76A40;
            font-weight: 800;">and</span> _raise <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;O montante de troco tem que ser inferior a montante cambiado!&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">elsif</span> coalesce( _deposito.deposito_montantetroco, <span style="color: #C76A40">0.0</span> ) &gt;= _deposito.deposito_montante <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;O montante de troco tem que ser inferior a montante cambiado!&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _deposito.deposito_referencia <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> _deposito.deposito_documento <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _rec := tweeks.__sets_generate_documento( arg_espaco_auth, (_const.maguita_tserie_recibo) <span style="color: #888">\/\* Recibo\*\/</span>, _serie_id );
            _deposito.deposito_documento := _rec.document;
            _deposito.deposito_serie := to_json( _rec );
            _deposito.deposito_serie_id := _rec.serie_id;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

        <span style="color: #888">--     if _deposito.deposito_referencia is null then</span>
        <span style="color: #888">--         _deposito.deposito_documento := tweeks.__sets_generate_documento( arg_espaco_auth, 2 \/\*Fatura Recibo \*\/  );</span>
        <span style="color: #888">--     else</span>
        <span style="color: #888">--         _deposito.deposito_documento := tweeks.__sets_generate_documento( arg_espaco_auth, 3 \/\* Recibo\*\/ );</span>
        <span style="color: #888">--     end if;</span>
        <span style="color: #888">--   --_deposito.deposito_documento := tweeks.__generate_deposito_serie( arg_espaco_auth );</span>

          <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _deposito
            <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets( _deposito )
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;deposito&#x27;</span>, _deposito
            )
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_artigo {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_artigo(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\**doc
                Essa função serve para carregar os artigos registrado
                args := {
                  arg_espaco_auth: ID
                  arg_colaborador_id: ID
                  arg_classe_id: ID
                  arg_artigo_estado: ARTIGO_ESTADO
                  query: {
                    any?: CODE|NAME|DESCRICAO
                    code?: CODE
                    name?: NAME
                    desc?: DESCRICAO
                  }
                }
           doc\*\/</span>
            arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
            arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
            arg_espaco_childs <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens_static( arg_espaco_auth );
            arg_classe_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_classe_id&#x27;</span>;
            arg_artigo_estado <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_artigo_estado&#x27;</span>;

            _query_any <span style="color: #C76A40">text</span>  <span style="color: #C76A40;
            font-weight: 800;">default</span> lower( args-&gt;<span style="color: #4d99bf">&#x27;query&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;any&#x27;</span> );
            _query_code <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lower( args-&gt;<span style="color: #4d99bf">&#x27;query&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;code&#x27;</span> );
            _query_name <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lower( args-&gt;<span style="color: #4d99bf">&#x27;query&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;name&#x27;</span> );
            _query_desc <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lower( args-&gt;<span style="color: #4d99bf">&#x27;query&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;desc&#x27;</span> );
            _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
            _branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

            <span style="color: #888">\/\**
              ID, NOME, STOCK, PRECO, [STOK-MINIMO], FOTO
             \*\/</span>
            <span style="color: #C76A40;
            font-weight: 800;">return query</span>
                <span style="color: #C76A40;
            font-weight: 800;">with</span>
                  __artigo <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                    <span style="color: #C76A40;
            font-weight: 800;">select</span>
                        art.artigo_id,
                        art.artigo_codigo,
                        art.artigo_descricao,
                        art.artigo_nome,
                        art.artigo_compostoquantidade,
                        art.artigo_artigo_id,
                        u.unit_id,
                        u.unit_code,
                        u.unit_name,
                        
                        uorig.unit_id <span style="color: #C76A40;
            font-weight: 800;">as</span> unit_originid,
                        uorig.unit_code <span style="color: #C76A40;
            font-weight: 800;">as</span> unit_origncode,
                        uorig.unit_name <span style="color: #C76A40;
            font-weight: 800;">as</span> unit_origenname,

                        art.artigo_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_childs ) <span style="color: #C76A40;
            font-weight: 800;">as</span> artigo_owner,
                        coalesce( s.stock_quantidade, <span style="color: #C76A40">0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> stock_quantidade,
                        art.artigo_foto,
                        art.artigo_espaco_auth,
                        art.artigo_classe_id,
                        art.artigo_estado,
                        art.artigo_stocknegativo,
                        art.artigo_codigoimposto,
                        origin.artigo_id <span style="color: #C76A40;
            font-weight: 800;">as</span> origin_id,
                        origin.artigo_codigo <span style="color: #C76A40;
            font-weight: 800;">as</span> origin_codigo,
                        origin.artigo_descricao <span style="color: #C76A40;
            font-weight: 800;">as</span> orign_descricao,
                        origin.artigo_nome <span style="color: #C76A40;
            font-weight: 800;">as</span> origin_nome,
                        origin.artigo_compostoquantidade <span style="color: #C76A40;
            font-weight: 800;">as</span> orign_compostoquantidade,
                        origin.artigo_artigo_id <span style="color: #C76A40;
            font-weight: 800;">as</span> origin_origin_id,

                        coalesce( array_agg( l.link_espaco_destino ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> l.link_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> ), <span style="color: #C76A40;
            font-weight: 800;">array</span>[]::<span style="color: #C76A40">uuid</span>[] )  <span style="color: #C76A40;
            font-weight: 800;">as</span> links,
                        ( lib.first( l.link_metadata ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> l.link_espaco_destino = arg_espaco_auth ) )-&gt;&gt;<span style="color: #4d99bf">&#x27;precario_custo&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> precario_custo,
                        ( lib.first( l.link_metadata ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> l.link_espaco_destino = arg_espaco_auth ) )-&gt;&gt;<span style="color: #4d99bf">&#x27;precario_quantidade&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> precario_quantidade,
                        ( ( lib.first( l.link_metadata ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> l.link_espaco_destino = arg_espaco_auth ) )-&gt;&gt;<span style="color: #4d99bf">&#x27;stock_minimo&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> link_stockminimo
                      <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo art
                        <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.unit u <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_unit_id = u.unit_id
                        <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.artigo origin <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_artigo_id = origin.artigo_id
                        <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.unit uorig <span style="color: #C76A40;
            font-weight: 800;">on</span> origin.artigo_unit_id = uorig.unit_id
                        <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.link l <span style="color: #C76A40;
            font-weight: 800;">on</span> l.link_estado = _const.maguita_link_estado_ativo
                          <span style="color: #C76A40;
            font-weight: 800;">and</span> ( l.link_referencia-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_id&#x27;</span> )::<span style="color: #C76A40">uuid</span> = art.artigo_id
                          <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_espaco_destino = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_childs )
                          <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_tlink_id = _const.maguita_tlink_preco
                          <span style="color: #C76A40;
            font-weight: 800;">and</span> l._branch_uid = _branch
                        <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.stock s <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_id = s.artigo_id
                          <span style="color: #C76A40;
            font-weight: 800;">and</span> s.espaco_id = arg_espaco_auth
                          <span style="color: #C76A40;
            font-weight: 800;">and</span> s._branch_uid = _branch
                      <span style="color: #C76A40;
            font-weight: 800;">where</span> art._branch_uid = _branch
                      <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> 
                        art.artigo_id,
                        u.unit_id,
                        uorig.unit_id,
                        origin.artigo_id,
                        s.stock_quantidade
                  ), __filter <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                    <span style="color: #C76A40;
            font-weight: 800;">select</span> *,
                        coalesce( art.link_stockminimo ) <span style="color: #C76A40;
            font-weight: 800;">as</span> stock_minimo
                      <span style="color: #C76A40;
            font-weight: 800;">from</span> __artigo art
                      <span style="color: #C76A40;
            font-weight: 800;">where</span> ( coalesce( art.links, <span style="color: #C76A40;
            font-weight: 800;">array</span>[]::<span style="color: #C76A40">uuid</span>[] )||art.artigo_espaco_auth ) &amp;&amp; arg_espaco_childs
                        <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_classe_id = coalesce( arg_classe_id, art.artigo_classe_id )
                        <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_estado = coalesce( arg_artigo_estado, art.artigo_estado )
                 ), __filter_query <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                    <span style="color: #C76A40;
            font-weight: 800;">select</span> *,
                      format( <span style="color: #4d99bf">&#x27;%s %s %s&#x27;</span>, f.artigo_codigo, f.artigo_nome, f.artigo_descricao ) <span style="color: #C76A40;
            font-weight: 800;">as</span> _search_term
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> __filter f
                    <span style="color: #C76A40;
            font-weight: 800;">where</span> arg_classe_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> f.artigo_classe_id != _const.classe_itemextra
                   ), __query <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                     <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                        <span style="color: #C76A40;
            font-weight: 800;">from</span> __filter_query _f
                        <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                          <span style="color: #C76A40;
            font-weight: 800;">and</span> lower( _f.artigo_codigo ) = lower( coalesce( _query_code, _f.artigo_codigo ) )
                          <span style="color: #C76A40;
            font-weight: 800;">and</span> lower( _f.artigo_nome ) <span style="color: #C76A40;
            font-weight: 800;">like</span> lower( format( <span style="color: #4d99bf">&#x27;%%%s%%&#x27;</span>, coalesce( _query_name, _f.artigo_nome ) ) )
                          <span style="color: #C76A40;
            font-weight: 800;">and</span> lower( coalesce( _f.artigo_descricao, <span style="color: #4d99bf">&#x27;&#x27;</span> ) ) <span style="color: #C76A40;
            font-weight: 800;">like</span> lower( format( <span style="color: #4d99bf">&#x27;%%%s%%&#x27;</span>, coalesce( _query_desc, _f.artigo_descricao ) ) )
                          <span style="color: #C76A40;
            font-weight: 800;">and</span> (
                            lower( _f.artigo_codigo ) = lower( coalesce( _query_any, _f.artigo_codigo ) )
                            <span style="color: #C76A40;
            font-weight: 800;">or</span> lower( _f.artigo_nome) <span style="color: #C76A40;
            font-weight: 800;">like</span> lower( format( <span style="color: #4d99bf">&#x27;%%%s%%&#x27;</span>, coalesce( _query_any, _f.artigo_nome ) ) )
                            <span style="color: #C76A40;
            font-weight: 800;">or</span> lower( coalesce( _f.artigo_descricao, <span style="color: #4d99bf">&#x27;&#x27;</span> ) ) <span style="color: #C76A40;
            font-weight: 800;">like</span> lower( format( <span style="color: #4d99bf">&#x27;%%%s%%&#x27;</span>, coalesce( _query_any, _f.artigo_descricao, <span style="color: #4d99bf">&#x27;&#x27;</span> ) ))
                          )
                     <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                         <span style="color: #C76A40;
            font-weight: 800;">case</span>
                             <span style="color: #C76A40;
            font-weight: 800;">when</span> _f.artigo_estado = _const.artigo_estado_ativo <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">1</span>
                             <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">2</span>
                             <span style="color: #C76A40;
            font-weight: 800;">end</span>,
                         <span style="color: #C76A40;
            font-weight: 800;">case</span>
                             <span style="color: #C76A40;
            font-weight: 800;">when</span> _f.artigo_espaco_auth = arg_espaco_auth <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">1</span>
                             <span style="color: #C76A40;
            font-weight: 800;">when</span> _f.artigo_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_childs ) <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">2</span>
                             <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">3</span>
                             <span style="color: #C76A40;
            font-weight: 800;">end</span>,
                         _f.artigo_nome <span style="color: #C76A40;
            font-weight: 800;">desc</span>
                        
                  ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _q ) - <span style="color: #4d99bf">&#x27;links&#x27;</span>
                    
                      <span style="color: #C76A40;
            font-weight: 800;">from</span> __query _q
            ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_report_parametrized {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_report_parametrized(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**doc
            args := {
              _branch:text
              _user_id: text
              _workspace: text,
              _grants: text
            }
           doc\*\/</span>
            _branch <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_branch&#x27;</span>;
            _user_id <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_user_id&#x27;</span>;
            _workspace <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_workspace&#x27;</span>;
            _grants <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_grants&#x27;</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">return query</span> 
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __parametrized_report <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                <span style="color: #C76A40;
            font-weight: 800;">from</span> report.parametrized p
                <span style="color: #C76A40;
            font-weight: 800;">where</span> p._branch_uid = _branch
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> _workspace = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( p.parametrized_grants )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ( _grants <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> _grants = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( p.parametrized_grants ) )
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> p.parametrized_name
            )  <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _pr )
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __parametrized_report _pr;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_espaco_configuracao {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_espaco_configuracao(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para devolver o espaço onde deve ser processado a fatura
            arg_espaco_auth := ID
           \*\/</span>
          arg_espaco_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          _espaco <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

        <span style="color: #888">--   Obter o espaço superior que pode gerar numero de seire</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> <span style="color: #C76A40;
            font-weight: 800;">recursive</span> __espaco <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> e.*, e.espaco_gerarfatura <span style="color: #C76A40;
            font-weight: 800;">as</span> __generate_serie
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.espaco e
              <span style="color: #C76A40;
            font-weight: 800;">where</span> e.espaco_id = arg_espaco_id
              <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span> w.*, w.espaco_configurar
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __espaco _e
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco w <span style="color: #C76A40;
            font-weight: 800;">on</span> _e.espaco_espaco_id = w.espaco_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _e.__generate_serie
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _espaco <span style="color: #C76A40;
            font-weight: 800;">from</span> __espaco __e
              <span style="color: #C76A40;
            font-weight: 800;">where</span> __e.__generate_serie
            ;

        <span style="color: #888">--   with recursive parent as (</span>
        <span style="color: #888">--       select e.* from tweeks.espaco e where e.espaco_id = arg_espaco_id</span>
        <span style="color: #888">--     union all</span>
        <span style="color: #888">--       select e.*</span>
        <span style="color: #888">--         from parent p</span>
        <span style="color: #888">--           inner join tweeks.espaco e on p.espaco_espaco_id = e.espaco_id</span>
        <span style="color: #888">--         where not p.espaco_configurar</span>
        <span style="color: #888">--   ) select l.* into _espaco</span>
        <span style="color: #888">--   from parent l</span>
        <span style="color: #888">--     where l.espaco_configurar</span>
        <span style="color: #888">--   ;</span>

          _espaco.espaco_configurar := arg_espaco_id = _espaco.espaco_id <span style="color: #C76A40;
            font-weight: 800;">and</span> _espaco.espaco_configurar;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> jsonb_build_object(
            <span style="color: #4d99bf">&#x27;espaco&#x27;</span>, lib.jsonb_values( _espaco, <span style="color: #4d99bf">&#x27;espaco_configurar&#x27;</span>, <span style="color: #4d99bf">&#x27;espaco_configuracao&#x27;</span>, <span style="color: #4d99bf">&#x27;espaco_id&#x27;</span>, <span style="color: #4d99bf">&#x27;espaco_nome&#x27;</span> )
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_reg_vendaimposto {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_reg_vendaimposto(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para aplicar os imposto numa venda
            args := {
              arg_colaborador_id: ID,
              arg_venda_id: ID,
              arg_artigo_id: ID,
              arg_espaco_auth: ID
            }
           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_venda_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_venda_id&#x27;</span>;
          arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          _data <span style="color: #C76A40">record</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _venda tweeks.venda;

          arg_taxa_taxa <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>;
          arg_taxa_percentagem <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>;
          _taxa_agregada <span style="color: #C76A40">record</span>;

          arg_venda_montantesemimposto <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>;
          arg_valor_retirar_bruto <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>;
          arg_valor_retirar_percentagem <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>;
          arg_imposto_multiplicador <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>;

          arg_venda_impostoadicionar <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40">0.0</span>;
          arg_venda_impostoretirar <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40">0.0</span>;
          icount <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40">0</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _venda := tweeks._get_venda( arg_venda_id );

          _taxa_agregada := tweeks._get_impostos_taxa( arg_artigo_id, arg_espaco_auth );


          <span style="color: #888">-- Retivar o valor bruto em seguida retivar o valor da percentagem</span>
          arg_valor_retirar_bruto := _taxa_agregada.taxa_retirar;
          arg_valor_retirar_percentagem := <span style="color: #C76A40;
            font-weight: 800;">rule</span>.taxa_retirar_percentagem_adicionada(
            _venda.venda_montantetotal - arg_valor_retirar_bruto,
            _taxa_agregada.percentagem_retirar
          );

          arg_venda_montantesemimposto := _venda.venda_montantetotal - ( arg_valor_retirar_bruto + arg_valor_retirar_percentagem );

          <span style="color: #888">-- Desativar todos os impostos que não vão mais ser aplicados</span>
          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.impostovenda
            <span style="color: #C76A40;
            font-weight: 800;">set</span> impostovenda_estado = _const.impostovenda_estado_fechado,
                impostovenda_colaborador_atualizacao = arg_colaborador_id,
                impostovenda_dataatualizacao = <span style="color: #397300">current_timestamp</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> impostovenda_venda_id = _venda.venda_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> impostovenda_estado = _const.impostovenda_estado_ativo
          ;

          <span style="color: #C76A40;
            font-weight: 800;">for</span> _data <span style="color: #C76A40;
            font-weight: 800;">in</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
              ip.*,
              (txass::tweeks.taxa).*,
              tap.*
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.imposto ip
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.taplicar tap <span style="color: #C76A40;
            font-weight: 800;">on</span> ip.imposto_taplicar_id = tap.taplicar_id
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.taxa txass <span style="color: #C76A40;
            font-weight: 800;">on</span> ip.imposto_tipoimposto_id = txass.taxa_tipoimposto_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span> txass.taxa_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _taxa_agregada.taxas )
              <span style="color: #C76A40;
            font-weight: 800;">and</span> ip.imposto_artigo_id = arg_artigo_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> ip.imposto_estado = _const.maguita_imposto_estado_ativo
          <span style="color: #C76A40;
            font-weight: 800;">loop</span>

            arg_taxa_taxa := <span style="color: #C76A40">0</span>;
            arg_taxa_percentagem := <span style="color: #C76A40">0</span>;
            arg_imposto_multiplicador := <span style="color: #C76A40">1.0</span>;
            arg_venda_impostoadicionar := <span style="color: #C76A40">0</span>;
            arg_venda_impostoretirar := <span style="color: #C76A40">0</span>;

            <span style="color: #888">-- Quando a taxa a aplicar for</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _data.taxa_percentagem <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> _data.taxa_percentagem &gt; <span style="color: #C76A40">0.0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              arg_taxa_taxa :=  coalesce( arg_venda_montantesemimposto * ( _data.taxa_percentagem / <span style="color: #C76A40">100.0</span> ), <span style="color: #C76A40">0</span> );
              arg_taxa_percentagem := _data.taxa_percentagem;

            <span style="color: #C76A40;
            font-weight: 800;">elsif</span> _data.taxa_taxa <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> _data.taxa_taxa &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              arg_taxa_taxa := _data.taxa_taxa;
              arg_taxa_percentagem := ( _data.taxa_taxa  * <span style="color: #C76A40">100.0</span> ) / arg_venda_montantesemimposto;

            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #888">-- Se o valor for zero então saltar a taxa</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_taxa_taxa = <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">continue</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _data.taplicar_id = _const.taplicar_adicionar <span style="color: #C76A40;
            font-weight: 800;">then</span>
              arg_venda_impostoadicionar := arg_venda_impostoadicionar + arg_taxa_taxa;
            <span style="color: #C76A40;
            font-weight: 800;">else</span>
              arg_venda_impostoretirar := arg_venda_impostoretirar + arg_taxa_taxa;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _data.taplicar_id = _const.taplicar_retirar <span style="color: #C76A40;
            font-weight: 800;">then</span>
              arg_imposto_multiplicador := <span style="color: #C76A40">-1.0</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.impostovenda(
              impostovenda_venda_id,
              impostovenda_tipoimposto_id,
              impostovenda_espaco_auth,
              impostovenda_colaborador_id,
              impostovenda_valor,
              impostovenda_percentagem
            ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
              arg_venda_id,
              _data.taxa_tipoimposto_id,
              arg_espaco_auth,
              arg_colaborador_id,
              ( arg_taxa_taxa * arg_imposto_multiplicador ),
              arg_taxa_percentagem
            );
            icount := icount +<span style="color: #C76A40">1</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.venda
            <span style="color: #C76A40;
            font-weight: 800;">set</span> venda_montantesemimposto = arg_venda_montantesemimposto,
                venda_montantecomimposto = arg_venda_montantesemimposto + arg_venda_impostoadicionar + arg_venda_impostoretirar,
                venda_imposto = arg_venda_impostoadicionar + arg_venda_impostoretirar,
                venda_impostoadicionar = arg_venda_impostoretirar,
                venda_impostoretirar = arg_venda_impostoretirar
            <span style="color: #C76A40;
            font-weight: 800;">where</span> venda_id = arg_venda_id
            <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _venda
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;venda&#x27;</span>, _venda
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __lancamento_regularizacao {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__lancamento_regularizacao(args <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(ordem <span style="color: #C76A40">bigint</span>, ordem_grupo <span style="color: #C76A40">bigint</span>, cd <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, credito <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, debito <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, valor <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, entrada <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, saldo <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, resumo <span style="color: #C76A40">boolean</span>, acomulacao <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, regula_acumulacao <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, regula_montante <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, regula <span style="color: #C76A40">numeric</span>[], regula_id <span style="color: #C76A40">uuid</span>[], regula_refid <span style="color: #C76A40">uuid</span>[], cliente_id <span style="color: #C76A40">uuid</span>, tgrupo_id <span style="color: #C76A40">smallint</span>, lancamento_id <span style="color: #C76A40">uuid</span>, lancamento_refid <span style="color: #C76A40">uuid</span>, lancamento_ref <span style="color: #C76A40">jsonb</span>, lancamento_class <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, lancamento_doc <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, lancamento_data <span style="color: #C76A40">date</span>, lancamento_time <span style="color: #C76A40">timestamp</span> <span style="color: #C76A40">with time zone</span>, lancamento_sequencia <span style="color: #C76A40">bigint</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            arg_cliente_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;cliente_id&#x27;</span>;
            arg_tgropu_id <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;tgrupo_id&#x27;</span>;
            arg_branch_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_braunc_uid&#x27;</span>;
            arg_resumo <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;resumo&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            arg_resumo := coalesce( arg_resumo, <span style="color: #C76A40;
            font-weight: 800;">false</span> );
            <span style="color: #C76A40;
            font-weight: 800;">return query</span>
              <span style="color: #C76A40;
            font-weight: 800;">with</span> <span style="color: #C76A40;
            font-weight: 800;">recursive</span> _const <span style="color: #C76A40;
            font-weight: 800;">as</span> ( <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>() ),
                __lancamento <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    row_number() <span style="color: #C76A40;
            font-weight: 800;">over</span> ( <span style="color: #C76A40;
            font-weight: 800;">partition</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> la.lancamento_cliente_id, la._branch_uid, la._tgrupo_id <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> la.lancamento_dataregistro, la.lancamento_sequencia ) <span style="color: #C76A40;
            font-weight: 800;">as</span> ordem,
                    count(*) <span style="color: #C76A40;
            font-weight: 800;">over</span> ( <span style="color: #C76A40;
            font-weight: 800;">partition</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> la.lancamento_cliente_id, la._branch_uid, la._tgrupo_id) <span style="color: #C76A40;
            font-weight: 800;">as</span> counts,
                    la.lancamento_valor * la.lancamento_operacao <span style="color: #C76A40;
            font-weight: 800;">as</span> entrada,
                    la.lancamento_valor <span style="color: #C76A40;
            font-weight: 800;">as</span> valor,
                    la.lancamento_credito <span style="color: #C76A40;
            font-weight: 800;">as</span> credito,
                    la.lancamento_debito <span style="color: #C76A40;
            font-weight: 800;">as</span> debito,
                    la.lancamento_cliente_id <span style="color: #C76A40;
            font-weight: 800;">as</span> cliente,
                    la._tgrupo_id <span style="color: #C76A40;
            font-weight: 800;">as</span> grupo,
                    la._branch_uid <span style="color: #C76A40;
            font-weight: 800;">as</span> branch,
                    la.lancamento_id <span style="color: #C76A40;
            font-weight: 800;">as</span> id,
                    la.lancamento_refid <span style="color: #C76A40;
            font-weight: 800;">as</span> refid,
                    <span style="color: #C76A40;
            font-weight: 800;">case</span>
                      <span style="color: #C76A40;
            font-weight: 800;">when</span> la.lancamento_operacao = <span style="color: #C76A40">-1</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #4d99bf">&#x27;D&#x27;</span>
                      <span style="color: #C76A40;
            font-weight: 800;">when</span> la.lancamento_operacao = <span style="color: #C76A40">1</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #4d99bf">&#x27;C&#x27;</span>
                    <span style="color: #C76A40;
            font-weight: 800;">end</span>::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> cd,
                    la <span style="color: #C76A40;
            font-weight: 800;">as</span> _lan
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.lancamento la
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> _const _c <span style="color: #C76A40;
            font-weight: 800;">on</span> la.lancamento_estado = _c.maguita_lancamento_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> la.lancamento_cliente_id = coalesce( arg_cliente_id, la.lancamento_cliente_id )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> la._branch_uid = coalesce( arg_branch_uid, la._branch_uid )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> la._tgrupo_id = coalesce( arg_tgropu_id, la._tgrupo_id )
                  <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> la.lancamento_dataregistro,
                    la.lancamento_sequencia
              ), __sequence <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>  _l.*,
                    _l.entrada <span style="color: #C76A40;
            font-weight: 800;">as</span> saldo,
                    <span style="color: #C76A40">1</span>::<span style="color: #C76A40">int8</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> ordem_tipo,
                    <span style="color: #C76A40;
            font-weight: 800;">case</span>
                      <span style="color: #C76A40;
            font-weight: 800;">when</span> _l.cd = <span style="color: #4d99bf">&#x27;D&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> _l.ordem
                      <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">0</span>
                    <span style="color: #C76A40;
            font-weight: 800;">end</span> seq_debito,
                    <span style="color: #C76A40;
            font-weight: 800;">case</span>
                      <span style="color: #C76A40;
            font-weight: 800;">when</span> _l.cd = <span style="color: #4d99bf">&#x27;C&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> _l.ordem
                      <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">0</span>
                    <span style="color: #C76A40;
            font-weight: 800;">end</span> seq_credito
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __lancamento _l
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> _l.ordem = <span style="color: #C76A40">1</span>
                  <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
                    <span style="color: #C76A40;
            font-weight: 800;">select</span> _l.*,
                       s.saldo + _l.entrada,
                       <span style="color: #C76A40;
            font-weight: 800;">case</span>
                         <span style="color: #C76A40;
            font-weight: 800;">when</span> _l.cd = <span style="color: #4d99bf">&#x27;D&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> s.seq_debito +<span style="color: #C76A40">1</span>
                         <span style="color: #C76A40;
            font-weight: 800;">else</span> s.seq_credito +<span style="color: #C76A40">1</span>
                        <span style="color: #C76A40;
            font-weight: 800;">end</span>,
                      <span style="color: #C76A40;
            font-weight: 800;">case</span>
                        <span style="color: #C76A40;
            font-weight: 800;">when</span> _l.cd = <span style="color: #4d99bf">&#x27;D&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> s.seq_debito +<span style="color: #C76A40">1</span>
                        <span style="color: #C76A40;
            font-weight: 800;">else</span> s.seq_debito
                      <span style="color: #C76A40;
            font-weight: 800;">end</span>,
                      <span style="color: #C76A40;
            font-weight: 800;">case</span>
                        <span style="color: #C76A40;
            font-weight: 800;">when</span> _l.cd = <span style="color: #4d99bf">&#x27;C&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> s.seq_credito +<span style="color: #C76A40">1</span>
                        <span style="color: #C76A40;
            font-weight: 800;">else</span> s.seq_credito
                      <span style="color: #C76A40;
            font-weight: 800;">end</span>
                      <span style="color: #C76A40;
            font-weight: 800;">from</span> __sequence s
                        <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __lancamento _l <span style="color: #C76A40;
            font-weight: 800;">on</span> s.ordem + <span style="color: #C76A40">1</span> = _l.ordem
                          <span style="color: #C76A40;
            font-weight: 800;">and</span> _l.cliente = s.cliente
                          <span style="color: #C76A40;
            font-weight: 800;">and</span>  _l.branch = s.branch
                          <span style="color: #C76A40;
            font-weight: 800;">and</span>  _l.grupo = s.grupo
              ), __acomulacao <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span> s.*,
                    <span style="color: #C76A40">0</span>::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> previewac,
                    s.valor <span style="color: #C76A40;
            font-weight: 800;">as</span> acomulacao
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __sequence s
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> s.ordem_tipo = <span style="color: #C76A40">1</span>
                <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
                  <span style="color: #C76A40;
            font-weight: 800;">select</span> s.*,
                    sp.valor + ac.previewac <span style="color: #C76A40;
            font-weight: 800;">as</span> preview,
                    s.valor  + ac.acomulacao
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __acomulacao ac
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __sequence s <span style="color: #C76A40;
            font-weight: 800;">on</span> ac.ordem_tipo + <span style="color: #C76A40">1</span> = s.ordem_tipo
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ac.cd = s.cd
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ac.cliente = s.cliente
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ac.branch = s.branch
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ac.grupo = s.grupo
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> __sequence sp <span style="color: #C76A40;
            font-weight: 800;">on</span> sp.cd = s.cd
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> s.ordem_tipo - <span style="color: #C76A40">1</span> = sp.ordem_tipo
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> s.cliente = sp.cliente
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> s.branch = sp.branch
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> s.grupo = sp.grupo
              ), __regularizacao <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    array_agg(_reg.valor::<span style="color: #C76A40">numeric</span> <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> _reg.ordem ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> _reg.valor <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> ) regularizacao,
                    array_agg(_reg.id <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> _reg.ordem ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> _reg.valor <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>  ) regularizacao_id,
                    array_agg(_reg.refid <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> _reg.ordem ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> _reg.valor <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> )  regularizacao_refid,
                    max( _reg.acomulacao )  regularizacao_acomulacao,
                  _lanc
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __acomulacao _lanc
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> __acomulacao _reg <span style="color: #C76A40;
            font-weight: 800;">on</span> _reg.cd != _lanc.cd
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> _lanc.cliente = _reg.cliente
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> _lanc.branch = _reg.branch
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> _lanc.grupo = _reg.grupo
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> _reg.previewac &lt; _lanc.acomulacao
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> _reg.acomulacao &gt; _lanc.previewac
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> _lanc
              ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  ( _lanc ).ordem,
                  ( _lanc ).ordem_tipo,
                  ( _lanc ).cd,
                  ( _lanc ).credito,
                  ( _lanc ).debito,
                  ( _lanc ).valor,
                  ( _lanc ).entrada,
                  ( _lanc ).saldo,
                  ( _lanc ).counts = ( _lanc ).ordem <span style="color: #C76A40;
            font-weight: 800;">as</span> resumo,
                   <span style="color: #888">--- AGUI</span>
                  ( _lanc ).acomulacao,
                  ( coalesce(_reg.regularizacao_acomulacao, lag( _reg.regularizacao_acomulacao , <span style="color: #C76A40">1</span> ) <span style="color: #C76A40;
            font-weight: 800;">over</span> ()) ) <span style="color: #C76A40;
            font-weight: 800;">as</span> acomulacao,
                  <span style="color: #C76A40;
            font-weight: 800;">case</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> coalesce( regularizacao_acomulacao, lag( regularizacao_acomulacao, <span style="color: #C76A40">1</span> ) <span style="color: #C76A40;
            font-weight: 800;">over</span> () ) - ( _lanc ).acomulacao &gt;= <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ( _lanc ).valor
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> coalesce( regularizacao_acomulacao, lag( regularizacao_acomulacao, <span style="color: #C76A40">1</span> ) <span style="color: #C76A40;
            font-weight: 800;">over</span> () ) - ( _lanc ).acomulacao  &lt; <span style="color: #C76A40">0</span>
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ( coalesce( regularizacao_acomulacao, lag( regularizacao_acomulacao, <span style="color: #C76A40">1</span> ) <span style="color: #C76A40;
            font-weight: 800;">over</span> () ) - ( _lanc ).acomulacao ) * <span style="color: #C76A40">-1</span> &lt; ( _lanc ).valor
                    <span style="color: #C76A40;
            font-weight: 800;">then</span> ( _lanc ).valor +  (coalesce( regularizacao_acomulacao, lag( regularizacao_acomulacao, <span style="color: #C76A40">1</span> ) <span style="color: #C76A40;
            font-weight: 800;">over</span> () ) - ( _lanc ).acomulacao)
                    <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">0</span>
                  <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> regulado,
                  _reg.regularizacao,
                  _reg.regularizacao_id,
                  _reg.regularizacao_refid,

                  ( _lanc ).cliente,
                  ((_lanc)._lan )._tgrupo_id,
                  ((_lanc)._lan ).lancamento_id,
                  ((_lanc)._lan ).lancamento_refid,
                  ((_lanc)._lan ).lancamento_referencia,
                  ((_lanc)._lan ).lancamento_regclass,
                  ((_lanc)._lan ).lancamento_documento,
                  ((_lanc)._lan ).lancamento_data,
                  ((_lanc)._lan ).lancamento_dataregistro,
                  ((_lanc)._lan ).lancamento_sequencia
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __regularizacao _reg
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> arg_resumo <span style="color: #C76A40;
            font-weight: 800;">or</span>  ( _lanc ).counts = ( _lanc ).ordem
                <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                  ( _lanc ).cliente,
                  ( _lanc ).grupo,
                  ( _lanc ).branch,
                  ( _lanc ).ordem
            ;
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __artigo_has_stock {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__artigo_has_stock(arg_artigo_id <span style="color: #C76A40">uuid</span>, arg_espaco_id <span style="color: #C76A40">uuid</span>, arg_quantidadedebito <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">boolean</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\** Essa função serve para verificar se existe diponibilidade de um artig em um stock para cobrir uma quantidade de debito
             \*\/</span>
            _artigo tweeks.artigo;
            _stock <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            _artigo := tweeks._get_artigo( arg_artigo_id );

            <span style="color: #888">-- Aceitar sempre que o artigo for do tipo staock negativo</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _artigo.artigo_stocknegativo <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks._get_stock( arg_artigo_id, arg_espaco_id )
              <span style="color: #C76A40;
            font-weight: 800;">into</span> _stock
            ;
            
            <span style="color: #C76A40;
            font-weight: 800;">return</span> _stock.stock_quantidade &gt;= arg_quantidadedebito;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_posto {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_posto(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\** Essa função serve para devolver os postos
              filter := {
                arg_colaborador_id UUID
                arg_espaco_auth UUID
                arg_aloca_espaco:UUID
              }
             \*\/</span>
            arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
            arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
            __branch <span style="color: #C76A40">uuid</span>;
            arg_espaco_child <span style="color: #C76A40">uuid</span>[];
            arg_aloca_espaco <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_aloca_espaco&#x27;</span>;
            _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            arg_espaco_child :=  <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
            __branch := tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
            
            <span style="color: #C76A40;
            font-weight: 800;">if</span> __branch <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">return</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            
            _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
            <span style="color: #C76A40;
            font-weight: 800;">return query</span>
                <span style="color: #C76A40;
            font-weight: 800;">with</span> __alocacao <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                a.aloca_posto_id <span style="color: #C76A40;
            font-weight: 800;">as</span> posto_id,
                sum( a.aloca_montante ) <span style="color: #C76A40;
            font-weight: 800;">as</span> posto_montante,
                coalesce( array_agg( e.espaco_id ), <span style="color: #C76A40;
            font-weight: 800;">array</span>[]::<span style="color: #C76A40">uuid</span>[] )||a.aloca_posto_id <span style="color: #C76A40;
            font-weight: 800;">as</span> posto_espacos,
                jsonb_agg( to_jsonb( a )||to_jsonb( e ) ) <span style="color: #C76A40;
            font-weight: 800;">as</span> posto_alocacao
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.aloca a
                     <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> a.aloca_espaco_destino = e.espaco_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> a.aloca_estado = _const.maguita_aloca_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> e.espaco_estado = _const.maguita_espaco_estado_ativo
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> a.aloca_posto_id
            ), __posto_filter <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                pos.posto_id,
                pos.posto_designacao,
                pos.posto_estado != _const.maguita_posto_estado_encerado <span style="color: #C76A40;
            font-weight: 800;">as</span> posto_ativo,
                a.posto_montante <span style="color: #C76A40;
            font-weight: 800;">as</span> posto_montante,
                coalesce( a.posto_alocacao, jsonb_build_array() ) <span style="color: #C76A40;
            font-weight: 800;">as</span> posto_alocacao,
                pos.posto_estado,
                pos.posto_caixamode,
                pos.posto_authmode,
                pos.posto_chave,
                pos.posto_vermontatefaturado,
                pos.posto_multiplecaixa,
                pos.posto_definirmontanteautomaticamente,
                tpos.tposto_id,
                tpos.tposto_designacao
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.posto pos
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.tposto tpos <span style="color: #C76A40;
            font-weight: 800;">on</span> pos.posto_tposto_id = tpos.tposto_id
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> __alocacao a <span style="color: #C76A40;
            font-weight: 800;">on</span> pos.posto_id = a.posto_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> pos._branch_uid = __branch
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ( arg_aloca_espaco = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( a.posto_espacos ) <span style="color: #C76A40;
            font-weight: 800;">or</span> arg_aloca_espaco <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> )
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> pos.posto_estado = _const.maguita_posto_estado_aberto <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">1</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> pos.posto_estado = _const.maguita_posto_estado_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">2</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> pos.posto_estado = _const.maguita_posto_estado_encerado <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">3</span>
                <span style="color: #C76A40;
            font-weight: 800;">end</span>,
                pos.posto_designacao
            ), __treat_posto <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> ps.*,
                coalesce( ps.posto_alocacao, jsonb_build_array() ) <span style="color: #C76A40;
            font-weight: 800;">as</span> posto_alocacao
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __posto_filter ps
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( t )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __treat_posto t
          ;
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_espaco {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_espaco(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função lista todos os espacos registrado no sistema
            filter := {
              arg_espaco_auth: ID,
              arg_colaborador_id: UID
            }
          \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens_static( arg_espaco_auth );
          ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __espaco <span style="color: #C76A40;
            font-weight: 800;">as</span> (

            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                esp.espaco_id,
                esp.espaco_nome,
                esp.espaco_vender,
                esp.espaco_descricao,
                esp.espaco_codigo,
                esp.espaco_estado,
                esp.espaco_dataregistro,
                esp.espaco_dataatualizacao,
                esp.espaco_gerarfatura,
                esp.espaco_configurar,
                esp.espaco_configuracao,
                esp.espaco_nivel,
                esp.espaco_posto_admin,
                clu.cluster_identifier,
                clu.cluster_name,
                po.posto_id,
                po.posto_designacao,
                po.posto_chave,
                po.posto_matricula

              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.espaco esp
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.branch br <span style="color: #C76A40;
            font-weight: 800;">on</span> esp.espaco_branch_uid = br.branch_uid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> br.branch_uid = ___branch
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.posto po <span style="color: #C76A40;
            font-weight: 800;">on</span> esp.espaco_posto_admin = po.posto_id
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> clu <span style="color: #C76A40;
            font-weight: 800;">on</span> clu.cluster_identifier = esp.espaco_vender
        <span style="color: #888">--           and clu.cluster_identifier = any( br.branch_clusters )</span>
              <span style="color: #C76A40;
            font-weight: 800;">where</span> esp.espaco_espaco_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
                <span style="color: #C76A40;
            font-weight: 800;">or</span> esp.espaco_id = arg_espaco_auth
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> esp.espaco_nivel,
                esp.espaco_nome
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( e  )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __espaco e
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __generate_fornecedor_code {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__generate_fornecedor_code(_branch <span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">text</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          __fornecedor_code <span style="color: #C76A40">text</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">while</span> __fornecedor_code <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>
              __fornecedor_code := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.next( <span style="color: #4d99bf">&#x27;fornecedor/seq&#x27;</span>, lpad := <span style="color: #C76A40">2</span>, lpad_char := <span style="color: #4d99bf">&#x27;0&#x27;</span>, sub :=  _branch::<span style="color: #C76A40">text</span> );
              <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
                  <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.fornecedor f
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> f.fornecedor_code = __fornecedor_code
                ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
                __fornecedor_code := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span>  __fornecedor_code;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_conta_by_caixa {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_conta_by_caixa(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função server para devolver a lista de todas as contas pagas em uma caixa
            filter := {
              arg_caixa_id: ID
            }
           \*\/</span>
          arg_caixa_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_caixa_id&#x27;</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( tweeks.funct_load_conta_data( jsonb_build_object( <span style="color: #4d99bf">&#x27;arg_conta_id&#x27;</span>, ct.conta_id ) ) )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_caixa_fechopagamento = arg_caixa_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_estado = _const.conta_estado_pago
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_report_venda {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_report_venda(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_posto_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_id&#x27;</span>;
          arg_date_start <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_date_start&#x27;</span>;
          arg_date_end <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_date_end&#x27;</span>;
          branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __venda <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  art.artigo_id,
                  art.artigo_nome,
                  v.venda_custounitario,
                  sum( v.venda_quantidade ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_quantidade,
                  sum( v.venda_montantecomimposto ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_montantecomimposto,
                  sum( v.venda_montantesemimposto ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_montantesemimposto
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.venda v
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> v.venda_artigo_id = art.artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.conta ct <span style="color: #C76A40;
            font-weight: 800;">on</span> v.venda_conta_id = ct.conta_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> v._branch_uid = branch
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> v.venda_estado = _const.maguita_venda_estado_fechado
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_estado = _const.maguita_conta_estado_fechado
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_datafecho::<span style="color: #C76A40">date</span> &gt;= coalesce( arg_date_start, ct.conta_datafecho::<span style="color: #C76A40">date</span> )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_datafecho::<span style="color: #C76A40">date</span> &lt;= coalesce( arg_date_end, ct.conta_datafecho::<span style="color: #C76A40">date</span> )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_posto_fecho = arg_posto_id
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> art.artigo_id,
                  v.venda_custounitario
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( v2 )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __venda v2
            ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __tg_fluxo_on_transferencia {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__tg_fluxo_on_transferencia()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _new tweeks.transferencia;
          _fluxo tweeks.fluxo;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_replication() <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _new := <span style="color: #397300">new</span>;

          _fluxo.fluxo_toperacao_id := _const.maguita_toperacao_transferencia;
          _fluxo.fluxo_documento := _new.transferencia_documento;
          _fluxo.fluxo_data := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          _fluxo.fluxo_referencia := lib.sets_ref(<span style="color: #397300">new</span> );
          _fluxo.fluxo_regclass := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( pg_typeof( <span style="color: #397300">new</span> )::<span style="color: #C76A40">text</span>::<span style="color: #C76A40">regclass</span> );

          _fluxo.fluxo_refuid := _new.transferencia_id;
          _fluxo.fluxo_quantidadein := _new.transferencia_quantidade;
          _fluxo.fluxo_quantidadeout := _new.transferencia_quantidade;

          _fluxo.fluxo_artigo_in := _new.transferencia_artigo_id;
          _fluxo.fluxo_artigo_out := _new.transferencia_artigo_id;

          _fluxo.fluxo_espaco_out := _new.transferencia_espaco_origem;
          _fluxo.fluxo_espaco_in := _new.transferencia_espaco_destino;

          _fluxo.fluxo_espaco_auth := _new.transferencia_espaco_auth;
          _fluxo.fluxo_colaborador_id := _new.transferencia_colaborador_id;

          <span style="color: #C76A40;
            font-weight: 800;">perform</span> lib.sets_in( _fluxo );
          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_load_artigo_composto {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_load_artigo_composto(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> <span style="color: #C76A40;
            font-weight: 800;">recursive</span> __artigo <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  art.artigo_id,
                  art.artigo_nome,
                  art.artigo_artigo_id <span style="color: #C76A40;
            font-weight: 800;">as</span> artigo_base,
                  ab.artigo_nome <span style="color: #C76A40;
            font-weight: 800;">as</span> artigo_parent,
                  art.artigo_compostoquantidade,
                  <span style="color: #C76A40">1</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> composicao_nivel
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo art
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo ab <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_artigo_id = ab.artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.link l <span style="color: #C76A40;
            font-weight: 800;">on</span> l.link_referencia @&gt; lib.sets_ref( art )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_espaco_destino = arg_espaco_auth
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_estado = _const.maguita_link_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.link l2 <span style="color: #C76A40;
            font-weight: 800;">on</span> l2.link_referencia @&gt; lib.sets_ref( ab )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> l2.link_espaco_destino = arg_espaco_auth
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> l2.link_estado = _const.maguita_link_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">where</span> art.artigo_artigo_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
              <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    _a.artigo_id,
                    _a.artigo_nome,
                    ip.artigo_id,
                    ip.artigo_nome,
                    _a.artigo_compostoquantidade * lk.artigo_compostoquantidade ,
                    _a.composicao_nivel +<span style="color: #C76A40">1</span>
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __artigo _a
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo lk <span style="color: #C76A40;
            font-weight: 800;">on</span> _a.artigo_base = lk.artigo_id
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo ip <span style="color: #C76A40;
            font-weight: 800;">on</span> lk.artigo_artigo_id = ip.artigo_id
            ), __composto_group <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  _a.artigo_id,
                  _a.artigo_nome,
                  array_agg( to_jsonb( _a  ) ) <span style="color: #C76A40;
            font-weight: 800;">as</span> artigo_bases
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __artigo _a
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                  _a.artigo_id,
                  _a.artigo_nome
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _tg )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __composto_group _tg
            ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __branch_menu {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__branch_menu(_branch_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>, _user <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>, _espaco <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>, _force <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> auth.menu
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _rec <span style="color: #C76A40">record</span>;
          _branch tweeks.branch;
          _menus <span style="color: #C76A40">int</span>[];
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _force <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> array_agg( me.menu_id ) <span style="color: #C76A40;
            font-weight: 800;">into</span> _menus
              <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.menu me
            ;
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _branch_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              _branch_uid := tweeks.__branch_uid( _user, _espaco );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _branch_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  b.*,
                  count( * ) <span style="color: #C76A40;
            font-weight: 800;">over</span> () <span style="color: #C76A40;
            font-weight: 800;">as</span> _branchs_count
                  <span style="color: #C76A40;
            font-weight: 800;">into</span> _rec
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.branch b;
                <span style="color: #C76A40;
            font-weight: 800;">if</span> _rec._branchs_count = <span style="color: #C76A40">1</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> _branch_uid := _rec.branch_uid; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            _branch := tweeks.__get_branch( _branch_uid );
            _menus := <span style="color: #C76A40;
            font-weight: 800;">array</span>(
              <span style="color: #C76A40;
            font-weight: 800;">select</span> e.menu_id::<span style="color: #C76A40">int</span>
                <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements_text( _branch.branch_grants-&gt;<span style="color: #4d99bf">&#x27;menu&#x27;</span> ) e( menu_id )
            );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> me.*
              <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.menu me
              <span style="color: #C76A40;
            font-weight: 800;">where</span> me.menu_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _menus )
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_lancamento {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_lancamento(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              arg_colaborador_id: UID,
              arg_espaco_auth: UID,
              arg_cliente_id: UID,
              arg_lancamento_tmodalidade_conta
            }
           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_tgrupo_id <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_tgrupo_id&#x27;</span>;
          arg_cliente_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_cliente_id&#x27;</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> <span style="color: #C76A40;
            font-weight: 800;">recursive</span> __lancamento <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  row_number() <span style="color: #C76A40;
            font-weight: 800;">over</span> () <span style="color: #C76A40;
            font-weight: 800;">as</span> lancamento_posicao,
                  la.lancamento_id,
                  la.lancamento_descricao,
                  la.lancamento_credito,
                  la.lancamento_debito,
                  la.lancamento_data,
                  la.lancamento_dataregistro,
                  la.lancamento_refid,
                  la.lancamento_regclass,
                  la.lancamento_referencia,
                  la.lancamento_documento,
                  la.lancamento_montante,
                  la.lancamento_operacao,
                  la.lancamento_sequencia,
                  la.lancamento_via,
                  la.lancamento_valor
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.lancamento la
                <span style="color: #C76A40;
            font-weight: 800;">where</span> la.lancamento_cliente_id = arg_cliente_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> la.lancamento_estado = _const.maguita_lancamento_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> la._tgrupo_id = arg_tgrupo_id
                <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> la.lancamento_dataregistro,
                  la.lancamento_sequencia
            ), __lancamento_saldo <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  _la.*,
                  _la.lancamento_credito - _la.lancamento_debito <span style="color: #C76A40;
            font-weight: 800;">as</span> lancamento_valor,
                  _la.lancamento_credito - _la.lancamento_debito <span style="color: #C76A40;
            font-weight: 800;">as</span> lancamento_saldo
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __lancamento _la
                <span style="color: #C76A40;
            font-weight: 800;">where</span> _la.lancamento_posicao = <span style="color: #C76A40">1</span>
                <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
                  <span style="color: #C76A40;
            font-weight: 800;">select</span>
                      _la.*,
                      _la.lancamento_credito - _la.lancamento_debito <span style="color: #C76A40;
            font-weight: 800;">as</span> lancamento_valor,
                      _ls.lancamento_saldo + ( _la.lancamento_credito - _la.lancamento_debito ) <span style="color: #C76A40;
            font-weight: 800;">as</span> lancamento_saldo
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __lancamento_saldo _ls
                      <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __lancamento _la <span style="color: #C76A40;
            font-weight: 800;">on</span> _ls.lancamento_posicao + <span style="color: #C76A40">1</span> = _la.lancamento_posicao
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _ls )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __lancamento_saldo _ls;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __tg_before_update_classe {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__tg_before_update_classe()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #397300">new</span>.classe_codigo <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #397300">new</span>.classe_codigo := tweeks.__generate_classe_code(
              <span style="color: #397300">new</span>._branch_uid,
              <span style="color: #397300">new</span>.classe_colaborador_id,
              <span style="color: #397300">new</span>.classe_espaco_auth
            );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #397300">new</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_chave_restore {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_chave_restore(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
             arg_chave_temporaria: CHAVE
             arg_chave_definitiva: CHAVE
           \*\/</span>
            arg_chave_temporaria <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_chave_temporaria&#x27;</span>;
            arg_chave_definitiva <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_chave_definitiva&#x27;</span>;
            _chave tweeks.chave;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _chave
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.chave ch
            <span style="color: #C76A40;
            font-weight: 800;">where</span> ch.chave_temporarai = arg_chave_temporaria;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _chave.chave_definitiva <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;Chave temporaria já aplicada&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
             <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.chave
                <span style="color: #C76A40;
            font-weight: 800;">set</span> chave_definitiva = arg_chave_definitiva
                <span style="color: #C76A40;
            font-weight: 800;">where</span> chave_temporarai = arg_chave_temporaria
                <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _chave
              ;
             <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true( to_jsonb( _chave ) );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_artig_check_nome {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_artig_check_nome(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função devolve todos os artigos com os nomes expecificados
            filter := {
              arg_espaco_auth: ID
              arg_artigo_nome: [
                @+nome/artigo,
                @+nome/artigo,
                @+nome/artigo,
                @+nome/artigo
              ]
            }
           \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_artigo_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> [] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> lib.str_normalize( <span style="color: #397300">public</span>.unaccent( lower( names ) ) ) <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements_text( <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_artigo_nome&#x27;</span> ) names );
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] := <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> lib.jsonb_values(
                  to_jsonb( art ),
                  <span style="color: #4d99bf">&#x27;artigo_id&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;artigo_nome&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;artigo_custo&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;artigo_descricao&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;artigo_dataregistro&#x27;</span>
                )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo art
              <span style="color: #C76A40;
            font-weight: 800;">where</span> lower( lib.str_normalize( lower( <span style="color: #397300">public</span>.unaccent( art.artigo_nome ) ) ) ) = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( arg_artigo_nome )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
            ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_change_conta_anular {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_change_conta_anular(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para atualar as contas
            args := {
              arg_conta_id: ID,
              arg_colaborador_id: ID,
              arg_espaco_auth: ID,
              arg_conta_observacao: OBSERVACAO
            }
           \*\/</span>

          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_conta_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_conta_id&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_conta_observacao <span style="color: #C76A40">varchar</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_conta_observacao&#x27;</span>;

          _conta tweeks.conta;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _conta := tweeks._get_conta( arg_conta_id );

          arg_conta_observacao := lib.str_nospace( arg_conta_observacao );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta.conta_estado  = _const.maguita_conta_estado_anulado <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Essa conta já está anulado&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta.conta_estado != _const.maguita_conta_estado_aberto <span style="color: #C76A40;
            font-weight: 800;">and</span> arg_conta_observacao <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;É necessario informar uma obseravção para anular as contas fechadas e pagas&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _conta.conta_estado                   := _const.maguita_conta_estado_anulado;
          _conta.conta_colaborador_atualizacao  := arg_colaborador_id;
          _conta.conta_dataatualizacao          := <span style="color: #397300">current_timestamp</span>;
          _conta.conta_observacao               := arg_conta_observacao;

          <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _conta
            <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets_up( _conta )
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true( jsonb_build_object( <span style="color: #4d99bf">&#x27;conta&#x27;</span>, _conta ) );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_device_unregistered {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_device_unregistered(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              arg_dispositivos: [
                {
                  client_ip: IP
                  client_mac: IP
                  client_hostname: HOSTNAME
                  client_ipv4: IPV4
                  client_ipv6: IPV6
                  client_distro: DISTRO
                  client_platform: PLATFORM
                  client_vendor: VENDOR
                  client_user: USER
                }
              ]
            }
           \*\/</span>
          arg_dispositivos <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_dispositivos&#x27;</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
          <span style="color: #C76A40;
            font-weight: 800;">with</span> devices_found <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                el.document-&gt;&gt;<span style="color: #4d99bf">&#x27;client_ip&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> posto_ip,
                el.document-&gt;&gt;<span style="color: #4d99bf">&#x27;client_mac&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> posto_mac,
                el.document-&gt;&gt;<span style="color: #4d99bf">&#x27;client_hostname&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> posto_hostname,
                el.document-&gt;&gt;<span style="color: #4d99bf">&#x27;client_ipv6&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> posto_ipv6,
                el.document-&gt;&gt;<span style="color: #4d99bf">&#x27;client_distro&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> posto_distro,
                el.document-&gt;&gt;<span style="color: #4d99bf">&#x27;client_vendor&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> posto_vendor,
                el.document-&gt;&gt;<span style="color: #4d99bf">&#x27;client_user&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> posto_user,
                coalesce( el.document-&gt;&gt;<span style="color: #4d99bf">&#x27;client_user&#x27;</span>, el.document-&gt;&gt;<span style="color: #4d99bf">&#x27;client_hostname&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> client_label
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( arg_dispositivos ) el( document )
          ), no_registred <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> dvf.*,
                   <span style="color: #C76A40;
            font-weight: 800;">case</span>
                     <span style="color: #C76A40;
            font-weight: 800;">when</span> dvf.client_label <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> format( <span style="color: #4d99bf">&#x27;%s (%s)&#x27;</span>, dvf.posto_mac, dvf.client_label )
                     <span style="color: #C76A40;
            font-weight: 800;">else</span>  dvf.posto_mac
                  <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> client_label
              <span style="color: #C76A40;
            font-weight: 800;">from</span> devices_found dvf
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.posto pt <span style="color: #C76A40;
            font-weight: 800;">on</span> dvf.posto_mac = pt.posto_mac
              <span style="color: #C76A40;
            font-weight: 800;">where</span> pt.posto_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
          )  <span style="color: #C76A40;
            font-weight: 800;">select</span> lib.jsonb_values(
                nr,
                <span style="color: #4d99bf">&#x27;posto_ip&#x27;</span>,
                <span style="color: #4d99bf">&#x27;posto_mac&#x27;</span>,
                <span style="color: #4d99bf">&#x27;posto_hostname&#x27;</span>,
                <span style="color: #4d99bf">&#x27;posto_ipv4&#x27;</span>,
                <span style="color: #4d99bf">&#x27;posto_ipv6&#x27;</span>,
                <span style="color: #4d99bf">&#x27;posto_distro&#x27;</span>,
                <span style="color: #4d99bf">&#x27;posto_platform&#x27;</span>,
                <span style="color: #4d99bf">&#x27;posto_vendor&#x27;</span>,
                <span style="color: #4d99bf">&#x27;posto_user&#x27;</span>,
                <span style="color: #4d99bf">&#x27;client_label&#x27;</span>
              )
            <span style="color: #C76A40;
            font-weight: 800;">from</span> no_registred nr
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_tmovimento {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks._get_tmovimento(arg_tmovimento_id <span style="color: #C76A40">smallint</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> tmovimento
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #888">-- Essa função serve para devolver os tipos de movimento do posto</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.tmovimento tm <span style="color: #C76A40;
            font-weight: 800;">where</span> tm.tmovimento_id = arg_tmovimento_id;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_posto_status {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_posto_status(filters <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para devolver o status atual do posto
            filter := {
              arg_posto_id: ID,
              arg_espaco_auth: ID
            }
          \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> filters-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
          arg_posto_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> filters-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_id&#x27;</span>;
          _data <span style="color: #C76A40">record</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">with</span> posto_cheques <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                cx.caixa_posto_id,
                count( ct.conta_id ) <span style="color: #C76A40;
            font-weight: 800;">filter</span>( <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_tpaga_id = _const.tpaga_cheque ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_cheque
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.caixa cx <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_caixa_fechopagamento = cx.caixa_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( arg_espaco_child )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_estado = _const.conta_estado_pago
                <span style="color: #C76A40;
            font-weight: 800;">and</span> cx.caixa_posto_id = arg_posto_id
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> cx.caixa_posto_id

          ), conta_moedas <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                cx.caixa_posto_id,
                cu.*,
                sum( ct.conta_montantemoeda ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_montantemoeda
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.caixa cx <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_caixa_fechopagamento = cx.caixa_id
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> geoinfo.currency cu <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_currency_id = cu.currency_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( arg_espaco_child )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_estado = _const.conta_estado_pago
                <span style="color: #C76A40;
            font-weight: 800;">and</span> cx.caixa_posto_id = arg_posto_id
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> cx.caixa_posto_id,
                cu.currency_id

          ), posto_moeda <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                ct.caixa_posto_id,
                jsonb_agg (
                  lib.jsonb_values( ct, <span style="color: #4d99bf">&#x27;currency_id&#x27;</span>, <span style="color: #4d99bf">&#x27;currency_code&#x27;</span>, <span style="color: #4d99bf">&#x27;currency_name&#x27;</span> )
                ) <span style="color: #C76A40;
            font-weight: 800;">as</span> posto_moedas
              <span style="color: #C76A40;
            font-weight: 800;">from</span> conta_moedas ct
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ct.caixa_posto_id
          )
            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.posto pos
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco esp <span style="color: #C76A40;
            font-weight: 800;">on</span> pos.posto_espaco_destino = esp.espaco_id
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> posto_moeda pm <span style="color: #C76A40;
            font-weight: 800;">on</span> pos.posto_id = pm.caixa_posto_id
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> posto_cheques pc <span style="color: #C76A40;
            font-weight: 800;">on</span> pos.posto_id = pc.caixa_posto_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> pos.posto_id = arg_posto_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> pos.posto_espaco_destino = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span>  <span style="color: #C76A40;
            font-weight: 800;">true</span> ? lib.jsonb_values(
            _data,
            <span style="color: #4d99bf">&#x27;posto_id&#x27;</span>,
            <span style="color: #4d99bf">&#x27;posto_designacao&#x27;</span>,
            <span style="color: #4d99bf">&#x27;posto_montante&#x27;</span>,
            <span style="color: #4d99bf">&#x27;posto_estado&#x27;</span>,
            <span style="color: #4d99bf">&#x27;posto_dataregistro&#x27;</span>,
            <span style="color: #4d99bf">&#x27;posto_endereco&#x27;</span>,
            <span style="color: #4d99bf">&#x27;espaco_id&#x27;</span>,
            <span style="color: #4d99bf">&#x27;espaco_nome&#x27;</span>,
            <span style="color: #4d99bf">&#x27;conta_cheque&#x27;</span>,
            <span style="color: #4d99bf">&#x27;posto_moedas&#x27;</span>
          );

        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_reg_venda {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_reg_venda(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para associar mais vendas a conta
            args := {
              arg_colaborador_id: ID,
              arg_conta_id: ID,
              arg_espaco_auth: ID,
              arg_message_error: TRUE|FALSE,
              arg_venda_id: ID
              arg_vendas: [{
                  venda_id?: UID,
                  venda_artigo_id: UID,
                  venda_quantidade: QUANT,
                  venda_custounitario: COST
                  venda_custoquantidade: COST

                  + venda_editado BOOLEAN
                  + venda_isencao BOOLEAN
                  + venda_montante
                  + venda_montanteagregado
                  + venda_montantetotal
                  + venda_imposto
                  + venda_montantesemimposto
                  + venda_montantecomimposto
                  + venda_impostoadicionar
                  + venda_impostoretirar

                  + venda_descricao
                  + venda_lote
                  + venda_validade
                  + venda_metadata
                  + venda_taxas

                  arg_itens: [
                      venda_id: UID
                      venda_artigo_id: UID,
                      venda_quantidade: QUANT,
                      venda_custounitario: COST
                      venda_custoquantidade: COST
                      venda_descricao: DESCRICAO
                      venda_lote: LOTE
                      venda_validade: VALIDADE
                      venda_metadata: {... any extras data}
                    + venda_montantetotal
                  ]
                }
              ]
            }
           \*\/</span>

          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_conta_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_conta_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_vendas <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_vendas&#x27;</span>;
          arg_message_error <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_message_error&#x27;</span>;

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _conta tweeks.conta;
          _data <span style="color: #C76A40">record</span>;
          _stocks <span style="color: #C76A40">record</span>;
          _simple tweeks.venda;
          __vendas tweeks.venda[];

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _conta := tweeks._get_conta( arg_conta_id );

          <span style="color: #888">-- Quando a conta não esta aberta</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta.conta_estado != _const.maguita_conta_estado_aberto <span style="color: #C76A40;
            font-weight: 800;">and</span> arg_message_error <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;@conta.estado.not-closed&#x27;</span>;
          elseif  _conta.conta_estado != _const.maguita_conta_estado_aberto <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;@conta.estado.not-closed&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _stocks := tweeks.__check_stock_on_venda( arg_espaco_auth, arg_vendas );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _stocks.stocks  <span style="color: #C76A40;
            font-weight: 800;">and</span> arg_message_error <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;%&#x27;</span>, _stocks.message;

          <span style="color: #C76A40;
            font-weight: 800;">elsif</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _stocks.stocks  <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false(
              _stocks.message
            );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">with</span> <span style="color: #C76A40;
            font-weight: 800;">recursive</span> __element <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                row_number() <span style="color: #C76A40;
            font-weight: 800;">over</span> () <span style="color: #C76A40;
            font-weight: 800;">as</span> <span style="color: #C76A40;
            font-weight: 800;">row</span>,
                   ( jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::tweeks.venda, e.doc || jsonb_build_object(
                      <span style="color: #4d99bf">&#x27;venda_proforma&#x27;</span>, _conta.conta_proforma
                  ) )).*,
        <span style="color: #888">--         ( e.doc-&gt;&gt;&#x27;venda_artigo_id&#x27; )::uuid  as venda_artigo_id,</span>
        <span style="color: #888">--         ( e.doc-&gt;&gt;&#x27;venda_quantidade&#x27; )::double precision as venda_quantidade,</span>
        <span style="color: #888">--         ( e.doc-&gt;&gt;&#x27;venda_custounitario&#x27; )::double precision as venda_custounitario,</span>
        <span style="color: #888">--         ( e.doc-&gt;&gt;&#x27;venda_custoquantidade&#x27; )::double precision as venda_custoquantidade,</span>
                ( e.doc || jsonb_build_object(
                  <span style="color: #4d99bf">&#x27;venda_proforma&#x27;</span>, _conta.conta_proforma
                ) )::<span style="color: #C76A40">jsonb</span>  <span style="color: #C76A40;
            font-weight: 800;">as</span> document,
                coalesce( e.doc-&gt;<span style="color: #4d99bf">&#x27;arg_itens&#x27;</span>, <span style="color: #4d99bf">&#x27;[ ]&#x27;</span>::<span style="color: #C76A40">jsonb</span> )::<span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> itens,
                <span style="color: #C76A40;
            font-weight: 800;">false</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> _is_extension
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( arg_vendas ) e ( doc )
            <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  <span style="color: #C76A40;
            font-weight: 800;">row</span>,
                  ( jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::tweeks.venda, e.doc || jsonb_build_object(
                      <span style="color: #4d99bf">&#x27;venda_montanteagregado&#x27;</span>, <span style="color: #C76A40">0</span>,
                      <span style="color: #4d99bf">&#x27;venda_imposto&#x27;</span>, <span style="color: #C76A40">0</span>,
                      <span style="color: #4d99bf">&#x27;venda_montantesemimposto&#x27;</span>, <span style="color: #C76A40">0</span>,
                      <span style="color: #4d99bf">&#x27;venda_montantecomimposto&#x27;</span>, <span style="color: #C76A40">0</span>,
                      <span style="color: #4d99bf">&#x27;venda_imposto&#x27;</span>, <span style="color: #C76A40">0</span>,
                      <span style="color: #4d99bf">&#x27;venda_editado&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">false</span>,
                      <span style="color: #4d99bf">&#x27;venda_taxas&#x27;</span>, jsonb_build_array(),
                      <span style="color: #4d99bf">&#x27;venda_proforma&#x27;</span>, _conta.conta_proforma
                    
                    ))).*,
        <span style="color: #888">--           ( e.doc-&gt;&gt;&#x27;venda_artigo_id&#x27; )::uuid  as venda_artigo_id,</span>
        <span style="color: #888">--           ( e.doc-&gt;&gt;&#x27;venda_quantidade&#x27; )::double precision as venda_quantidade,</span>
        <span style="color: #888">--           ( e.doc-&gt;&gt;&#x27;venda_custounitario&#x27; )::double precision as venda_custounitario,</span>
        <span style="color: #888">--           ( e.doc-&gt;&gt;&#x27;venda_custoquantidade&#x27; )::double precision as venda_custoquantidade,</span>
                  ( e.doc || jsonb_build_object(
                    <span style="color: #4d99bf">&#x27;venda_proforma&#x27;</span>, _conta.conta_proforma
                  ))::<span style="color: #C76A40">jsonb</span>  <span style="color: #C76A40;
            font-weight: 800;">as</span> document,
                  coalesce( e.doc-&gt;<span style="color: #4d99bf">&#x27;arg_itens&#x27;</span>, <span style="color: #4d99bf">&#x27;[]&#x27;</span>::<span style="color: #C76A40">jsonb</span> )::<span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> itens,
                  <span style="color: #C76A40;
            font-weight: 800;">true</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> _is_extension
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __element ep
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> jsonb_array_elements( ep.itens ) e( doc ) <span style="color: #C76A40;
            font-weight: 800;">on</span> jsonb_array_length( ep.itens ) &gt; <span style="color: #C76A40">0</span>
                <span style="color: #C76A40;
            font-weight: 800;">where</span> jsonb_array_length( ep.itens ) &gt; <span style="color: #C76A40">0</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ep.itens <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
          ), __calcs <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                e.*,
                e.document <span style="color: #C76A40;
            font-weight: 800;">as</span> docreplacer,
                ve.venda_id <span style="color: #C76A40;
            font-weight: 800;">as</span> _venda_id,
                coalesce( ve.venda_dataregistro, now() ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_dataregistro,
                coalesce( ve.venda_colaborador_id, arg_colaborador_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_colaborador_id,
                coalesce( ve.venda_conta_id, arg_conta_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_conta_id,
                coalesce( ve.venda_espaco_auth, arg_espaco_auth ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_espaco_auth,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> art.artigo_preparacao <span style="color: #C76A40;
            font-weight: 800;">then</span> _const.maguita_venda_estadopreparacao_pendente
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> _const.maguita_venda_estadopreparacao_preparado
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_estadopreparacao
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __element e
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> e.venda_artigo_id = art.artigo_id
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.venda ve <span style="color: #C76A40;
            font-weight: 800;">on</span> ve.venda_id = ( e.document-&gt;&gt;<span style="color: #4d99bf">&#x27;venda_id&#x27;</span> )::<span style="color: #C76A40">uuid</span>
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ve.venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                <span style="color: #C76A40;
            font-weight: 800;">or</span>( ve.venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> (
                  ve.venda_quantidade != e.venda_quantidade,
                  ve.venda_custounitario != e.venda_custounitario,
                  ve.venda_custoquantidade != e.venda_custoquantidade,
                  ve.venda_montante != e.venda_montante,
                  ve.venda_montanteagregado != e.venda_montanteagregado,
                  coalesce( ve.venda_proforma, <span style="color: #C76A40;
            font-weight: 800;">false</span> ) != coalesce( e.venda_proforma, <span style="color: #C76A40;
            font-weight: 800;">false</span> ),
                  ve.venda_montantetotal != e.venda_montantetotal,
                  ve.venda_imposto != e.venda_imposto,
                  ve.venda_montantesemimposto != e.venda_montantesemimposto,
                  ve.venda_montantecomimposto != e.venda_montantecomimposto,
                  ve.venda_impostoadicionar != e.venda_impostoadicionar,
                  ve.venda_impostoretirar != e.venda_impostoretirar,
                  ve.venda_descricao != e.venda_descricao,
                  ve.venda_lote != e.venda_lote,
                  ve.venda_validade != e.venda_validade,
                  ve.venda_artigo_id != e.venda_artigo_id,
                  ve.venda_metadata::<span style="color: #C76A40">text</span> != e.venda_metadata::<span style="color: #C76A40">text</span>
                ))
          ), __sets <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> &quot;returning&quot;::tweeks.venda, <span style="color: #C76A40;
            font-weight: 800;">row</span>, c._is_extension
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __calcs c
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> lib.sets( _simple, replacer := (to_jsonb( c ) - <span style="color: #4d99bf">&#x27;venda_estado&#x27;</span> - <span style="color: #4d99bf">&#x27;venda_id&#x27;</span> - <span style="color: #4d99bf">&#x27;venda_taxas&#x27;</span>)
                  || c.docreplacer
                  ||  jsonb_build_object(
                  <span style="color: #4d99bf">&#x27;venda_colaborador_atualizacao&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">case</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> c._venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                    <span style="color: #C76A40;
            font-weight: 800;">else</span> arg_colaborador_id
                  <span style="color: #C76A40;
            font-weight: 800;">end</span>,
                  <span style="color: #4d99bf">&#x27;venda_dataatualizacao&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">case</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> c._venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                    <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #397300">current_timestamp</span>
                  <span style="color: #C76A40;
            font-weight: 800;">end</span>
                )) <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
              <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> c._is_extension
            <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span> _s.&quot;returning&quot;::tweeks.venda, c.<span style="color: #C76A40;
            font-weight: 800;">row</span>, <span style="color: #C76A40;
            font-weight: 800;">true</span>
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __sets sui
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __calcs c <span style="color: #C76A40;
            font-weight: 800;">on</span> sui.<span style="color: #C76A40;
            font-weight: 800;">row</span> = c.<span style="color: #C76A40;
            font-weight: 800;">row</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> c._is_extension
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> lib.sets( _simple, replacer := ( to_jsonb( c ) - <span style="color: #4d99bf">&#x27;venda_estado&#x27;</span> - <span style="color: #4d99bf">&#x27;venda_id&#x27;</span> - <span style="color: #4d99bf">&#x27;venda_taxas&#x27;</span> )
                      || c.docreplacer
                      || jsonb_build_object(
                    <span style="color: #4d99bf">&#x27;venda_venda_id&#x27;</span>, (sui.&quot;returning&quot;::tweeks.venda).venda_id,
                    <span style="color: #4d99bf">&#x27;venda_colaborador_atualizacao&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">case</span>
                      <span style="color: #C76A40;
            font-weight: 800;">when</span> c._venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                      <span style="color: #C76A40;
            font-weight: 800;">else</span> arg_colaborador_id
                      <span style="color: #C76A40;
            font-weight: 800;">end</span>,
                    <span style="color: #4d99bf">&#x27;venda_dataatualizacao&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">case</span>
                      <span style="color: #C76A40;
            font-weight: 800;">when</span> c._venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                      <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #397300">current_timestamp</span>
                    <span style="color: #C76A40;
            font-weight: 800;">end</span>
                  )) _s <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> sui._is_extension
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> array_agg( &quot;returning&quot; ) <span style="color: #C76A40;
            font-weight: 800;">into</span> __vendas <span style="color: #C76A40;
            font-weight: 800;">from</span> __sets;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true( jsonb_build_object(
            <span style="color: #4d99bf">&#x27;vendas&#x27;</span>, __vendas
          ));
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_stock {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks._get_stock(_artigo_id <span style="color: #C76A40">uuid</span>, _espaco_id <span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(stock_artigo_id <span style="color: #C76A40">uuid</span>, stock_espaco_id <span style="color: #C76A40">uuid</span>, stock_quantidade <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">with</span> __value ( one) <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">values</span> ( <span style="color: #C76A40">1</span> )
          )
          <span style="color: #C76A40;
            font-weight: 800;">select</span>
              coalesce( s.artigo_id, _artigo_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> artigo_id,
              coalesce( s.espaco_id, _espaco_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> espaco_id,
              coalesce( sum( s.stock_quantidade )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, <span style="color: #C76A40">0</span> )
            <span style="color: #C76A40;
            font-weight: 800;">from</span> __value 
              <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.stock s <span style="color: #C76A40;
            font-weight: 800;">on</span> s.artigo_id = coalesce( _artigo_id, s.artigo_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> s.espaco_id = coalesce( _espaco_id, s.espaco_id)
            <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> s.artigo_id, s.espaco_id;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_sets_fornecedor {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_sets_fornecedor(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para registar um novo fornecedor no sistema
            args := {
              arg_espaco_auth: ID
              arg_colaborador_id: ID,

              fornecedor_id: UID | NULL
              fornecedor_nif: ID,
              fornecedor_nome: NOME,
              fornecedor_email: EMAIL,
              fornecedor_contacto: CONTACTO,
              fornecedor_endereco: ENDERECO
            }
          \*\/</span>

          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;

          __fornecedor tweeks.fornecedor;
          _exists <span style="color: #C76A40">record</span>;
          ___branch <span style="color: #C76A40">uuid</span>  <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          __fornecedor := jsonb_populate_record( __fornecedor, args );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> __fornecedor.fornecedor_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            __fornecedor.fornecedor_espaco_auth := arg_espaco_auth;
            __fornecedor.fornecedor_colaborador_id := arg_colaborador_id;
            <span style="color: #C76A40;
            font-weight: 800;">while</span> __fornecedor.fornecedor_code <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>
                __fornecedor.fornecedor_code := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.next( <span style="color: #4d99bf">&#x27;fornecedor/seq&#x27;</span>, lpad := <span style="color: #C76A40">2</span>, lpad_char := <span style="color: #4d99bf">&#x27;0&#x27;</span>, sub :=  ___branch::<span style="color: #C76A40">text</span> );
              <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
                <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.fornecedor f
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> f.fornecedor_code = __fornecedor.fornecedor_code
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> f._branch_uid = ___branch
              ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
                __fornecedor.fornecedor_code := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            __fornecedor.fornecedor_colaborador_atualizacao := arg_colaborador_id;
            __fornecedor.fornecedor_dataatualizacao := <span style="color: #397300">current_timestamp</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">with</span> __uniques <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                f.fornecedor_code <span style="color: #C76A40;
            font-weight: 800;">as</span> &quot;CODIGO&quot;,
                f.fornecedor_nif <span style="color: #C76A40;
            font-weight: 800;">as</span> &quot;NIF&quot;,
                f.fornecedor_email <span style="color: #C76A40;
            font-weight: 800;">as</span> &quot;EMAIL&quot;,
                jsonb_build_object(
                  <span style="color: #4d99bf">&#x27;CODIGO&#x27;</span>, __fornecedor.fornecedor_code,
                  <span style="color: #4d99bf">&#x27;NIF&#x27;</span>, __fornecedor.fornecedor_nif,
                  <span style="color: #4d99bf">&#x27;EMAIL&#x27;</span>, __fornecedor.fornecedor_email
                ) <span style="color: #C76A40;
            font-weight: 800;">as</span> _math
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.fornecedor f
              <span style="color: #C76A40;
            font-weight: 800;">where</span> f._branch_uid = ___branch
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ( __fornecedor.fornecedor_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> __fornecedor.fornecedor_id != f.fornecedor_id )
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> lib.duplicates( jsonb_agg( _uf ), _uf._math , <span style="color: #C76A40;
            font-weight: 800;">true</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> dulicates  <span style="color: #C76A40;
            font-weight: 800;">into</span> _exists
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __uniques _uf
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> _uf._math
          ;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _exists.dulicates <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? format( <span style="color: #4d99bf">&#x27;(%s) estão duplicados!&#x27;</span>, _exists.dulicates );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;


          <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> __fornecedor
            <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets( __fornecedor );

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;fornecedor&#x27;</span>, __fornecedor
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_conta {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks._get_conta(arg_conta_id <span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> conta
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #888">-- Essa função devolve a instancia de uma conta</span>
        <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_id = arg_conta_id;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_conta_preparar {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_conta_preparar(args <span style="color: #C76A40">json</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para marcar os pedidos de cosinha como preparados
            args := {
              arg_espaco_auth: ID,
              arg_colaborador_id: ID,
              arg_conta_id: ID,
            }
          \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_conta_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_conta_id&#x27;</span>;

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _conta tweeks.conta;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _conta := tweeks._get_conta( arg_conta_id );


          <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta.conta_estado != _const.conta_estado_aberto <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;Não pode marcar mais pedidos dessa conta como preparado!&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.venda
            <span style="color: #C76A40;
            font-weight: 800;">set</span> venda_estadopreparacao = _const.venda_estadopreparacao_preparado
            <span style="color: #C76A40;
            font-weight: 800;">where</span> venda_estadopreparacao = _const.venda_estadopreparacao_pendente
              <span style="color: #C76A40;
            font-weight: 800;">and</span> venda_conta_id = arg_conta_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> venda_estado = _const.venda_estado_aberto
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? <span style="color: #4d99bf">&#x27;success&#x27;</span>;

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_autorizacao {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_autorizacao(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
          {
            arg_colaborador_id: UID
            arg_espaco_auth: UID
          }
         \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_branch_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          _espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens_static( arg_espaco_auth );

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __autorizacao <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  a.autorizacao_uid,
                  a.autorizacao_numero,
                  a.autorizacao_ano,
                  a.autorizacao_estado,
                  a.autorizacao_designacao,
                  a.autorizacao_dataregistro,
                  e.espaco_id,
                  e.espaco_nome,
                  count( at.* ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> at.autorizacao_ano &gt; a.autorizacao_ano) <span style="color: #C76A40;
            font-weight: 800;">as</span> autorizacao_postone,
                  count( at.* ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> a.autorizacao_uid = at.autorizacao_autorizacao_continuer ) <span style="color: #C76A40;
            font-weight: 800;">as</span> autorizacao_childrem,
                  count( at.* ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> at.autorizacao_ano &lt; a.autorizacao_ano ) <span style="color: #C76A40;
            font-weight: 800;">as</span> autorizacao_previews
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.autorizacao a
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> a.autorizacao_espaco_uid = e.espaco_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.autorizacao at <span style="color: #C76A40;
            font-weight: 800;">on</span> at.autorizacao_espaco_uid = a.autorizacao_espaco_uid
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> at._branch_uid = a._branch_uid
                <span style="color: #C76A40;
            font-weight: 800;">where</span> a._branch_uid = arg_branch_uid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> (
                    a.autorizacao_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _espaco_child ),
                    a.autorizacao_espaco_uid = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _espaco_child )
                  )
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                  a.autorizacao_uid,
                  e.espaco_id
            ), __continue <span style="color: #C76A40;
            font-weight: 800;">as</span> (
               <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    at.*,
                    <span style="color: #C76A40;
            font-weight: 800;">case</span>
                      <span style="color: #C76A40;
            font-weight: 800;">when</span> at.autorizacao_childrem &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>
                      <span style="color: #C76A40;
            font-weight: 800;">when</span> at.autorizacao_estado = _const.maguita_autorizacao_estado_fechado <span style="color: #C76A40;
            font-weight: 800;">and</span> at.autorizacao_postone = <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                      <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>
                    <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> autorizacao_continue
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __autorizacao at
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _a )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __continue _a
                <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> _a.autorizacao_ano <span style="color: #C76A40;
            font-weight: 800;">desc</span>,
                  _a.autorizacao_dataregistro <span style="color: #C76A40;
            font-weight: 800;">desc</span>
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_sets_serie {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_sets_serie(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              arg_colaborador_id uuid not null,
              arg_espaco_auth uuid not null,

              serie_id uuid not null,
              serie_tserie_id int2 not null,
              serie_espaco_id uuid not null,
              serie_designacao character varying not null,
              serie_numero character varying not null,
              serie_quantidade int not null,
              serie_numcertificacao,
              serie_numatorizacao
            }
           \*\/</span>

          _serie tweeks.serie;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _tserie tweeks.tserie;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _serie := jsonb_populate_record( _serie, args );
          
          <span style="color: #C76A40;
            font-weight: 800;">select</span> *
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.tserie ts
            <span style="color: #C76A40;
            font-weight: 800;">where</span> ts.tserie_id = _serie.serie_tserie_id
            <span style="color: #C76A40;
            font-weight: 800;">into</span> _tserie
          ;
          
          _serie.serie_numero := lib.str_normalize( _serie.serie_numero );
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _serie.serie_numero <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> 
              <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;%&#x27;</span>, format( <span style="color: #4d99bf">&#x27;Numero de serie invalida!&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> length( _serie.serie_numero ) &lt; _tserie.tserie_numlimitmin <span style="color: #C76A40;
            font-weight: 800;">or</span> length( _serie.serie_numero ) &gt; _tserie.tserie_numlimit <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;%&#x27;</span>, format( <span style="color: #4d99bf">&#x27;Numero de serie invalido para %I com designação %I limit [de: %s, até: %s] degitos!&#x27;</span>, _tserie.tserie_desc, _serie.serie_designacao, _tserie.tserie_numlimitmin, _tserie.tserie_numlimit );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> length(_serie.serie_quantidade::<span style="color: #C76A40">text</span>) &gt; _tserie.tserie_seqlimit <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;%&#x27;</span>, format( <span style="color: #4d99bf">&#x27;A quantidade definida para a serie para %I ultrapassa o limite previsto de %I!&#x27;</span>, _tserie.tserie_desc, lpad(<span style="color: #4d99bf">&#x27;&#x27;</span>::<span style="color: #C76A40">text</span>,  _tserie.tserie_seqlimit::<span style="color: #C76A40">int</span>, <span style="color: #4d99bf">&#x27;9&#x27;</span>::<span style="color: #C76A40">text</span>) );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> substring( _serie.serie_numero <span style="color: #C76A40;
            font-weight: 800;">from</span> length( _serie.serie_numero )<span style="color: #C76A40">-1</span> ) != to_char( <span style="color: #397300">current_date</span>, <span style="color: #4d99bf">&#x27;yy&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;%&#x27;</span>, format( <span style="color: #4d99bf">&#x27;O numero de serie introduzido para %I com descrição %I não valido para o ano em curso!&#x27;</span>, _tserie.tserie_desc, _serie.serie_designacao  );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _serie.serie_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _serie.serie_colaborador_id := arg_colaborador_id;
            _serie.serie_espaco_auth := arg_espaco_auth;
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            _serie.serie_colaborador_atualizacao := arg_colaborador_id;
            _serie.serie_dataatualizacao := <span style="color: #397300">current_timestamp</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          _serie.serie_estado := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          
          <span style="color: #888">-- Quando for registrar nova serie</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _serie
            <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets( _serie );

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true(jsonb_build_object(
            <span style="color: #4d99bf">&#x27;serie&#x27;</span>, _serie
          ));
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_change_conta_fechar {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_change_conta_fechar(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\**
              Essa função fecha uma nova conta
              arg = {
                arg_espaco_auth: ID,
                arg_colaborador_id: ID,
                arg_tserie_id: ID,
                _serie_id:UID
                deposito:{
                  deposito_cliente_id
                  deposito_caixa_id
                  deposito_tpaga_id
                  deposito_currency_id
                  deposito_posto_id
                  deposito_montantemoeda
                  deposito_montantetroco
                  deposito_data
                  deposito_docref: DOCUMENTO-REF?
                  deposito_observacao: OBSERVACAO?
                }

                conta_id: ID,
                conta_extension: {} | { reserva_id: UID }
                conta_mesa: { numero:NUM, descricao:TEXT, lotacao:NUM },

                conta_posto_id: ID,
                conta_desconto

                conta_titular: NOME-CLIENTE
                conta_titularnif: VARCHAR,
                conta_data: DATA,
                conta_cliente_id,

                //Relativos a GUIA
                guia_documentoperacao: CODIGO,
                guia_dataopeacao: DATA,
                guia_observacao: DESCRICAO
                guia_metadata: { ... any extras data }

                custos:[{
                  custoguia_montante: MONTANTE,
                  custoguia_descricao: DESCRICAO PARA O CUSTO
                  custoguia_tcusto_id: 1 - DESPESA | 2 - RECEITA
                }]
              }
             \*\/</span>

            arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
            arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
            arg_tserie_id <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_tserie_id&#x27;</span>;

            arg_conta_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;conta_id&#x27;</span>;
            arg_caixa_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;de_caixa_id&#x27;</span>;
            _deposito_montantetroco <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>;
            _serie_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_serie_id&#x27;</span>;


            _conta tweeks.conta;
            _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
            _caixa tweeks.caixa;
            _res lib.res;
            _cambio <span style="color: #C76A40">record</span>;
            _montante_amortizacao <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>;
            _deposito tweeks.deposito;
            _rec <span style="color: #C76A40">record</span>;
            _guia tweeks.guia;
            _message <span style="color: #C76A40">text</span>;
            _tserie tweeks.tserie;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
            _caixa := tweeks._get_caixa( arg_caixa_id );
            _conta := tweeks._get_conta( arg_conta_id );
            _conta := jsonb_populate_record( _conta, args );
            _conta.conta_data := coalesce( _conta.conta_data, <span style="color: #397300">current_date</span> );
            _deposito := jsonb_populate_record( _deposito, args-&gt;<span style="color: #4d99bf">&#x27;deposito&#x27;</span> );

            _message := tweeks.__check_conta_data(
              _tserie_id := arg_tserie_id,
              _conta_data := _conta.conta_data,
              _raise := <span style="color: #C76A40;
            font-weight: 800;">false</span>,
              _serie_id := _serie_id
            );

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _message <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( _message );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta.conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;%&#x27;</span>, <span style="color: #4d99bf">&#x27;Identificador da conta a ser fechada não foi informado!&#x27;</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta.conta_estado = _const.maguita_conta_estado_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Essa conta já se encontra fechada!&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            
            <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_tserie_id <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> (
                _const.maguita_tserie_fatura,
                _const.maguita_tserie_faturarecibo,
                _const.maguita_tserie_faturasimplificada,
                _const.maguita_tserie_guiasaida,
                _const.maguita_tserie_notacredito,
                _const.maguita_tserie_notadebito
            ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Não pode fechar a conta o com tipo de serie selecionada!&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta.conta_posto_fecho <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Necessario indicar o posto de fecho!&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #888">-- Na fatura recibo não pode haver conta corrente</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_tserie_id <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.maguita_tserie_faturarecibo, _const.maguita_tserie_faturasimplificada ) <span style="color: #C76A40;
            font-weight: 800;">and</span> _deposito.deposito_montantemoeda <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;O pagamento para as faturas/recibo é obrigatorio!&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #888">-- Os cliente finais só podem receber fatura/recibo ou nota de credito</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> (
                _conta.conta_cliente_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>,
                _conta.conta_cliente_id = lib.to_uuid( <span style="color: #C76A40">1</span> ) <span style="color: #888">-- cliente final</span>
            ) <span style="color: #C76A40;
            font-weight: 800;">and</span> arg_tserie_id <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> (
              _const.maguita_tserie_faturarecibo,
              _const.maguita_tserie_faturasimplificada
            ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Só pode lançar nos cliente finais as futuras/recibos!&#x27;</span>);
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;


            <span style="color: #888">-- Quando hover necessidade de efetuar o deposito então, deve-se obter a taxa de cambio para o dia</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_tserie_id <span style="color: #C76A40;
            font-weight: 800;">in</span> (_const.maguita_tserie_faturarecibo, _const.maguita_tserie_faturasimplificada )
              <span style="color: #C76A40;
            font-weight: 800;">or</span> _deposito.deposito_montantemoeda <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
            <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">if</span> _deposito.deposito_tpaga_id = _const.maguita_tpaga_contacorrente <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Tipo de pagamento invalido&#x27;</span> );
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

              <span style="color: #888">-- Obter o cambio para a moeda selecionada</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _cambio <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.__load_cambio_day(
                arg_espaco_auth,
                _deposito.deposito_currency_id,
                _conta.conta_data,
                _const
              );

              <span style="color: #C76A40;
            font-weight: 800;">if</span> _cambio.cambio_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Câmbio não foi encontrado!&#x27;</span> );
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #888">-- O valor do deposito nas conta de fatura/recibo deve ser o suficiente para cobrir o montante da fatura</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_tserie_id <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.maguita_tserie_faturarecibo, _const.maguita_tserie_faturasimplificada ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">if</span> round( ( _cambio.cambio_taxa * _deposito.deposito_montantemoeda)::<span style="color: #C76A40">numeric</span>, _const.money_round )  &lt; round( _conta.conta_montante::<span style="color: #C76A40">numeric</span>, _const.money_round ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Montante para pagamento insuficiente&#x27;</span> );
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

              <span style="color: #888">-- Se for para amortizar a conta a caixa tem que estar aberta</span>
              <span style="color: #C76A40;
            font-weight: 800;">if</span> _caixa.caixa_estado != _const.maguita_caixa_estado_ativo <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Pagamento rejeitado!&#x27;</span> );
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #888">-- Definir em aqual conta a fatura deve ser enviado</span>
            _conta._tgrupo_id := <span style="color: #C76A40;
            font-weight: 800;">case</span>
              <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_tserie_id <span style="color: #C76A40;
            font-weight: 800;">in</span> (_const.maguita_tserie_faturarecibo, _const.maguita_tserie_faturasimplificada ) <span style="color: #C76A40;
            font-weight: 800;">then</span> _const.maguita_tgrupo_cnormal
              <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_tserie_id = _const.maguita_tserie_fatura <span style="color: #C76A40;
            font-weight: 800;">then</span> _const.maguita_tgrupo_ccorrente
              <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_tserie_id = _const.maguita_tserie_guiasaida <span style="color: #C76A40;
            font-weight: 800;">then</span> _const.maguita_tgrupo_ccorrente
              <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_tserie_id = _const.maguita_tserie_notacredito <span style="color: #C76A40;
            font-weight: 800;">then</span> _const.maguita_tgrupo_ccorrente
              <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_tserie_id = _const.maguita_tserie_notadebito <span style="color: #C76A40;
            font-weight: 800;">then</span> _const.maguita_tgrupo_ccorrente
            <span style="color: #C76A40;
            font-weight: 800;">end</span>;

            <span style="color: #888">-- Gerar a serie para a conta dependento do tipo do documento (fatura, faturarecibo, notacredito, guiasaida)</span>
            _rec := tweeks.__sets_generate_documento( arg_espaco_auth, arg_tserie_id, _serie_id );
            _conta.conta_numerofatura := _rec.document;
            _conta.conta_serie := to_json( _rec );
            _conta.conta_serie_id = _rec.serie_id;

            _conta.conta_estado := _const.maguita_conta_estado_fechado;
            _conta.conta_imprensa := <span style="color: #C76A40">1</span>;
            _conta.conta_colaborador_fecho := arg_colaborador_id;
            _conta.conta_datafecho := <span style="color: #397300">current_timestamp</span>;
            _conta.conta_cliente_id := coalesce( _conta.conta_cliente_id, lib.to_uuid( <span style="color: #C76A40">1</span> ) );

            <span style="color: #888">-- Gerar a Guia de saida</span>
            _guia := jsonb_populate_record( _guia, args );
            _guia.guia_tguia_id := _const.maguita_tguia_saida;
            _guia.guia_espaco_saida := arg_espaco_auth;
            _guia.guia_toperacao_id := _const.maguita_toperacao_venda;
            _guia.guia_refclass := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( <span style="color: #4d99bf">&#x27;tweeks.conta&#x27;</span>::<span style="color: #C76A40">regclass</span> );
            _guia.guia_refuid := _conta.conta_id;
            _guia.guia_refs := jsonb_build_object(
              <span style="color: #4d99bf">&#x27;cliente&#x27;</span>, jsonb_build_object( <span style="color: #4d99bf">&#x27;cliente_id&#x27;</span>, _conta.conta_cliente_id ),
              <span style="color: #4d99bf">&#x27;saida&#x27;</span>, jsonb_build_object( <span style="color: #4d99bf">&#x27;espaco_id&#x27;</span>, _conta.conta_espaco_auth )
            );

            _guia := tweeks.funct_sets_guia( jsonb_build_object(
              <span style="color: #4d99bf">&#x27;guia&#x27;</span>, _guia,
              <span style="color: #4d99bf">&#x27;custoguia&#x27;</span>, args-&gt;<span style="color: #4d99bf">&#x27;custos&#x27;</span>,
              <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
              <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth
            ));

            <span style="color: #888">-- Vicular a informaçao de guia na conta extension com a tag guia_id</span>
            _conta.conta_extension := coalesce( _conta.conta_extension, jsonb_build_object() )
              || jsonb_build_object( <span style="color: #4d99bf">&#x27;guia_id&#x27;</span>, _guia.guia_uid );

            <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _conta
              <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets_up( _conta )
            ;


            <span style="color: #888">-- Caso necessairio lançar o deposito viculado a conta</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> coalesce( _deposito.deposito_montantemoeda, <span style="color: #C76A40">0.0</span> ) &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>

              _montante_amortizacao  := _deposito.deposito_montantemoeda * _cambio.cambio_taxa;
              <span style="color: #C76A40;
            font-weight: 800;">if</span> _montante_amortizacao &gt; _conta.conta_montante <span style="color: #C76A40;
            font-weight: 800;">and</span> _conta._tgrupo_id != _const.maguita_tgrupo_ccorrente <span style="color: #C76A40;
            font-weight: 800;">then</span>
                _deposito_montantetroco := _montante_amortizacao - _conta.conta_montante;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

              _deposito_montantetroco := coalesce( _deposito_montantetroco, _deposito.deposito_montantetroco, <span style="color: #C76A40">0.0</span> );

              _res := tweeks.funct_pos_reg_deposito(( args-&gt;<span style="color: #4d99bf">&#x27;deposito&#x27;</span> ) || jsonb_build_object(
                  <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth,
                  <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
                  <span style="color: #4d99bf">&#x27;arg_balance_accounts&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">false</span>,
                  <span style="color: #4d99bf">&#x27;deposito_cliente_id&#x27;</span>, _conta.conta_cliente_id,
                  <span style="color: #4d99bf">&#x27;deposito_montantetroco&#x27;</span>, _deposito_montantetroco,
                  <span style="color: #4d99bf">&#x27;_tgrupo_id&#x27;</span>, _conta._tgrupo_id,
                  <span style="color: #4d99bf">&#x27;deposito_referencia&#x27;</span>, jsonb_build_object( <span style="color: #4d99bf">&#x27;conta_id&#x27;</span>, _conta.conta_id ), <span style="color: #888">-- Vincula o deposito a conta</span>
                  <span style="color: #4d99bf">&#x27;deposito_documento&#x27;</span>, _conta.conta_numerofatura,
                  <span style="color: #4d99bf">&#x27;deposito_serie&#x27;</span>, _conta.conta_serie,
                  <span style="color: #4d99bf">&#x27;deposito_serie_id&#x27;</span>, _conta.conta_serie_id,
                  <span style="color: #4d99bf">&#x27;_raise&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">true</span> <span style="color: #888">-- Criar exception para comportamentos indesejados</span>
                ));

              <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _res.result <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">perform</span> lib.result_exception(
                    _res.message,
                    detail := _res.data::<span style="color: #C76A40">text</span>,
                    hint := _res.error::<span style="color: #C76A40">text</span>
                  );
              <span style="color: #C76A40;
            font-weight: 800;">else</span>
                _deposito := jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::tweeks.deposito, _res.data-&gt;<span style="color: #4d99bf">&#x27;deposito&#x27;</span> );
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true(
              message := <span style="color: #4d99bf">&#x27;@tweeks.conta.invoice-closed-success&#x27;</span>,
              data := jsonb_build_object(
                <span style="color: #4d99bf">&#x27;guia&#x27;</span>, _guia,
                <span style="color: #4d99bf">&#x27;conta&#x27;</span>, tweeks._get_conta( _conta.conta_id ),
                <span style="color: #4d99bf">&#x27;fatura&#x27;</span>, _conta.conta_numerofatura,
                <span style="color: #4d99bf">&#x27;recibo&#x27;</span>, _deposito.deposito_documento
              )
            );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_deposito_data {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_deposito_data(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">json</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              deposito_id: UUID
            }
           \*\/</span>
          _deposito tweeks.deposito;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _deposito := jsonb_populate_record( _deposito, args );
          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _deposito
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.deposito d
            <span style="color: #C76A40;
            font-weight: 800;">where</span> d.deposito_id = _deposito.deposito_id
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __deposito <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  de.deposito_id,
                  de.deposito_documento,
                  de.deposito_montante,
                  de.deposito_montantefinal,
                  de.deposito_montantetroco,
                  de.deposito_montantemoeda,
                  de.deposito_referencia,
                  de.deposito_docref,
                  de.deposito_data,
                  de.deposito_dataregistro,
                  de.deposito_observacao,
                  de._tgrupo_id,
                  tp.tpaga_id,
                  tp.tpaga_designacao,
                  cu.currency_name,
                  cu.currency_code,
                  cu.currency_symbol,
                  cli.cliente_id,
                  cli.cliente_nif,
                  cli.cliente_titular,
                  col.colaborador_id,
                  col.colaborador_nome,
                  col.colaborador_apelido,
                  col.colaborador_email,
                  cx.caixa_id,
                  po.posto_id,
                  po.posto_designacao,
                  po.posto_matricula
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.deposito de
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.cliente cli <span style="color: #C76A40;
            font-weight: 800;">on</span> de.deposito_cliente_id = cli.cliente_id
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.tpaga tp <span style="color: #C76A40;
            font-weight: 800;">on</span> de.deposito_tpaga_id = tp.tpaga_id
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> geoinfo.currency cu <span style="color: #C76A40;
            font-weight: 800;">on</span> de.deposito_currency_id  = cu.currency_id
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.colaborador col <span style="color: #C76A40;
            font-weight: 800;">on</span> de.deposito_colaborador_id = col.colaborador_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.caixa cx <span style="color: #C76A40;
            font-weight: 800;">on</span> de.deposito_caixa_id = cx.caixa_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.posto po <span style="color: #C76A40;
            font-weight: 800;">on</span> cx.caixa_posto_id = po.posto_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> de.deposito_id = _deposito.deposito_id
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_json( _d )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __deposito _d
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> to_json( reg )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.__lancamento_regularizacao( jsonb_build_object(
                <span style="color: #4d99bf">&#x27;cliente_id&#x27;</span>, _deposito.deposito_cliente_id,
                <span style="color: #4d99bf">&#x27;tgrupo_id&#x27;</span>, _deposito._tgrupo_id,
                <span style="color: #4d99bf">&#x27;braunc_uid&#x27;</span>, _deposito._branch_uid
              )) reg
              <span style="color: #C76A40;
            font-weight: 800;">where</span> _deposito.deposito_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( reg.regula_refid )
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_report_caixa {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_report_caixa(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Relatorio sobre as caixa e posto de venda
            filter := {
              arg_data_registro: { start: DATE, end: DATE }
              arg_posto_id: ID,
              arg_colaborador_vendedor: ID,
              arg_espaco_venda: ID,
              arg_espaco_auth: ID

            }
          \*\/</span>

          arg_data_registro_start <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_registro&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;start&#x27;</span>;
          arg_data_registro_end <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_registro&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;end&#x27;</span>;

          arg_posto_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_id&#x27;</span>;
          arg_espaco_venda <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_venda&#x27;</span>;
          arg_caixa_estado <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_caixa_estado&#x27;</span>;
          arg_colaborador_vendedor <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_vendedor&#x27;</span>;

          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> report <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">with</span> caixa_amortizacao <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    am.amortizacao_caixa_id,
                    count( am.amortizacao_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> caixa_totalcobrado,
                    sum( am.amortizacao_montante ) <span style="color: #C76A40;
            font-weight: 800;">as</span> caixa_montantefaturado
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.amortizacao am
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> am.amortizacao_estado = _const.amortizacao_estado_ativo
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> am.amortizacao_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
                  <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> am.amortizacao_caixa_id

              ), caixa_conta <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    ct.conta_caixa_fechopagamento,
                    count( ct.conta_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> caixa_contasaberta
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_estado <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.conta_estado_pago, _const.conta_estado_fechado )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
                  <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ct.conta_caixa_fechopagamento

              ), caixa_conta_fecho <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span> ct.conta_caixa_fechopagamento,
                    count( ct.conta_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> caixa_contafechada
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_estado <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.conta_estado_pago, _const.conta_estado_fechado )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
                  <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ct.conta_caixa_fechopagamento
              ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    cx.*,
                    co.*,
                    pos.*,
                    esp.*,
                    lib.str_nospace( to_char( cx.caixa_id, <span style="color: #4d99bf">&#x27;&quot;CX#&quot;000-000&#x27;</span> ) ) <span style="color: #C76A40;
            font-weight: 800;">as</span> caixa_codigo,

                    format( <span style="color: #4d99bf">&#x27;%s %s&#x27;</span>, co.colaborador_nome, co.colaborador_apelido ) <span style="color: #C76A40;
            font-weight: 800;">as</span> colaborador_nomecompleto,
                    <span style="color: #C76A40;
            font-weight: 800;">case</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> cx.caixa_estado = _const.caixa_estado_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span> cx.caixa_dataatualizacao <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> caixa_datafecho,
                    cxa.caixa_totalcobrado <span style="color: #C76A40;
            font-weight: 800;">as</span> caixa_totalcobrado,
                    coalesce( cxa.caixa_montantefaturado, <span style="color: #C76A40">0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> caixa_montantefaturado,
                    coalesce( cxc.caixa_contasaberta, <span style="color: #C76A40">0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> caixa_contasaberta,
                    coalesce( cxcf.caixa_contafechada, <span style="color: #C76A40">0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> caixa_contafechada,
                    <span style="color: #C76A40;
            font-weight: 800;">case</span>
                      <span style="color: #C76A40;
            font-weight: 800;">when</span> cx.caixa_estado = _const.cambio_estado_ativo <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #4d99bf">&#x27;Ativo&#x27;</span>
                      <span style="color: #C76A40;
            font-weight: 800;">when</span> cx.caixa_estado = _const.cambio_estado_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #4d99bf">&#x27;Fechado&#x27;</span>
                    <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> caixa_estadodesc
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.caixa cx
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.colaborador co <span style="color: #C76A40;
            font-weight: 800;">on</span> cx.caixa_colaborador_id = co.colaborador_id
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.posto pos <span style="color: #C76A40;
            font-weight: 800;">on</span> cx.caixa_posto_id = pos.posto_id
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco esp <span style="color: #C76A40;
            font-weight: 800;">on</span> pos.posto_espaco_destino = esp.espaco_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> caixa_amortizacao cxa <span style="color: #C76A40;
            font-weight: 800;">on</span> cx.caixa_id = cxa.amortizacao_caixa_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> caixa_conta cxc <span style="color: #C76A40;
            font-weight: 800;">on</span> cx.caixa_id = cxc.conta_caixa_fechopagamento
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> caixa_conta_fecho cxcf <span style="color: #C76A40;
            font-weight: 800;">on</span> cx.caixa_id = cxcf.conta_caixa_fechopagamento
                <span style="color: #C76A40;
            font-weight: 800;">where</span> cx.caixa_dataregistro::<span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">between</span> coalesce( arg_data_registro_start, cx.caixa_dataregistro::<span style="color: #C76A40">date</span> ) <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( arg_data_registro_end, cx.caixa_dataregistro::<span style="color: #C76A40">date</span> )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> cx.caixa_estado = coalesce( arg_caixa_estado, cx.caixa_estado )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> pos.posto_id = coalesce( arg_posto_id, pos.posto_id )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> esp.espaco_id = coalesce( arg_espaco_venda, esp.espaco_id )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> cx.caixa_colaborador_id = coalesce( arg_colaborador_vendedor, cx.caixa_colaborador_id )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> cx.caixa_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
                <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> cx.caixa_estado <span style="color: #C76A40;
            font-weight: 800;">desc</span>,
                  cx.caixa_dataregistro <span style="color: #C76A40;
            font-weight: 800;">desc</span>
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  lib.jsonb_values( to_jsonb( r ),
                    <span style="color: #4d99bf">&#x27;caixa_id&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;caixa_codigo&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;caixa_montanteinicial&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;caixa_montantefecho&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;caixa_quantidadecheque&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;caixa_observacao&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;caixa_dataregistro&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;posto_designacao&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;espaco_nome&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;posto_designacao&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;espaco_descricao&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;colaborador_nomecompleto&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;caixa_datafecho&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;caixa_totalcobrado&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;caixa_montantefaturado&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;caixa_contasaberta&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;caixa_contafechada&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;caixa_estadodesc&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;colaborador_nome&#x27;</span>
                  )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> report r;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_posto_closed {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_posto_closed()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(posto_id <span style="color: #C76A40">uuid</span>, posto_designacao <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, espaco_id <span style="color: #C76A40">uuid</span>, espaco_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                pos.posto_id,
                pos.posto_designacao,
                esp.espaco_id,
                esp.espaco_nome
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.posto pos
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco esp <span style="color: #C76A40;
            font-weight: 800;">on</span> pos.posto_espaco_destino = esp.espaco_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> pos.posto_estado != _const.posto_estado_encerado
                <span style="color: #C76A40;
            font-weight: 800;">and</span> esp.espaco_estado = _const.espaco_estado_ativo
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __generate_classe_code {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__generate_classe_code(brc <span style="color: #C76A40">uuid</span>, user_brc <span style="color: #C76A40">uuid</span>, space_brc <span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _code <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;
          _len <span style="color: #C76A40">int</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40">3</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _cluster := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local();
          brc := coalesce( brc, tweeks.__branch_uid( user_brc, space_brc ));

          <span style="color: #C76A40;
            font-weight: 800;">while</span> _code <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>
            _code := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.next( <span style="color: #4d99bf">&#x27;artigo.code/seq&#x27;</span>, sub := brc::<span style="color: #C76A40">text</span>, lpad := _len, lpad_char := <span style="color: #4d99bf">&#x27;0&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">if</span>( <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
              <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.classe c
                <span style="color: #C76A40;
            font-weight: 800;">where</span> c.classe_codigo = _code
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> c._branch_uid = coalesce( brc, c._branch_uid )
            )) <span style="color: #C76A40;
            font-weight: 800;">then</span>
              _code := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> _code;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_dispoe {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_dispoe(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para efetuar o registro da disposicao
            args = {
              arg_colaborador_id: ID,
              arg_espaco_auth: ID
              arg_atrigo_id: ID,
              arg_items: [
                @+id/item_id,
                @+id/item_id,
                @+id/item_id
              ]
            }
           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
          arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_atrigo_id&#x27;</span>;
          arg_items <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;<span style="color: #4d99bf">&#x27;arg_items&#x27;</span>;

          arg_items_id <span style="color: #C76A40">uuid</span> [] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> item_id::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements_text( arg_items ) doc ( item_id ) );
          ativated_dispoe tweeks.dispoe[];
          desativated_dispoe tweeks.dispoe[];
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();



          <span style="color: #888">-- Desativar todos os item atualmente associado ao produto que não faz para da nova disposicao</span>
          <span style="color: #C76A40;
            font-weight: 800;">with</span> desativateds <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.dispoe
              <span style="color: #C76A40;
            font-weight: 800;">set</span> dispoe_estado = _const.dispoe_estado_fechado,
                  dispoe_dataatualizacao =   <span style="color: #397300">current_timestamp</span>,
                  dispoe_colaborador_atualizacao = arg_colaborador_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> dispoe_artigo_id = arg_artigo_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> dispoe_estado = _const.dispoe_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> dispoe_artigo_item != <span style="color: #C76A40;
            font-weight: 800;">all</span>( arg_items_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> dispoe_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
              <span style="color: #C76A40;
            font-weight: 800;">returning</span> *
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> array_agg( desa ) <span style="color: #C76A40;
            font-weight: 800;">into</span> desativated_dispoe
            <span style="color: #C76A40;
            font-weight: 800;">from</span> desativateds  desa
          ;

          <span style="color: #888">-- Registar os novos itens</span>
          <span style="color: #C76A40;
            font-weight: 800;">with</span> ativated <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.dispoe (
              dispoe_artigo_id,
              dispoe_artigo_item,
              dispoe_colaborador_id,
              dispoe_espaco_auth
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
                arg_artigo_id,
                it.artigo_id,
                arg_colaborador_id,
                arg_espaco_auth
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo it
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.dispoe d <span style="color: #C76A40;
            font-weight: 800;">on</span> it.artigo_id = d.dispoe_artigo_item
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> d.dispoe_estado = _const.dispoe_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> d.dispoe_artigo_id = arg_artigo_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> it.artigo_id = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( arg_items_id )
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> it.artigo_id
              <span style="color: #C76A40;
            font-weight: 800;">having</span> count( d.dispoe_id ) = <span style="color: #C76A40">0</span>
              <span style="color: #C76A40;
            font-weight: 800;">returning</span> *
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> array_agg( ins ) <span style="color: #C76A40;
            font-weight: 800;">into</span> ativated_dispoe
            <span style="color: #C76A40;
            font-weight: 800;">from</span> ativated ins
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;dispoe_desativated&#x27;</span>, desativated_dispoe,
            <span style="color: #4d99bf">&#x27;dispoe_ativated&#x27;</span>,  ativated_dispoe,
            <span style="color: #4d99bf">&#x27;dispoe&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">array</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> disp
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.dispoe disp
                <span style="color: #C76A40;
            font-weight: 800;">where</span> disp.dispoe_artigo_id = arg_artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> disp.dispoe_estado = _const.dispoe_estado_ativo
            )
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_colaborador {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_colaborador(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para cadastra novos colaboradores
            Ao cadastar o colaborador a senha é atribuida automaticamente em um random
            E gerado tambem um token que devera ser enviado pela aplicao ao email do colaborador cadastrado
            O email e o NIF tem que ser unico
            args := {
              arg_colaborador_id: ID,
              arg_espaco_auth: ID,
              arg_espaco : [
                { arg_espaco_id: ID }
              ]
              arg_colaborador_email: EMAIL,
              arg_colaborador_nome: NOME,
              arg_colaborador_apelido: APELIDO,
              arg_colaborador_nif: NIF,
              arg_colaborador_datanascimento: DATA,
              arg_colaborador_ficha: FICHA,
              arg_colaborador_foto: FICHA,
              arg_tsexo_id: ID,
              arg_colaborador_senha: DEFAULT_SENHA_IF_EXIST,
              arg_colaborador_pin: DEFAULT_PIN_IF_SET,
              arg_branch_uid: UUID
              arg_colaborador_tipo
            }

           \*\/</span>
          arg_branch_uid <span style="color: #C76A40">uuid</span>                       := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_branch_uid&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span>                   := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span>                      := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_email <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>   := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_email&#x27;</span>;
          arg_colaborador_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>    := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_nome&#x27;</span>;
          arg_colaborador_apelido <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_apelido&#x27;</span>;
          arg_colaborador_nif <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>     := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_nif&#x27;</span>;
          arg_colaborador_datanascimento <span style="color: #C76A40">date</span>       := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_datanascimento&#x27;</span>;
          arg_colaborador_ficha <span style="color: #C76A40">jsonb</span>               := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_ficha&#x27;</span>;
          arg_colaborador_foto <span style="color: #C76A40">varchar</span>               := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_foto&#x27;</span>;
          arg_tsexo_id <span style="color: #C76A40">int2</span>                         := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_tsexo_id&#x27;</span>;
          arg_colaborador_token <span style="color: #C76A40">text</span>;
          arg_menu_list <span style="color: #C76A40">jsonb</span>                       := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_menu_list&#x27;</span>;
          arg_colaborador_pin <span style="color: #C76A40">varchar</span>               := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_pin&#x27;</span>;
          arg_colaborador_senha <span style="color: #C76A40">varchar</span>             := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_senha&#x27;</span>;
          arg_colaborador_tipo <span style="color: #C76A40">int2</span>             := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_tipo&#x27;</span>;


          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _colaborador auth.colaborador;
          _res lib.result;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #888">-- normalizar os dados do colaborador</span>
          arg_colaborador_email := lower( lib.str_normalize( arg_colaborador_email ) );
          arg_colaborador_nif := lower( lib.str_normalize( arg_colaborador_nif ) );
          arg_colaborador_nome := lib.str_normalize( arg_colaborador_nome );
          arg_colaborador_apelido := lib.str_normalize( arg_colaborador_apelido );

          <span style="color: #888">-- As informacoes do tipo texto tem que estar normalizados</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_colaborador_email <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;@auth.colaborador.invalid-mail&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_colaborador_nome <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;@auth.colaborador.invalid-name&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- Garantir que nao exista o  NIF</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> (
               <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * )
               <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.colaborador co
               <span style="color: #C76A40;
            font-weight: 800;">where</span> co.colaborador_email =  arg_colaborador_email
             ) &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;@auth.colaborador.email-exist&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- Garantir que o nif seja unico</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> (
               <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * )
               <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.colaborador co
               <span style="color: #C76A40;
            font-weight: 800;">where</span> co.colaborador_nif = arg_colaborador_nif
             ) &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_false( <span style="color: #4d99bf">&#x27;@auth.colaborador.nif-exist&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          arg_colaborador_tipo := coalesce( arg_colaborador_tipo, _const.colaborador_tipo_user );
          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> auth.colaborador(
            colaborador_colaborador_id,
            colaborador_email,
            colaborador_nome,
            colaborador_apelido,
            colaborador_nif,
            colaborador_datanascimento,
            colaborador_foto,
            colaborador_tsexo_id,
            colaborador_espaco_auth,
            colaborador_branch_uid,
            colaborador_tipo
          ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
             arg_colaborador_id,
             arg_colaborador_email,
             arg_colaborador_nome,
             arg_colaborador_apelido,
             arg_colaborador_nif,
             arg_colaborador_datanascimento,
             arg_colaborador_foto,
             arg_tsexo_id,
             arg_espaco_auth,
             arg_branch_uid,
             arg_colaborador_tipo
           ) <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _colaborador;

          <span style="color: #C76A40;
            font-weight: 800;">perform</span> auth.funct_reg_acesso(
              jsonb_build_object(
                  <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
                  <span style="color: #4d99bf">&#x27;arg_colaborador_propetario&#x27;</span>, _colaborador.colaborador_id,
                  <span style="color: #4d99bf">&#x27;arg_menu_list&#x27;</span>, arg_menu_list,
                  <span style="color: #4d99bf">&#x27;_branch_uid&#x27;</span>, arg_branch_uid
                )
            );

          <span style="color: #C76A40;
            font-weight: 800;">perform</span> tweeks.funct_reg_trabalha(
              jsonb_build_object(
                  <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth,
                  <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
                  <span style="color: #4d99bf">&#x27;arg_colaborador_propetario&#x27;</span>, _colaborador.colaborador_id,
                  <span style="color: #4d99bf">&#x27;arg_espaco&#x27;</span>, args-&gt;<span style="color: #4d99bf">&#x27;arg_espaco&#x27;</span>
              ));

          _res := auth.funct_change_colaborador_accesso_reativar(
              jsonb_build_object(
                  <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
                  <span style="color: #4d99bf">&#x27;arg_colaborador_reative&#x27;</span>, _colaborador.colaborador_id,
                  <span style="color: #4d99bf">&#x27;arg_colaborador_senha&#x27;</span>, arg_colaborador_senha,
                  <span style="color: #4d99bf">&#x27;arg_colaborador_pin&#x27;</span>, arg_colaborador_pin
                )
            );

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true(
                jsonb_build_object(
                    <span style="color: #4d99bf">&#x27;colaborador&#x27;</span>, lib.jsonb_values(
                    to_jsonb( _colaborador ),
                    <span style="color: #4d99bf">&#x27;colaborador_id&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;colaborador_tsexo_id&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;colaborador_email&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;colaborador_nif&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;colaborador_nome&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;colaborador_apelido&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;colaborador_datanascimento&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;colaborador_ficha&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;colaborador_dataultimaatualizacasenha&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;colaborador_accesso&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;colaborador_estado&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;colaborador_dataregisto&#x27;</span>
                  )
                  ) || _res.message
            );

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_link_move {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_link_move(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para trocar duas link de posição
            arg_link_id: ID,
            arg_colaborador_id: ID,
            arg_move_incremento: ID,
           \*\/</span>
          _link tweeks.link;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;

          arg_link_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_link_id&#x27;</span>;
          arg_move_incremento <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_move_incremento&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_link_start <span style="color: #C76A40">int2</span>;
          arg_link_end <span style="color: #C76A40">int2</span>;
          arg_incremento <span style="color: #C76A40">int2</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">lock</span> tweeks.link <span style="color: #C76A40;
            font-weight: 800;">in</span> <span style="color: #C76A40;
            font-weight: 800;">share mode</span>;

          _link := tweeks._get_link( arg_link_id );
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_move_incremento = <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;@tweeks.link.move-none&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _link.link_posicao + arg_move_incremento &lt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;@move-position-invalid&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _link.link_estado != _const.link_estado_ativo <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;@tweeks.link.is-closed&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_move_incremento &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            arg_link_start := _link.link_posicao;
            arg_link_end := _link.link_posicao + arg_move_incremento;
            arg_incremento := <span style="color: #C76A40">-1</span>;
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            arg_link_start := _link.link_posicao + arg_move_incremento;
            arg_link_end := _link.link_posicao;
            arg_incremento := <span style="color: #C76A40">1</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span> ;

          <span style="color: #888">-- Mover as links todas</span>
          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.link
            <span style="color: #C76A40;
            font-weight: 800;">set</span> link_posicao = <span style="color: #C76A40;
            font-weight: 800;">case</span>
                <span style="color: #C76A40;
            font-weight: 800;">when</span> link_id = _link.link_id <span style="color: #C76A40;
            font-weight: 800;">then</span> link_posicao + arg_move_incremento
                <span style="color: #C76A40;
            font-weight: 800;">else</span> link_posicao + arg_incremento
              <span style="color: #C76A40;
            font-weight: 800;">end</span>,
              link_colaborador_atualizacao = arg_colaborador_id,
              link_dataatualizacao = <span style="color: #397300">current_timestamp</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> link_posicao <span style="color: #C76A40;
            font-weight: 800;">between</span> arg_link_start <span style="color: #C76A40;
            font-weight: 800;">and</span> arg_link_end
              <span style="color: #C76A40;
            font-weight: 800;">and</span> link_espaco_destino = _link.link_espaco_destino
              <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( link_link_id, <span style="color: #C76A40">-1</span> ) = coalesce( _link.link_link_id, <span style="color: #C76A40">-1</span> )
              <span style="color: #C76A40;
            font-weight: 800;">and</span> link_estado = _const.link_estado_ativo
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;link&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">array</span>(
              <span style="color: #C76A40;
            font-weight: 800;">select</span> a
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.link a
                <span style="color: #C76A40;
            font-weight: 800;">where</span> link_posicao <span style="color: #C76A40;
            font-weight: 800;">between</span> arg_link_start <span style="color: #C76A40;
            font-weight: 800;">and</span> arg_link_end
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> link_espaco_destino = _link.link_espaco_destino
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( link_link_id, <span style="color: #C76A40">-1</span> ) = coalesce( _link.link_link_id, <span style="color: #C76A40">-1</span> )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> link_estado = _const.link_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> a.link_posicao
            )
          );

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_stock {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_stock(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              arg_colaborador_id: ID,
              arg_artigo_id: ID,
              arg_espacao_id: ID,
              arg_stock_quantidade: QUANT,
            }
           \*\/</span>

          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span>;
          arg_espacao_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espacao_id&#x27;</span>;
          arg_stock_quantidade <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_stock_quantidade&#x27;</span>;

          _stock tweeks.stock;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #888">-- Garantir que não existe um estock desse produto para o local já definico</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * ) &gt; <span style="color: #C76A40">0</span>
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.stock st
              <span style="color: #C76A40;
            font-weight: 800;">where</span> st.stock_espacao_id = arg_espacao_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> st.stock_artigo_id = arg_artigo_id
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;Stock já existe!&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- Criar o novo stock</span>
          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.stock(
            stock_artigo_id,
            stock_espacao_id,
            stock_colaborador_id
          )  <span style="color: #C76A40;
            font-weight: 800;">values</span> (
            arg_artigo_id,
            arg_espacao_id,
            arg_colaborador_id
          ) <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _stock;


          <span style="color: #888">-- Atualizar o stock se a quantidade de stock for diferente que zero</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_stock_quantidade <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">perform</span> tweeks.funct_reg_acerto(
              jsonb_build_object(
                <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
                <span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span>, arg_artigo_id,
                <span style="color: #4d99bf">&#x27;arg_espaco_id&#x27;</span>, arg_espacao_id,
                <span style="color: #4d99bf">&#x27;arg_acerto_quantidade&#x27;</span>, arg_stock_quantidade,
                <span style="color: #4d99bf">&#x27;arg_acerto_observacao&#x27;</span>, <span style="color: #4d99bf">&#x27;Acerto inicial para começar o stock com uma quantidade expeficica dos produto.&#x27;</span>
              )
            );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;stock&#x27;</span>, _stock
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_classe {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks._get_classe(arg_classe_id <span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> classe
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #888">-- Essa função devolve uma instancia da classe do artigo</span>
        <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.classe clas <span style="color: #C76A40;
            font-weight: 800;">where</span> clas.classe_id = arg_classe_id;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_espaco_configuracao {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_espaco_configuracao(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para atualizar as informações do espaco
            args := {
              arg_espaco_auth: ID
              arg_colaborador_id: ID
              arg_espaco_configuracao: JSON
            }
          \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_configuracao <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;<span style="color: #4d99bf">&#x27;arg_espaco_configuracao&#x27;</span>;
          _espaco tweeks.espaco;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.espaco
            <span style="color: #C76A40;
            font-weight: 800;">set</span>
                espaco_configuracao = arg_espaco_configuracao,
                espaco_colaborador_atualizaco = arg_colaborador_id,
                espaco_dataatualizacao = <span style="color: #397300">current_timestamp</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> espaco_id = arg_espaco_auth
            <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _espaco
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;espaco&#x27;</span>, _espaco
          );

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_espaco {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_espaco(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para atualizar as informações do espaco
            args := {
              arg_espaco_change: ID -- id do espao que ser atualizado
              arg_espaco_vender: BOOLEAN
              arg_espaco_auth: ID
              arg_colaborador_id: ID
              arg_espaco_nome: NOME
              arg_espaco_descricao: DESCRICAO
              arg_espaco_gerarfatura: BOOLEAN
              arg_espaco_configurar: BOOLEAN
              arg_espaco_posto_admin: UUID,
              xBranch:boolean
            }
          \*\/</span>

          arg_espaco_vender <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_vender&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_change <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_change&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_nome&#x27;</span>;
          arg_espaco_descricao <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_descricao&#x27;</span>;
          arg_espaco_gerarfatura <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_gerarfatura&#x27;</span>;
          arg_espaco_configurar <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_configurar&#x27;</span>;
          arg_espaco_posto_admin <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_posto_admin&#x27;</span>;
          xBranch <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;xBranch&#x27;</span>;
          _espaco tweeks.espaco;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          xBranch := coalesce( xBranch, <span style="color: #C76A40;
            font-weight: 800;">false</span> );

          <span style="color: #888">--Quando for uma atualização do propietario</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> xBranch <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.espaco
              <span style="color: #C76A40;
            font-weight: 800;">set</span> espaco_nome = arg_espaco_nome,
                  espaco_descricao = arg_espaco_descricao,
                  espaco_vender = arg_espaco_vender,
                  espaco_gerarfatura = arg_espaco_gerarfatura,
                  espaco_configurar = arg_espaco_configurar,
                  espaco_posto_admin = coalesce( arg_espaco_posto_admin, espaco_posto_admin ),

                  espaco_colaborador_atualizaco = arg_colaborador_id,
                  espaco_dataatualizacao = <span style="color: #397300">current_timestamp</span>
              <span style="color: #C76A40;
            font-weight: 800;">where</span> espaco_id = arg_espaco_change
              <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _espaco
            ;
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.espaco
              <span style="color: #C76A40;
            font-weight: 800;">set</span> espaco_nome = arg_espaco_nome,
                  espaco_colaborador_atualizaco = arg_colaborador_id,
                  espaco_dataatualizacao = <span style="color: #397300">current_timestamp</span>
              <span style="color: #C76A40;
            font-weight: 800;">where</span> espaco_id = arg_espaco_change
              <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _espaco;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;espaco&#x27;</span>, _espaco
          );

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>; ll <span style="color: #C76A40">jsonb</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __tg_use_branch {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__tg_use_branch()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            _class <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( format(<span style="color: #4d99bf">&#x27;%I.%I&#x27;</span>, <span style="color: #397300">tg_table_schema</span>, <span style="color: #397300">tg_table_name</span> ) );
            _map <span style="color: #C76A40">record</span>;
            __branch_uid <span style="color: #C76A40">uuid</span>;
            __colaborador_uid <span style="color: #C76A40">uuid</span>;
            __espaco_uid <span style="color: #C76A40">uuid</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>

            <span style="color: #888">-- Quando houver branch previeamente definido</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #397300">new</span>._branch_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #397300">new</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _map
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.branchmap b
              <span style="color: #C76A40;
            font-weight: 800;">where</span> b.<span style="color: #C76A40;
            font-weight: 800;">class</span> = _class;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _map.<span style="color: #C76A40;
            font-weight: 800;">class</span> <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #397300">new</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _map.map_spc <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> _map.map_usr <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #397300">new</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _map.map_brc <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #397300">new</span>._branch_uid := to_jsonb( <span style="color: #397300">new</span> )-&gt;&gt;( _map.map_brc );
              <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #397300">new</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            __colaborador_uid := to_jsonb( <span style="color: #397300">new</span> )-&gt;&gt;( _map.map_usr );
            __espaco_uid := to_jsonb( <span style="color: #397300">new</span> )-&gt;&gt;( _map.map_spc );

            __branch_uid := tweeks.__branch_uid(__colaborador_uid, __espaco_uid );
            <span style="color: #C76A40;
            font-weight: 800;">if</span> __branch_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #888">--       raise exception &#x27;Não pode determinar o branch para o registro, verificar o mapeamento dos branch!&#x27;;</span>
          <span style="color: #888">--     else</span>
              <span style="color: #397300">new</span>._branch_uid := __branch_uid;
            <span style="color: #C76A40;
            font-weight: 800;">else</span>
          <span style="color: #888">--       raise exception &#x27;USR: % = %, SPC: % = %&#x27;, _map.map_usr, __colaborador_uid, _map.map_spc, __espaco_uid;</span>
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #397300">new</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_load_conta_proforma {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_load_conta_proforma(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para devolver as compras do dia em uma data especifica
            filter := {
              arg_posto_id: DATE
              arg_espaco_id uuid
              arg_colaborador_id
            }
           \*\/</span>
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #888">--   arg_posto_id uuid not null default filter-&gt;&gt;&#x27;arg_posto_id&#x27;;</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;

          _posto tweeks.posto;
          __branch_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
        <span style="color: #888">--   _posto := tweeks._get_posto( arg_posto_id );</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __conta <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  ct.conta_id,
                  ct.conta_data,
                  ct.conta_dataregistro,
                  ct.conta_titular,
                  ct.conta_titularnif,
                  ct.conta_montante,
                  ct.conta_numerofatura,
                  ct.conta_numero,
                  ct.conta_proformavencimento,
                  ct.conta_proformaextras,
                  ct.conta_props,
                  cli.cliente_id,
                  cli.cliente_titular,
                  cli.cliente_nif,
                  cli.cliente_metadata,
                  cli.cliente_documento,
                  td.tdocumento_id,
                  td.tdocumento_nome,
                  co.colaborador_id,
                  co.colaborador_nome,
                  co.colaborador_apelido
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.colaborador co <span style="color: #C76A40;
            font-weight: 800;">on</span> coalesce( ct.conta_colaborador_fecho, ct.conta_colaborador_atualizacao, ct.conta_colaborador_id ) = co.colaborador_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.cliente cli <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_cliente_id = cli.cliente_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.tdocuemto td <span style="color: #C76A40;
            font-weight: 800;">on</span> cli.cliente_tdocument_id = td.tdocumento_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ct._branch_uid = __branch_uid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_estado = _const.maguita_conta_estado_aberto
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_proforma
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _ct )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __conta _ct
            ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_generate_key {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_generate_key(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\**
              arg_colaborador_id uuid
              arg_espaco_auth uuid
             \*\/</span>
            arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
            arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
            ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
            _key <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">while</span> _key <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>
                _key :=  <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.next( <span style="color: #4d99bf">&#x27;artigo.key/seq&#x27;</span>, ___branch::<span style="color: #C76A40">text</span>, lpad := <span style="color: #C76A40">9</span>, lpad_char := <span style="color: #4d99bf">&#x27;0&#x27;</span> );
                _key := format( <span style="color: #4d99bf">&#x27;CTK-%s-%s&#x27;</span>, _key, lib.dset_random_text(<span style="color: #C76A40">32</span> ) );
                <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
                    <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                      <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
                      <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_chave = _key
                        <span style="color: #C76A40;
            font-weight: 800;">and</span> ct._branch_uid = ___branch
                ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
                  _key := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> _key;
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
          $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_classe {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_classe(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para carregar as listas de classes ativas
            filter := {
              arg_espaco_auth: ID
            }
          \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span>
              __espaco <span style="color: #C76A40;
            font-weight: 800;">as</span> ( <span style="color: #C76A40;
            font-weight: 800;">select</span> e.espaco_id, e.espaco_nome <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.espaco e),
              __links <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    l.link_referencia,
                    l.link_espaco_destino,
                    array_agg( to_jsonb( e ) ) <span style="color: #C76A40;
            font-weight: 800;">as</span> espacos
                  <span style="color: #C76A40;
            font-weight: 800;">from</span>  __espaco e
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.link l <span style="color: #C76A40;
            font-weight: 800;">on</span> e.espaco_id = l.link_espaco_destino
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> l.link_estado = _const.maguita_link_estado_ativo
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_tlink_id = _const.maguita_tlink_classe
                  <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> l.link_referencia,
                    l.link_espaco_destino

                ),
              __classe <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    cla.classe_id,
                    cla.classe_classe_id,
                    cla.classe_nome,
                    cla.classe_foto,
                    cla.classe_position,
                    jsonb_build_object(
                      <span style="color: #4d99bf">&#x27;total&#x27;</span>, count( <span style="color: #C76A40;
            font-weight: 800;">distinct</span> atr.artigo_id ),
                      <span style="color: #4d99bf">&#x27;ativos&#x27;</span>, count( <span style="color: #C76A40;
            font-weight: 800;">distinct</span> atr.artigo_id ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> atr.artigo_estado = _const.artigo_estado_ativo )
                    ) <span style="color: #C76A40;
            font-weight: 800;">as</span> artigos,
                    coalesce( l.espacos, <span style="color: #C76A40;
            font-weight: 800;">array</span>[]::<span style="color: #C76A40">jsonb</span>[] ) <span style="color: #C76A40;
            font-weight: 800;">as</span> classe_espacos

                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.classe cla
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> __links l <span style="color: #C76A40;
            font-weight: 800;">on</span> ( l.link_referencia-&gt;&gt;<span style="color: #4d99bf">&#x27;classe_id&#x27;</span> )::<span style="color: #C76A40">uuid</span> = cla.classe_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.artigo atr <span style="color: #C76A40;
            font-weight: 800;">on</span> cla.classe_id = atr.artigo_classe_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> cla.classe_estado = _const.classe_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ( 
                    cla.classe_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
                      <span style="color: #C76A40;
            font-weight: 800;">or</span> l.link_espaco_destino = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
                      <span style="color: #C76A40;
            font-weight: 800;">or</span> cla.classe_id = _const.classe_itemextra
                  )
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> cla.classe_id, cla.classe_nome, l.espacos
                <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                  <span style="color: #C76A40;
            font-weight: 800;">case</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> cla.classe_id != _const.classe_itemextra <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">1</span>
                    <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">2</span>
                  <span style="color: #C76A40;
            font-weight: 800;">end</span>,
                  cla.classe_nome
              ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( c )
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __classe c
            ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __get_serie_espaco {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__get_serie_espaco(arg_espaco_auth <span style="color: #C76A40">uuid</span>, arg_tserie <span style="color: #C76A40">integer</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> serie
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
         <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.serie s
            <span style="color: #C76A40;
            font-weight: 800;">where</span> s.serie_espaco_id = arg_espaco_auth::<span style="color: #C76A40">uuid</span>
              <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_tserie_id = arg_tserie::<span style="color: #C76A40">int2</span>
            <span style="color: #C76A40;
            font-weight: 800;">limit</span> <span style="color: #C76A40">1</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_transferencia {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_transferencia(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para registar uma transferencia de stock
            args := {
              arg_espaco_auth: *ID
              arg_colaborador_id: *ID,
              arg_espaco_origem: *ID,
              arg_espaco_destino: *ID,

              arg_transferencia_data: DATA,
              arg_transferencia_documento: DOC,
              arg_transferencia_observacao: OBS,
              arg_transferencias:[ {
                artigo_id: *ID,
                transferencia_quantidade: *QUANT
              }]
            }
          \*\/</span>

          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_origem <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_origem&#x27;</span>;
          arg_espaco_destino <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_destino&#x27;</span>;


          arg_transferencia_data <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_transferencia_data&#x27;</span>;
          arg_transferencia_documento <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lib.str_normalize( args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_transferencia_documento&#x27;</span> );
          arg_transferencia_observacao <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lib.str_nospace( args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_transferencia_observacao&#x27;</span> );
          arg_transferencias <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;<span style="color: #4d99bf">&#x27;arg_transferencias&#x27;</span>;

          _espaco_origem tweeks.espaco;
          _espaco_destino tweeks.espaco;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _data <span style="color: #C76A40">record</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          arg_transferencia_documento := coalesce( arg_transferencia_documento, upper( lib.dset_random_name( <span style="color: #C76A40">2</span>, <span style="color: #C76A40">9</span> ) ) );
          _espaco_origem := tweeks._get_espaco( arg_espaco_origem );
          _espaco_destino := tweeks._get_espaco( arg_espaco_destino );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _espaco_origem.espaco_estado = _const.maguita_espaco_estado_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;@tranferencia.espaco.origem.estatado-fechado&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _espaco_destino.espaco_estado = _const.maguita_espaco_estado_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;@tranferencia.espaco.destino.estatado-fechado&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">with</span> __transferencia <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                ( e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_id&#x27;</span> )::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> artigo_id,
                ( e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;transferencia_quantidade&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> transferencia_quantidade
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( arg_transferencias ) e( doc )
          ), __esgotado <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __transferencia tr
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> tr.artigo_id = art.artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks._get_stock( art.artigo_id, arg_espaco_origem ) s <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_id = s.stock_artigo_id
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> s.stock_espaco_id = arg_espaco_origem
                <span style="color: #C76A40;
            font-weight: 800;">where</span> s.stock_quantidade &lt; tr.transferencia_quantidade
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
              count( * ) <span style="color: #C76A40;
            font-weight: 800;">as</span> esgotado_total,
              string_agg( format( <span style="color: #4d99bf">&#x27;%s disponivel: %s, em falta: %s&#x27;</span>, artigo_nome, e.stock_quantidade, e.transferencia_quantidade - e.stock_quantidade ), <span style="color: #4d99bf">&#x27;, &#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> esgotado_message
              <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
            <span style="color: #C76A40;
            font-weight: 800;">from</span> __esgotado e
          ;

        <span style="color: #888">--   if _data.esgotado_total &gt; 0 then</span>
        <span style="color: #888">--     return lib.result_false( format( &#x27;Quantidade dos artigos disponivel insuficiente para a transferencia.&lt;br/&gt; Artigos: %s&#x27;, _data.esgotado_message ));</span>
        <span style="color: #888">--   end if;</span>

          <span style="color: #C76A40;
            font-weight: 800;">with</span>  __args <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                ( e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_id&#x27;</span> )::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> artigo_id,
                ( e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;transferencia_quantidade&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> transferencia_quantidade
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( arg_transferencias ) e( doc )
          ), __transferencia <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> a.*
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __args a
          ), __register <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.transferencia (
                transferencia_espaco_auth,
                transferencia_artigo_id,
                transferencia_espaco_origem,
                transferencia_espaco_destino,
                transferencia_colaborador_id,
                transferencia_quantidade,
                transferencia_data,
                transferencia_documento,
                transferencia_observacao
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
               arg_espaco_auth,
               artigo_id,
               arg_espaco_origem,
               arg_espaco_destino,
               arg_colaborador_id,
               t.transferencia_quantidade,
               arg_transferencia_data,
               arg_transferencia_documento,
               arg_transferencia_observacao
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __transferencia t
            <span style="color: #C76A40;
            font-weight: 800;">returning</span> *
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
              array_agg( r ) <span style="color: #C76A40;
            font-weight: 800;">as</span> transferencias
              <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
            <span style="color: #C76A40;
            font-weight: 800;">from</span> __register r
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>?jsonb_build_object(
            <span style="color: #4d99bf">&#x27;transferencia&#x27;</span>, _data.transferencias
          );

        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_fornecedor_estado {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_fornecedor_estado(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função atualiza o estado do fornecedor (ativa/desativa)
            args := {
              arg_colaborador_id: ID,
              arg_fornecedor_id: ID
            }
          \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_fornecedor_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_fornecedor_id&#x27;</span>;

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _fornecedor tweeks.fornecedor;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.fornecedor
            <span style="color: #C76A40;
            font-weight: 800;">set</span>
              fornecedor_estado = lib.swith( fornecedor_estado,
                  _const.maguita_fornecedor_estado_ativo,
                  _const.maguita_fornecedor_estado_fechado
              ),
              fornecedor_dataatualizacao = <span style="color: #397300">current_timestamp</span>,
              fornecedor_colaborador_atualizacao = arg_colaborador_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span> fornecedor_id = arg_fornecedor_id
            <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _fornecedor;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;fornecedor&#x27;</span>, _fornecedor
          );

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_cambio_history {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_cambio_history(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(cambio_id <span style="color: #C76A40">uuid</span>, cambio_taxa <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, cambio_data <span style="color: #C76A40">date</span>, cambio_estado <span style="color: #C76A40">smallint</span>, cambio_dataregistro <span style="color: #C76A40">timestamp</span> <span style="color: #C76A40">with time zone</span>, cambio_dataatualizacao <span style="color: #C76A40">timestamp</span> <span style="color: #C76A40">with time zone</span>, currency_id <span style="color: #C76A40">smallint</span>, currency_name <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, currency_symbol <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, currency_code <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função carrega os cambios ativo
            filter := {
              arg_espaco_auth: ID
            }
          \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                cb.cambio_id,
                cb.cambio_taxa,
                cb.cambio_data,
                cb.cambio_estado,
                cb.cambio_dataregistro,
                cb.cambio_dataatualizacao,

                cur.currency_id,
                cur.currency_name,
                cur.currency_code,
                cur.currency_symbol

              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.cambio cb
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> geoinfo.currency cur <span style="color: #C76A40;
            font-weight: 800;">on</span> cb.cambio_currency_id = cur.currency_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> cb.cambio_espaco_auth = arg_espaco_auth
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> cb.cambio_data <span style="color: #C76A40;
            font-weight: 800;">desc</span>,
                cb.cambio_dataregistro <span style="color: #C76A40;
            font-weight: 800;">desc</span>
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __space_branch_level {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__space_branch_level(_espaco_id <span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">integer</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">with</span> <span style="color: #C76A40;
            font-weight: 800;">recursive</span> __espaco <span style="color: #C76A40;
            font-weight: 800;">as</span> (
          <span style="color: #C76A40;
            font-weight: 800;">select</span>
            e.espaco_id,
            e.espaco_espaco_id,
            <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> _espaco_nivel
          <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.espaco e
          <span style="color: #C76A40;
            font-weight: 800;">where</span> e.espaco_espaco_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
          <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span>
            e2.espaco_id,
            e2.espaco_espaco_id,
            e3._espaco_nivel +<span style="color: #C76A40">1</span>
          <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.espaco e2
                 <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __espaco e3  <span style="color: #C76A40;
            font-weight: 800;">on</span> e2.espaco_espaco_id = e3.espaco_id
        ) <span style="color: #C76A40;
            font-weight: 800;">select</span> e._espaco_nivel
        <span style="color: #C76A40;
            font-weight: 800;">from</span> __espaco e
        <span style="color: #C76A40;
            font-weight: 800;">where</span> e.espaco_id = <span style="color: #1f7199">$1</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_trabalha {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_trabalha(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para registar os locas que um colaborador pode trabalhar
            args := {
              arg_espaco_auth: ID
              arg_colaborador_id: ID,
              arg_colaborador_propetario: ID,
              arg_espaco : [
                { arg_espaco_id: ID }
              ]
            }
          \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span>  <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[ ] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
          arg_colaborador_propetario <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_propetario&#x27;</span>;
          arg_espaco <span style="color: #C76A40">uuid</span>[ ] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span> ( <span style="color: #C76A40;
            font-weight: 800;">select</span> ( el.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_id&#x27;</span> )::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;arg_espaco&#x27;</span> ) el ( doc ) );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          __branch_uid <span style="color: #C76A40">uuid</span>;
          _branch  tweeks.branch;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _branch := tweeks._get_branch_by_colaborador( arg_colaborador_propetario );


          <span style="color: #888">-- Fechar todos os espaços em que o colaborador não vai mais trabalhar</span>
          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.trabalha
            <span style="color: #C76A40;
            font-weight: 800;">set</span> trabalha_estado = _const.maguita_trabalha_estado_fechado,
                trabalha_colaborador_atualizacao = arg_colaborador_id,
                trabalha_dataatualizacao = <span style="color: #397300">current_timestamp</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> trabalha_estado = _const.maguita_trabalha_estado_ativo
              <span style="color: #C76A40;
            font-weight: 800;">and</span> trabalha_colaborador_proprietario = arg_colaborador_propetario
              <span style="color: #C76A40;
            font-weight: 800;">and</span> trabalha_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )

          ;

          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.trabalha (
            trabalha_colaborador_id,
            trabalha_colaborador_proprietario,
            trabalha_perfil_id,
            trabalha_espaco_destino,
            trabalha_espaco_auth,
            _branch_uid
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> arg_colaborador_id,
              arg_colaborador_propetario,
              <span style="color: #C76A40;
            font-weight: 800;">null</span>,
              es.arg_espaco_id,
              arg_espaco_auth,
             __branch_uid
            <span style="color: #C76A40;
            font-weight: 800;">from</span> unnest( arg_espaco ) es ( arg_espaco_id )
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;trabalha&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">array</span>(
              <span style="color: #C76A40;
            font-weight: 800;">select</span> tr
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.trabalha tr
                <span style="color: #C76A40;
            font-weight: 800;">where</span> tr.trabalha_estado = _const.maguita_trabalha_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> tr.trabalha_colaborador_proprietario = arg_colaborador_propetario
            )
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface viewarg {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.viewarg(argname <span style="color: #C76A40">text</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">text</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">PARALLEL SAFE</span> <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">select</span> jsonb_build_object( <span style="color: #4d99bf">&#x27;value&#x27;</span>, current_setting( format( <span style="color: #4d99bf">&#x27;viewargs.%I&#x27;</span>, argname ), <span style="color: #C76A40;
            font-weight: 800;">true</span>)::<span style="color: #C76A40">jsonb</span> )-&gt;&gt;<span style="color: #4d99bf">&#x27;value&#x27;</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_artigo_base {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_artigo_base(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            arg_espaco_auth: UID
            arg_colaborador_id: UID
            arg_artigo_composto: UID

            arg_classe_id: ID
                arg_artigo_estado: ARTIGO_ESTADO
                query: {
                  any?: CODE|NAME|DESCRICAO
                  code?: CODE
                  name?: NAME
                  desc?: DESCRICAO
                }
           \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_artigo_composto <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_artigo_composto&#x27;</span>;

          ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          _artigo tweeks.artigo;
          _result <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _artigo := tweeks._get_artigo( arg_artigo_composto );

          <span style="color: #C76A40;
            font-weight: 800;">with</span> <span style="color: #C76A40;
            font-weight: 800;">recursive</span> __artigos <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                art.artigo_id,
                art.artigo_nome,
                art.artigo_artigo_id,
                <span style="color: #C76A40;
            font-weight: 800;">array</span>[ art.artigo_id ]::<span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">as</span> <span style="color: #C76A40">path</span>
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo art
              <span style="color: #C76A40;
            font-weight: 800;">where</span> art._branch_uid = ___branch
                <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_artigo_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
            <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  es.artigo_id,
                  es.artigo_nome,
                  es.artigo_artigo_id,
                  _e.path || es.artigo_id
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __artigos _e
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo es <span style="color: #C76A40;
            font-weight: 800;">on</span> _e.artigo_id = es.artigo_artigo_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> es._branch_uid = ___branch
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> array_agg( _art.artigo_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> artigos <span style="color: #C76A40;
            font-weight: 800;">into</span> _result
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __artigos _art
              <span style="color: #C76A40;
            font-weight: 800;">where</span>  arg_artigo_composto <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> (
                  arg_artigo_composto != <span style="color: #C76A40;
            font-weight: 800;">all</span>( _art.path )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> _art.artigo_id != coalesce( _artigo.artigo_artigo_id, _artigo.artigo_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> _art.artigo_id != _artigo.artigo_id
              )
          ;
          
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> e.document
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.funct_load_artigo( args ) e( document )
              <span style="color: #C76A40;
            font-weight: 800;">where</span> (e.document-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_id&#x27;</span>)::<span style="color: #C76A40">uuid</span> = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _result.artigos )
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_trabalha {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_trabalha(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para carragar os espaços onde um colaborador trabalha
            filter := {
              arg_colaborador_id: ID
            }
          \*\/</span>
          arg_colaborador_id  <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> aux <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> tr.*, esp.*
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.trabalha tr
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco esp <span style="color: #C76A40;
            font-weight: 800;">on</span> tr.trabalha_espaco_destino = esp.espaco_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> tr.trabalha_colaborador_proprietario = arg_colaborador_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> tr.trabalha_estado = _const.trabalha_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> esp.espaco_estado = _const.espaco_estado_ativo
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> lib.jsonb_values(
                a,
                <span style="color: #4d99bf">&#x27;espaco_id&#x27;</span>,
                <span style="color: #4d99bf">&#x27;espaco_nome&#x27;</span>,
                <span style="color: #4d99bf">&#x27;espaco_descricao&#x27;</span>,
                <span style="color: #4d99bf">&#x27;espaco_estado&#x27;</span>,
                <span style="color: #4d99bf">&#x27;espaco_dataregistro&#x27;</span>,
                <span style="color: #4d99bf">&#x27;espaco_dataatualizacao&#x27;</span>,
                <span style="color: #4d99bf">&#x27;espaco_gerarfatura&#x27;</span>,
                <span style="color: #4d99bf">&#x27;espaco_codigo&#x27;</span>,
                <span style="color: #4d99bf">&#x27;espaco_configurar&#x27;</span>,
                <span style="color: #4d99bf">&#x27;trabalha_id&#x27;</span>,
                <span style="color: #4d99bf">&#x27;trabalha_estado&#x27;</span>
              )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> aux a
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> a.trabalha_posicao,
                a.espaco_nivel,
                a.espaco_id
            ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_mesa {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_mesa(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para cadastrar uma nova mesa
            args := {
              arg_colaborador_id: ID,
              arg_mesa_numero: NUMERO,
              arg_mesa_lotacao: NUMERO,
              arg_mesa_descricao: DESCRICAO,
            }
           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_mesa_numero <span style="color: #C76A40">varchar</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lib.str_normalize( args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_mesa_numero&#x27;</span> );
          arg_mesa_descricao <span style="color: #C76A40">varchar</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lib.str_normalize( args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_mesa_descricao&#x27;</span> );
          arg_mesa_lotacao <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_mesa_lotacao&#x27;</span>;

          _mesa tweeks.mesa;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #888">-- Garantir que o numero de mesa seja unico</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * ) &gt; <span style="color: #C76A40">0</span>
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.mesa m
            <span style="color: #C76A40;
            font-weight: 800;">where</span> m.mesa_numero =  arg_mesa_numero
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;@mesa.numero.already-exist&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.mesa (
            mesa_colaborador_id,
            mesa_lotacao,
            mesa_numero,
            mesa_designacao
          ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
            arg_colaborador_id,
            arg_mesa_lotacao,
            arg_mesa_numero,
            arg_mesa_descricao
          ) <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _mesa;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;mesa&#x27;</span>, _mesa
          );

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_link {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks._get_link(arg_link_id <span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> link
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #888">-- Essa função serve para devolver a instancia de uma link</span>
        <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.link <span style="color: #C76A40;
            font-weight: 800;">where</span> link_id = arg_link_id;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_serie_available {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_serie_available(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
            <span style="color: #C76A40;
            font-weight: 800;">declare</span>
              <span style="color: #888">\/\**
                args := {
                  arg_espaco_auth:UUID
                  arg_colaborado_id:UUID
                }
               \*\/</span>
                arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
                arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
                ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
                _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
            <span style="color: #C76A40;
            font-weight: 800;">begin</span>

              _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

              <span style="color: #888">-- Obter o espaço superior que pode gerar numero de seire</span>
              <span style="color: #C76A40;
            font-weight: 800;">return query</span>
                <span style="color: #C76A40;
            font-weight: 800;">with</span> <span style="color: #C76A40;
            font-weight: 800;">recursive</span> __recursive_espaco <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                  <span style="color: #C76A40;
            font-weight: 800;">select</span> e.espaco_id <span style="color: #C76A40;
            font-weight: 800;">as</span> _espaco,
                       e.*,
                       ts.tserie_id, ts.tserie_desc, ts.tserie_code,
                       s.serie_id, s.serie_numero, s.serie_numatorizacao, s.serie_numcertificacao
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.espaco e
                       <span style="color: #C76A40;
            font-weight: 800;">full</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.tserie ts <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                       <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.serie s <span style="color: #C76A40;
            font-weight: 800;">on</span> e.espaco_id = s.serie_espaco_id
                        <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_tserie_id = ts.tserie_id
                        <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_estado = _const.maguita_serie_estado_ativo
                        <span style="color: #C76A40;
            font-weight: 800;">and</span> s._branch_uid = ___branch
                    <span style="color: #C76A40;
            font-weight: 800;">where</span> e.espaco_id = arg_espaco_auth
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> e._branch_uid = ___branch
                    
                    <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
                    <span style="color: #C76A40;
            font-weight: 800;">select</span> _re._espaco, e.*,
                           _re.tserie_id, _re.tserie_desc, _re.tserie_code,
                           s.serie_id, s.serie_numero, s.serie_numatorizacao, s.serie_numcertificacao
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> __recursive_espaco _re
                      <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> _re.espaco_espaco_id = e.espaco_id
                        <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _re.espaco_gerarfatura
                      <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.serie s <span style="color: #C76A40;
            font-weight: 800;">on</span> e.espaco_id = s.serie_espaco_id
                        <span style="color: #C76A40;
            font-weight: 800;">and</span> _re.tserie_id = s.serie_tserie_id
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_tserie_id = _re.tserie_id
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_estado = _const.maguita_serie_estado_ativo
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> s._branch_uid = ___branch
                    <span style="color: #C76A40;
            font-weight: 800;">where</span> e._branch_uid = ___branch
                ), __serie_espaco <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                  <span style="color: #C76A40;
            font-weight: 800;">select</span>
                        _re._espaco <span style="color: #C76A40;
            font-weight: 800;">as</span> espaco_id,
                        _re.espaco_id <span style="color: #C76A40;
            font-weight: 800;">as</span> espaco_serie,
                        _re.espaco_nivel,
                        _re.espaco_codigo,
                        _re.espaco_nome,
                        _re.tserie_id,
                        _re.tserie_desc,
                        _re.tserie_code,
                        _re.serie_id,
                        _re.serie_numcertificacao,
                        _re.serie_numatorizacao,
                        _re.serie_numero
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> __recursive_espaco  _re
                    <span style="color: #C76A40;
            font-weight: 800;">where</span> _re.serie_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
              ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _se )
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __serie_espaco _se
              ;
              
            <span style="color: #C76A40;
            font-weight: 800;">end</span>;
          $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_artigo_data {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_artigo_data(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              arg_espaco_auth: UUDI,
              arg_colaborador_id: UUID,
              artigos:[
                UUID, UUID, UUID
              ]
            }
           \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          artigos <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> e.text::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements_text( args-&gt;<span style="color: #4d99bf">&#x27;artigos&#x27;</span> ) e( <span style="color: #C76A40">text</span> ));
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span>
              __extras <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    d.dispoe_artigo_id,
                    array_agg( to_jsonb( d ) || jsonb_build_object( <span style="color: #4d99bf">&#x27;artigo_nome&#x27;</span>, art.artigo_nome) ) <span style="color: #C76A40;
            font-weight: 800;">as</span> extras
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.dispoe d
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> d.dispoe_artigo_item = art.artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> d.dispoe_artigo_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( artigos )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> d.dispoe_estado = _const.dispoe_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> d.dispoe_artigo_id
              ), __eans <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    e.ean_artigo_id,
                    array_agg( to_jsonb( e ) ) <span style="color: #C76A40;
            font-weight: 800;">as</span> eans
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.ean e
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> e.ean_artigo_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( artigos )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> e.ean_estado = _const.maguita_ean_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> e.ean_artigo_id
            ), __links <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  art.artigo_id,
                  array_agg( to_jsonb( l ) )  <span style="color: #C76A40;
            font-weight: 800;">as</span> links
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.link l
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span>  l.link_referencia @&gt; lib.sets_ref( art )
                <span style="color: #C76A40;
            font-weight: 800;">where</span> l.link_tlink_id = _const.maguita_tlink_preco
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( artigos )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_estado = _const.maguita_link_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> art.artigo_id
            ), __impostos <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  ip.imposto_artigo_id,
                  array_agg( to_jsonb( ip ) ) <span style="color: #C76A40;
            font-weight: 800;">as</span> impostos
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.imposto ip
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ip.imposto_artigo_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( artigos )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ip.imposto_estado = _const.maguita_imposto_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ip.imposto_artigo_id
            ), __artigos <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span> art.*, cla.*, to_jsonb( a ) <span style="color: #C76A40;
            font-weight: 800;">as</span> artigo_base
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo art
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.artigo a <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_artigo_id = a.artigo_id
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.classe cla <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_classe_id = cla.classe_id
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> art.artigo_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( artigos )
            ), __exports <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  e.extras,
                  ea.eans,
                  l.links,
                  ip.impostos,
                  a.*
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __artigos a
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> __extras e <span style="color: #C76A40;
            font-weight: 800;">on</span> a.artigo_id = e.dispoe_artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> __eans ea <span style="color: #C76A40;
            font-weight: 800;">on</span> a.artigo_id = ea.ean_artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> __links l <span style="color: #C76A40;
            font-weight: 800;">on</span> a.artigo_id = l.artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> __impostos ip <span style="color: #C76A40;
            font-weight: 800;">on</span> a.artigo_id = ip.imposto_artigo_id
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( exp )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __exports exp
            ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_classe_estado {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_classe_estado(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para ativar ou desativar o estado do um artigo
            args = {
              arg_colaborador_id: ID,
              arg_espaco_auth: ID,
              arg_classe_id: ID
            }
          \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
          arg_classe_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_classe_id&#x27;</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _classe tweeks.classe;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_classe_id = _const.classe_itemextra <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;Item extra não pode ser desativado&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _classe := tweeks._get_classe( arg_classe_id );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _classe.classe_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.classe
              <span style="color: #C76A40;
            font-weight: 800;">set</span>
                classe_estado = <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> classe_estado = _const.classe_estado_ativo <span style="color: #C76A40;
            font-weight: 800;">then</span>   _const.classe_estado_fechado
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> classe_estado = _const.classe_estado_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span> _const.classe_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> classe_estado
                <span style="color: #C76A40;
            font-weight: 800;">end</span>::<span style="color: #C76A40">int2</span>,
                classe_colaborador_atualizacao = arg_colaborador_id,
                classe_dataatualizacao = <span style="color: #397300">current_timestamp</span>
              <span style="color: #C76A40;
            font-weight: 800;">where</span> classe_id = arg_classe_id
              <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _classe
            ;

            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
              <span style="color: #4d99bf">&#x27;classe&#x27;</span>, _classe,
              <span style="color: #4d99bf">&#x27;classe_old&#x27;</span>, _classe,
              <span style="color: #4d99bf">&#x27;message&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">case</span>
                <span style="color: #C76A40;
            font-weight: 800;">when</span> _classe.classe_estado = _const.classe_estado_ativo   <span style="color: #C76A40;
            font-weight: 800;">then</span> format( <span style="color: #4d99bf">&#x27;O item &quot;%s&quot; foi ativado!&#x27;</span>,   _classe.classe_nome )
                <span style="color: #C76A40;
            font-weight: 800;">when</span> _classe.classe_estado =   _const.classe_estado_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span> format( <span style="color: #4d99bf">&#x27;O item &quot;%s&quot; foi desativo!&#x27;</span>,  _classe.classe_nome )
              <span style="color: #C76A40;
            font-weight: 800;">end</span>
            );

          <span style="color: #888">-- Se não for proprietario deslinkar apenas a classe ao espaço</span>
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> tweeks.funct_change_link_unlink(
              jsonb_build_object(
                <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth,
                <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
                <span style="color: #4d99bf">&#x27;arg_link_referencia&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">rule</span>.classe_referencia( arg_classe_id )
              )
            );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_conta_nota_credito {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_conta_nota_credito(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              conta_chave: CHAVE
              arg_colaborador_id: UID
              arg_espaco_auth: UID
              conta_id: UID,
              conta_data: DATE,
              conta_posto_id: UID
              conta_observacao
              itens: [
                { venda_id:ID },
                { venda_id:ID },
                { venda_id:ID }...
              ]
            }
           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_conta_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;conta_id&#x27;</span>;
          arg_branch_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          __branch <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.branch;
          _data <span style="color: #C76A40">record</span>;
          _vendas <span style="color: #C76A40">record</span>;
          _conta tweeks.conta;
          _conta_args tweeks.conta;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _conta_res lib.res;
          _conta_close_res lib.res;
          itens <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> (e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;venda_id&#x27;</span>)::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;itens&#x27;</span> ) e ( doc ) );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _conta_args := jsonb_populate_record( _conta_args, args );
          _conta_args.conta_posto_fecho := _conta_args.conta_posto_id;
          _conta := tweeks._get_conta( arg_conta_id );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta.conta_estado != _const.maguita_conta_estado_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span>  lib.res_false( <span style="color: #4d99bf">&#x27;Essa conta não se encontra fechada&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;


          <span style="color: #C76A40;
            font-weight: 800;">with</span> conta_origin <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                ct.*,
                ve.*,
                art.*,
                count( venc.venda_id ) &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_ncexists
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.venda ve <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_id = ve.venda_conta_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ve._branch_uid = arg_branch_uid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_estado = _const.maguita_venda_estado_fechado
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> ve.venda_artigo_id = art.artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> art._branch_uid = arg_branch_uid
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.conta ctnc <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_id = ctnc.conta_conta_docorigin
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ctnc.conta_estado = _const.maguita_conta_estado_fechado
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ctnc._branch_uid = arg_branch_uid
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.venda venc <span style="color: #C76A40;
            font-weight: 800;">on</span> ctnc.conta_id = ve.venda_conta_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> venc.venda_venda_docorign = ve.venda_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> venc.venda_estado = _const.maguita_venda_estado_fechado
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> venc._branch_uid = arg_branch_uid
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_id = arg_conta_id
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ct.conta_id,
                art.artigo_id,
                ve.venda_id
          ), notacareito_usar <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                count( * ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> (
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> ct.venda_ncexists
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.venda_id = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( itens )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.venda_venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                ) <span style="color: #C76A40;
            font-weight: 800;">as</span> notacredito_aplicartotal,

                array_agg( ct.venda_id ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> (
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> ct.venda_ncexists
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.venda_id = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( itens )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.venda_venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                ) <span style="color: #C76A40;
            font-weight: 800;">as</span> notacredito_aplicar,

                count( * ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> (
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.venda_id = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( itens )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.venda_venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                ) <span style="color: #C76A40;
            font-weight: 800;">as</span> notacredito_usartotal,
               array_agg(
                 jsonb_build_object(
                   <span style="color: #4d99bf">&#x27;artigo_id&#x27;</span>, ct.artigo_id,
                   <span style="color: #4d99bf">&#x27;artigo_codigo&#x27;</span>, ct.artigo_codigo,
                   <span style="color: #4d99bf">&#x27;artigo_nome&#x27;</span>, ct.artigo_nome,
                   <span style="color: #4d99bf">&#x27;venda_id&#x27;</span>, ct.venda_id,
                   <span style="color: #4d99bf">&#x27;venda_quantidade&#x27;</span>, ct.venda_quantidade,
                   <span style="color: #4d99bf">&#x27;venda_custounitario&#x27;</span>, ct.venda_custounitario
                 )
               ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> (
                 <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.venda_ncexists
                   <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.venda_id = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( itens )
                   <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.venda_venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
               ) <span style="color: #C76A40;
            font-weight: 800;">as</span> notacredito_exists
              <span style="color: #C76A40;
            font-weight: 800;">from</span> conta_origin ct
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
             <span style="color: #C76A40;
            font-weight: 800;">from</span> notacareito_usar
          ;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _data.notacredito_aplicartotal = <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Nenhum dos iten selecionado pode-se aplicar nota de credito sobre ele&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _data.notacredito_aplicartotal &lt; _data.notacredito_usartotal <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Alguns dos itens selecionados já têm notas de creditos aplicado sobre ele&#x27;</span>,
              jsonb_build_object(
                  <span style="color: #4d99bf">&#x27;notacredito_exists&#x27;</span>, _data.notacredito_exists
                )
            );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;


          <span style="color: #888">\/\*
            arg_vendas: [
                {
                  venda_id?: UID,
                  venda_artigo_id: UID,
                  venda_quantidade: QUANT,
                  venda_custounitario: COST
                  venda_custoquantidade: COST

                  + venda_editado
                  + venda_isencao
                  + venda_montante
                  + venda_montanteagregado
                  + venda_montantetotal
                  + venda_imposto
                  + venda_montantesemimposto
                  + venda_montantecomimposto
                  + venda_impostoadicionar
                  + venda_impostoretirar

                  + venda_descricao
                  + venda_lote
                  + venda_validade
                  + venda_metadata

                  arg_itens: [
                      venda_id: UID
                      venda_artigo_id: UID,
                      venda_quantidade: QUANT,
                      venda_custounitario: COST
                      venda_custoquantidade: COST
                      venda_descricao: DESCRICAO
                      venda_lote: LOTE
                      venda_validade: VALIDADE
                      venda_metadata: {... any extras data}
                    + venda_montantetotal
                  ]
           \*\/</span>
          <span style="color: #C76A40;
            font-weight: 800;">with</span> __iten <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                iten.venda_artigo_id,
                iten.venda_quantidade * <span style="color: #C76A40">-1</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_quantidade,
                iten.venda_custounitario,
                iten.venda_custoquantidade,
                iten.venda_descricao,
                iten.venda_lote,
                iten.venda_validade,
                iten.venda_metadata,
                iten.venda_taxas,
                iten.venda_montantetotal * <span style="color: #C76A40">-1</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_montantetotal,
                iten.venda_id <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_venda_docorign,
                iten.venda_venda_id <span style="color: #C76A40;
            font-weight: 800;">as</span> ___iten_venda_super
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.venda iten
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo at <span style="color: #C76A40;
            font-weight: 800;">on</span> iten.venda_artigo_id = at.artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> at._branch_uid = arg_branch_uid
              <span style="color: #C76A40;
            font-weight: 800;">where</span> iten.venda_venda_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _data.notacredito_aplicar )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> iten.venda_estado = _const.maguita_venda_estado_fechado
                <span style="color: #C76A40;
            font-weight: 800;">and</span> iten._branch_uid = arg_branch_uid
          ), __vendas <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                ve.venda_id <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_venda_docorign,
                ve.venda_artigo_id,
                ve.venda_quantidade * <span style="color: #C76A40">-1</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_quantidade,
                ve.venda_custounitario,
                ve.venda_custoquantidade,
                ve.venda_editado,
                ve.venda_isencao,
                ve.venda_montante * <span style="color: #C76A40">-1</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_montante,
                ve.venda_montanteagregado * <span style="color: #C76A40">-1</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_montanteagregado,
                ve.venda_montantetotal * <span style="color: #C76A40">-1</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_montantetotal,
                ve.venda_imposto * <span style="color: #C76A40">-1</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_imposto,
                ve.venda_montantesemimposto * <span style="color: #C76A40">-1</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_montantesemimposto,
                ve.venda_montantecomimposto * <span style="color: #C76A40">-1</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_montantecomimposto,
                ve.venda_impostoadicionar * <span style="color: #C76A40">-1</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_impostoadicionar,
                ve.venda_impostoretirar * <span style="color: #C76A40">-1</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_impostoretirar,
                ve.venda_descricao,
                ve.venda_lote,
                ve.venda_validade,
                ve.venda_metadata,
                ve.venda_taxas,
                coalesce( jsonb_agg( to_jsonb( iten ) ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> iten.venda_venda_docorign <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> ), jsonb_build_array()) <span style="color: #C76A40;
            font-weight: 800;">as</span> arg_itens
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.venda ve
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> __iten iten <span style="color: #C76A40;
            font-weight: 800;">on</span> ve.venda_id = iten.___iten_venda_super

              <span style="color: #C76A40;
            font-weight: 800;">where</span> ve.venda_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _data.notacredito_aplicar )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ve.venda_id
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
                jsonb_agg( to_jsonb( ve ) ) <span style="color: #C76A40;
            font-weight: 800;">as</span> arg_vendas
                <span style="color: #C76A40;
            font-weight: 800;">into</span> _vendas
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __vendas ve
          ;

          <span style="color: #888">\/\*
           -- obrigatorios
              arg_colaborador_id: ID,
              arg_espaco_auth: ID,

              conta_posto_id: ID,

              -- opcional
              conta_mesa: { numero:NUM, descricao:TEXT, lotacao:NUM }
              conta_id: ID?
              conta_extension: {} | { reserva_id: UID }
              conta_chave: CHAVE

              conta_currency_id: ID,
              conta_tpaga_id: ID,

              conta_cliente_id:UID
              conta_titular: CLIENTE-NOME
              conta_titularnif: CLIENTE-NIF
              conta_data: DATA,

              -- requerido
              arg_vendas
           \*\/</span>



          <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta.conta_cliente_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> _conta.conta_cliente_id = _const.maguita_cliente_final <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
              <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.cliente c
              <span style="color: #C76A40;
            font-weight: 800;">where</span> c.cliente_id = _const.maguita_cliente_finalnotacredito
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> __branch <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.branch <span style="color: #C76A40;
            font-weight: 800;">where</span> _branch_uid = arg_branch_uid;
              <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.cliente(
                  cliente_id,
                  cliente_colaborador_id,
                  cliente_colaborador_gerente,
                  cliente_espaco_auth,
                  cliente_titular,
                  _branch_uid,
                  cliente_code
              ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
                   _const.maguita_cliente_finalnotacredito,
                   _const.colaborador_system_data,
                   __branch.branch_main_user,
                   __branch.branch_main_workspace,
                   <span style="color: #4d99bf">&#x27;CONTA DE NOTA DE CREDITO&#x27;</span>,
                   __branch._branch_uid,
                   <span style="color: #4d99bf">&#x27;NC100010&#x27;</span>
               );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          _conta_args.conta_cliente_id := _conta.conta_cliente_id;
          _conta_args.conta_data := coalesce( _conta_args.conta_data, <span style="color: #397300">current_date</span> );
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta_args.conta_cliente_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> _conta_args.conta_cliente_id = _const.maguita_cliente_final <span style="color: #C76A40;
            font-weight: 800;">then</span>
              _conta_args.conta_cliente_id := _const.maguita_cliente_finalnotacredito;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          


          _conta_res := tweeks.funct_pos_reg_conta(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
              <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, _conta.conta_espaco_auth,
              <span style="color: #4d99bf">&#x27;conta_posto_id&#x27;</span>, _conta_args.conta_posto_id,
              <span style="color: #4d99bf">&#x27;conta_mesa&#x27;</span>, _conta_args.conta_mesa,
              <span style="color: #4d99bf">&#x27;conta_extension&#x27;</span>, coalesce( _conta_args.conta_extension, jsonb_build_object()),
              <span style="color: #4d99bf">&#x27;conta_chave&#x27;</span>, _conta_args.conta_chave,
              <span style="color: #4d99bf">&#x27;conta_currency_id&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">null</span>,
              <span style="color: #4d99bf">&#x27;conta_tpaga_id&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">null</span>,
              <span style="color: #4d99bf">&#x27;conta_cliente_id&#x27;</span>, _conta_args.conta_cliente_id,
              <span style="color: #4d99bf">&#x27;conta_titular&#x27;</span>, _conta.conta_titular,
              <span style="color: #4d99bf">&#x27;conta_titularnif&#x27;</span>, _conta.conta_titularnif,
              <span style="color: #4d99bf">&#x27;conta_data&#x27;</span>, _conta_args.conta_data,
              <span style="color: #4d99bf">&#x27;arg_vendas&#x27;</span>, _vendas.arg_vendas,
              <span style="color: #4d99bf">&#x27;conta_conta_docorigin&#x27;</span>, _conta.conta_id,
              <span style="color: #4d99bf">&#x27;conta_observacao&#x27;</span>, _conta_args.conta_observacao,
              <span style="color: #4d99bf">&#x27;conta_tserie_id&#x27;</span>, _const.maguita_tserie_notacredito,
              <span style="color: #4d99bf">&#x27;conta_espaco_notacredito&#x27;</span>, arg_espaco_auth
            )
          );
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _conta_res.result <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> _conta_res;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">\/\*
            Essa função fecha uma nova conta
              arg = {
                arg_espaco_auth: ID,
                arg_colaborador_id: ID,

                deposito:{
                  deposito_cliente_id
                  deposito_caixa_id
                  deposito_tpaga_id
                  deposito_currency_id
                  deposito_posto_id
                  deposito_montantemoeda
                  deposito_montantetroco
                  deposito_data
                  deposito_docref: DOCUMENTO-REF?
                  deposito_observacao: OBSERVACAO?
                }

                conta_id: ID,
                conta_extension: {} | { reserva_id: UID }
                conta_mesa: { numero:NUM, descricao:TEXT, lotacao:NUM },

                conta_posto_id: ID,
                conta_desconto

                conta_titular: NOME-CLIENTE
                conta_titularnif: VARCHAR,
                conta_data: DATA,
                conta_cliente_id,

                //Relativos a GUIA
                guia_documentoperacao: CODIGO,
                guia_dataopeacao: DATA,
                guia_observacao: DESCRICAO
                guia_metadata: { ... any extras data }

                custos:[{
                  custoguia_montante: MONTANTE,
                  custoguia_descricao: DESCRICAO PARA O CUSTO
                  custoguia_tcusto_id: 1 - DESPESA | 2 - RECEITA
                }]
           \*\/</span>
          
          _conta_close_res := tweeks.funct_pos_change_conta_fechar(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
              <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, _conta.conta_espaco_auth,
              <span style="color: #4d99bf">&#x27;arg_tserie_id&#x27;</span>, _const.maguita_tserie_notacredito,
              <span style="color: #4d99bf">&#x27;conta_conta_docorigin&#x27;</span>, _conta.conta_id,
              <span style="color: #4d99bf">&#x27;conta_id&#x27;</span>, _conta_res.data-&gt;&gt;<span style="color: #4d99bf">&#x27;conta_id&#x27;</span>,
              <span style="color: #4d99bf">&#x27;conta_extension&#x27;</span>, jsonb_build_object(),
              <span style="color: #4d99bf">&#x27;conta_posto_id&#x27;</span>,  _conta_args.conta_posto_id,
              <span style="color: #4d99bf">&#x27;conta_posto_fecho&#x27;</span>,  _conta_args.conta_posto_id,
              <span style="color: #4d99bf">&#x27;conta_desconto&#x27;</span>, ( _conta.conta_desconto ),
              <span style="color: #4d99bf">&#x27;conta_titular&#x27;</span>, _conta.conta_titular,
              <span style="color: #4d99bf">&#x27;conta_tserie_id&#x27;</span>, _const.maguita_tserie_notacredito,
              <span style="color: #4d99bf">&#x27;conta_titularnif&#x27;</span>, _conta.conta_titularnif,
              <span style="color: #4d99bf">&#x27;conta_data&#x27;</span>, coalesce( _conta_args.conta_data, now()::<span style="color: #C76A40">date</span>),
              <span style="color: #4d99bf">&#x27;conta_cliente_id&#x27;</span>, _conta_args.conta_cliente_id,
              <span style="color: #4d99bf">&#x27;guia_documentoperacao&#x27;</span>, format(<span style="color: #4d99bf">&#x27;NC-%s&#x27;</span>,  to_char( clock_timestamp(), <span style="color: #4d99bf">&#x27;YYYYMMDDHHMISS-US&#x27;</span>)),
              <span style="color: #4d99bf">&#x27;guia_observacao&#x27;</span>, <span style="color: #4d99bf">&#x27;Guia de devolução ao stock ao efeturar uma nota de credito&#x27;</span>,
              <span style="color: #4d99bf">&#x27;guia_metadata&#x27;</span>, coalesce( _conta_res.data, jsonb_build_object() ),
              <span style="color: #4d99bf">&#x27;custos&#x27;</span>, jsonb_build_array(),
              <span style="color: #4d99bf">&#x27;conta_chave&#x27;</span>, _conta_args.conta_chave,
              <span style="color: #4d99bf">&#x27;arg_group_id&#x27;</span>, _conta._tgrupo_id
            )
          );

          <span style="color: #C76A40;
            font-weight: 800;">return</span> _conta_close_res;

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
            <span style="color: #C76A40;
            font-weight: 800;">begin</span>
                <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
                <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_exception( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
            <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_report_compra_entrada {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_report_compra_entrada(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para processar o relatório de compras (entradas)
            arg_data_operacao :{ start: date, end :date },
            arg_data_registro :{ start: date, end :date },
            arg_espaco_id: ID,
            arg_classe_id: ID,
            arg_fornecedor_id: ID,
            arg_artigo_id: ID,
           \*\/</span>
          arg_data_operacao_start <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;<span style="color: #4d99bf">&#x27;arg_data_operacao&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;start&#x27;</span>;
          arg_data_operacao_end <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;<span style="color: #4d99bf">&#x27;arg_data_operacao&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;end&#x27;</span>;

          arg_data_registro_start <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;<span style="color: #4d99bf">&#x27;arg_data_registro&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;start&#x27;</span>;
          arg_data_registro_end <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;<span style="color: #4d99bf">&#x27;arg_data_registro&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;end&#x27;</span>;

          arg_espaco_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_id&#x27;</span>;
          arg_classe_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_classe_id&#x27;</span>;
          arg_fornecedor_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_fornecedor_id&#x27;</span>;
          arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span>;

          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> report <span style="color: #C76A40;
            font-weight: 800;">as</span> (

            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  art.*,
                  ent.*,
                  fo.*,
                  esp.*,
                  col.*
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.entrada ent
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> ent.entrada_artigo_id = art.artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.fornecedor fo <span style="color: #C76A40;
            font-weight: 800;">on</span> ent.entrada_fornecedor_id = fo.fornecedor_id
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco esp <span style="color: #C76A40;
            font-weight: 800;">on</span> ent.entrada_espaco_destino = esp.espaco_id
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.colaborador col <span style="color: #C76A40;
            font-weight: 800;">on</span> ent.entrada_colaborador_id = col.colaborador_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ent.entrada_data <span style="color: #C76A40;
            font-weight: 800;">between</span> coalesce( arg_data_operacao_start, ent.entrada_data ) <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( arg_data_operacao_end, ent.entrada_data )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ent.entrada_dataregistro <span style="color: #C76A40;
            font-weight: 800;">between</span> coalesce( arg_data_registro_start, ent.entrada_dataregistro ) <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( arg_data_registro_end, ent.entrada_dataregistro )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> esp.espaco_id = coalesce( arg_espaco_id, esp.espaco_id )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_classe_id = coalesce( arg_classe_id, art.artigo_classe_id )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> fo.fornecedor_id = coalesce( arg_fornecedor_id, fo.fornecedor_id )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_id = coalesce( arg_artigo_id, art.artigo_id )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ent.entrada_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
            )
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
              lib.jsonb_values(
                to_jsonb( r ),
                  <span style="color: #4d99bf">&#x27;artigo_id&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;artigo_codigo&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;artigo_nome&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;artigo_custo&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;artigo_stock&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;artigo_preparacao&#x27;</span>,

                  <span style="color: #4d99bf">&#x27;entrada_id&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;entrada_codigofatura&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;entrada_data&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;entrada_quantidade&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;entrada_montante&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;entrada_descricao&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;entrada_estado&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;entrada_dataregistro&#x27;</span>,

                  <span style="color: #4d99bf">&#x27;colaborador_nome&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;colaborador_apelido&#x27;</span>,

                  <span style="color: #4d99bf">&#x27;fornecedor_id&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;fornecedor_nif&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;fornecedor_nome&#x27;</span>,

                  <span style="color: #4d99bf">&#x27;espaco_nome&#x27;</span>
                )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> report r
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_reg_cliente {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_reg_cliente(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\**
              args := {
                arg_colaborador_id:UUID*
                arg_espaco_auth:UUID*

                cliente_id:UUID?
                cliente_estado:ESTADO?

                cliente_titular:NAME*
                cliente_tdocument_id:TDOC?
                cliente_nif: NIF?
                cliente_mail: MAIL?
                cliente_documento: DOC-NUMBER?

              }
             \*\/</span>
            arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
            arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
            _client tweeks.cliente;
            _data <span style="color: #C76A40">record</span>;
            ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
            _exists <span style="color: #C76A40">record</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            _client := jsonb_populate_record( _client, args );

            <span style="color: #C76A40;
            font-weight: 800;">with</span> __uniques <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  f.cliente_code <span style="color: #C76A40;
            font-weight: 800;">as</span> &quot;CODIGO&quot;,
                  f.cliente_mail <span style="color: #C76A40;
            font-weight: 800;">as</span> &quot;EMAIL&quot;,
                  f.cliente_nif <span style="color: #C76A40;
            font-weight: 800;">as</span> &quot;NIF&quot;,
                  format( <span style="color: #4d99bf">&#x27;%s-%s&#x27;</span>, f.cliente_tdocument_id, f.cliente_documento ) <span style="color: #C76A40;
            font-weight: 800;">as</span> &quot;DOCUMENTO&quot;,
                  jsonb_build_object(
                    <span style="color: #4d99bf">&#x27;CODIGO&#x27;</span>, _client.cliente_code,
                    <span style="color: #4d99bf">&#x27;NIF&#x27;</span>, _client.cliente_nif,
                    <span style="color: #4d99bf">&#x27;EMAIL&#x27;</span>, _client.cliente_mail,
                    <span style="color: #4d99bf">&#x27;DOCUMENTO&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">case</span>
                        <span style="color: #C76A40;
            font-weight: 800;">when</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> ( f.cliente_documento <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>, f.cliente_tdocument_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> ) <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                        <span style="color: #C76A40;
            font-weight: 800;">else</span> format( <span style="color: #4d99bf">&#x27;%s-%s&#x27;</span>, _client.cliente_tdocument_id, _client.cliente_documento )
                     <span style="color: #C76A40;
            font-weight: 800;">end</span>
                  ) <span style="color: #C76A40;
            font-weight: 800;">as</span> _math
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.cliente f
                <span style="color: #C76A40;
            font-weight: 800;">where</span> f._branch_uid = ___branch
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ( _client.cliente_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> _client.cliente_id != f.cliente_id )
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> lib.duplicates( jsonb_agg( _uf ), _uf._math , <span style="color: #C76A40;
            font-weight: 800;">true</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> dulicates  <span style="color: #C76A40;
            font-weight: 800;">into</span> _exists
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __uniques _uf
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> _uf._math
          ;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _exists.dulicates <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( format( <span style="color: #4d99bf">&#x27;(%s) estão duplicados!&#x27;</span>, _exists.dulicates ) );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _client
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.cliente c
              <span style="color: #C76A40;
            font-weight: 800;">where</span> c.cliente_id = _client.cliente_id
            ;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _client.cliente_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              _client.cliente_colaborador_id := arg_colaborador_id;
              _client.cliente_espaco_auth := arg_espaco_auth;
            <span style="color: #C76A40;
            font-weight: 800;">else</span>
              _client.cliente_colaborador_atualizacao := arg_colaborador_id;
              _client.cliente_dataatualizacao := <span style="color: #397300">current_timestamp</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
              <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets( _client, replacer := args );
              _client := _data.&quot;returning&quot;
            ;

            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true(jsonb_build_object(
              <span style="color: #4d99bf">&#x27;cliente&#x27;</span>, _client,
              <span style="color: #4d99bf">&#x27;opr&#x27;</span>, _data.operation
            ));
          <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface load_clusters {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.load_clusters(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span>
            __cluster <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  c.cluster_uid,
                  c.cluster_identifier,
                  c.cluster_type,
                  c.cluster_code,
                  c.cluster_path,
                  c.cluster_domain,
                  c.cluster_licenselife,
                  c.cluster_license,
                  <span style="color: #C76A40;
            font-weight: 800;">case</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> c.cluster_name <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> c.cluster_type = _const.cluster_tcluster_local <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #4d99bf">&#x27;Local server&#x27;</span>
                    <span style="color: #C76A40;
            font-weight: 800;">else</span> c.cluster_name
                  <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> cluster_name,
                  c.cluster_port,
                  c.cluster_api,
                  c.cluster_version,
                  c.cluster_grants,
                  c.cluster_configs,
                  c.cluster_sequence,
                  c.cluster_namespace,
                  tp.*
                <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.tperiod tp <span style="color: #C76A40;
            font-weight: 800;">on</span> c.cluster_tperiod_id = tp.tperiod_id
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _c )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __cluster _c
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> <span style="color: #C76A40;
            font-weight: 800;">case</span>
                <span style="color: #C76A40;
            font-weight: 800;">when</span> _c.cluster_type = _const.cluster_tcluster_local <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">1</span>
                <span style="color: #C76A40;
            font-weight: 800;">when</span> _c.cluster_type = _const.cluster_tcluster_master <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">2</span>
                <span style="color: #C76A40;
            font-weight: 800;">when</span> _c.cluster_type = _const.cluster_tcluster_child <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">3</span>
                <span style="color: #C76A40;
            font-weight: 800;">when</span> _c.cluster_type = _const.cluster_tcluster_remote <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">4</span>
              <span style="color: #C76A40;
            font-weight: 800;">end</span>,
              _c.cluster_name
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_sets_unit {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_sets_unit(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$ 
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**doc
            Sets unit
            args := {
                _espaco_auth
                _user_id
                unit_id? ,
                unit_code,
                unit_name,
                unit_state?
            }
          doc\*\/</span>
          _espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_espaco_auth&#x27;</span>;
          _user_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_user_id&#x27;</span>;
          _branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( _user_id, _espaco_auth );
          _args tweeks.unit;
          _unit tweeks.unit;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          
          _args := jsonb_populate_record( _args, args );
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _args.unit_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> 
            _args.unit_user_id := _user_id;
            _args.unit_espaco_auth := _espaco_auth;
            _args._branch_uid := _branch;
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            _args.unit_update := clock_timestamp();
            _args.unit_user_update := _user_id;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #888">-- Garantir que o codigo da unidade não se repita</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _args.unit_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.unit u 
              <span style="color: #C76A40;
            font-weight: 800;">where</span> u._branch_uid = _args._branch_uid
                <span style="color: #C76A40;
            font-weight: 800;">and</span> lower( trim( u.unit_code ) )  = lower( trim( _args.unit_code ) )
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Já existe uma unidade com o código selecionado!&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot;).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _unit
            <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets( _args )
          ;
          
          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true( jsonb_build_object(
            <span style="color: #4d99bf">&#x27;unit&#x27;</span>, _unit
          ));
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_mesa_estado {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_mesa_estado(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função atualiza o estado da mesa
            args = {
              arg_colaborador_id: ID,
              arg_mesa_id: ID,
            }
           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_mesa_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_mesa_id&#x27;</span>;

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _mesa tweeks.mesa;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _mesa := tweeks._get_mesa( arg_mesa_id );
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _mesa.mesa_estado  <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.mesa_estado_disponivel, _const.mesa_estado_desativado ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;@tweeks.mesa.estado.no-accept&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.mesa
            <span style="color: #C76A40;
            font-weight: 800;">set</span>
              mesa_estado = lib.swith( _mesa.mesa_estado, _const.mesa_estado_disponivel, _const.mesa_estado_desativado ),
              mesa_dataatualizacao = <span style="color: #397300">current_timestamp</span>,
              mesa_colaborador_atualizacao = arg_colaborador_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span> mesa_id = arg_mesa_id
            <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _mesa
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
              <span style="color: #4d99bf">&#x27;mesa&#x27;</span>, _mesa
            );

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __check_stock_on_venda {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__check_stock_on_venda(_espaco_auth <span style="color: #C76A40">uuid</span>, _vendas <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(stocks <span style="color: #C76A40">boolean</span>, message <span style="color: #C76A40">text</span>, items <span style="color: #C76A40">text</span>, counts <span style="color: #C76A40">text</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _data <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #888">-- Garrantir que tenha o stock disponivel para os artigos</span>
          <span style="color: #C76A40;
            font-weight: 800;">with</span> <span style="color: #C76A40;
            font-weight: 800;">recursive</span> __venda <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
              ( e.document-&gt;&gt;<span style="color: #4d99bf">&#x27;venda_artigo_id&#x27;</span> )::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_artigo_id,
              ( e.document-&gt;&gt;<span style="color: #4d99bf">&#x27;venda_quantidade&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_quantidade,
              ( e.document-&gt;&gt;<span style="color: #4d99bf">&#x27;venda_custounitario&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_custounitario,
              ( e.document-&gt;&gt;<span style="color: #4d99bf">&#x27;venda_custoquantidade&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_custoquantidade,
              ( e.document-&gt;<span style="color: #4d99bf">&#x27;arg_itens&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> itens
            <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( _vendas ) e( document )
            <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                 ( e.document-&gt;&gt;<span style="color: #4d99bf">&#x27;venda_artigo_id&#x27;</span> )::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_artigo_id,
                 ( e.document-&gt;&gt;<span style="color: #4d99bf">&#x27;venda_quantidade&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_quantidade,
                 ( e.document-&gt;&gt;<span style="color: #4d99bf">&#x27;venda_custounitario&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_custounitario,
                 ( e.document-&gt;&gt;<span style="color: #4d99bf">&#x27;venda_custoquantidade&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_custoquantidade,
                 ( <span style="color: #C76A40;
            font-weight: 800;">null</span> )::<span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> itens
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __venda v
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> jsonb_array_elements( v.itens ) e( document ) <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                <span style="color: #C76A40;
            font-weight: 800;">where</span> jsonb_array_length( coalesce( v.itens, jsonb_build_array() ) ) &gt; <span style="color: #C76A40">0</span>
          ), __venda_group <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  v.venda_artigo_id,
                  sum( v.venda_quantidade ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_quantidade
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __venda v
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> v.venda_artigo_id
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
              count( art.artigo_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> items_count,
              string_agg( art.artigo_nome, <span style="color: #4d99bf">&#x27;, &#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> items
              <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
            <span style="color: #C76A40;
            font-weight: 800;">from</span> __venda_group vds
               <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span>  vds.venda_artigo_id = art.artigo_id
               <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks._get_stock( art.artigo_id, _espaco_auth ) s <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">not</span>  art.artigo_stocknegativo
              <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> tweeks.__artigo_has_stock( art.artigo_id, _espaco_auth, vds.venda_quantidade )
          ;
          __check_stock_on_venda.stocks := _data.items_count = <span style="color: #C76A40">0</span>;
          __check_stock_on_venda.counts := _data.items_count;
          __check_stock_on_venda.items := _data.items;
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _data.items_count &gt; <span style="color: #C76A40">1</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            __check_stock_on_venda.message := format( <span style="color: #4d99bf">&#x27;Os stock dos produtos (%s) não cobrem a venda para essa conta&#x27;</span>, _data.items );
          elseif _data.items_count = <span style="color: #C76A40">1</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            __check_stock_on_venda.message := format( <span style="color: #4d99bf">&#x27;Os stock de %s não cobre a venda para essa conta&#x27;</span>, _data.items );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">return next</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_mesa_livre {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_mesa_livre(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para devolver as mesas disponiveis
          \*\/</span>
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> lib.jsonb_values( m,
                <span style="color: #4d99bf">&#x27;mesa_id&#x27;</span>,
                <span style="color: #4d99bf">&#x27;mesa_numero&#x27;</span>,
                <span style="color: #4d99bf">&#x27;mesa_designacao&#x27;</span>,
                <span style="color: #4d99bf">&#x27;mesa_lotacao&#x27;</span>,
                <span style="color: #4d99bf">&#x27;mesa_estado&#x27;</span>,
                <span style="color: #4d99bf">&#x27;mesa_dataregistro&#x27;</span>
              )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.mesa m
              <span style="color: #C76A40;
            font-weight: 800;">where</span> m.mesa_estado = _const.mesa_estado_disponivel
            ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_conta_imprimir {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_conta_imprimir(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Alterar o estado da conta para imprensa
            args := {
              arg_espaco_auth: ID
              arg_colaborador_id: ID,
              arg_conta_id: ID,
            }
          \*\/</span>

          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>  <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_conta_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_conta_id&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;

          _conta tweeks.conta;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _conta := tweeks._get_conta( arg_conta_id );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta.conta_imprensa <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span>  <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
              <span style="color: #4d99bf">&#x27;conta&#x27;</span>, _conta
            );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.conta
            <span style="color: #C76A40;
            font-weight: 800;">set</span> conta_imprensa = conta_imprensa +<span style="color: #C76A40">1</span>,
                conta_colaborador_atualizacao = arg_colaborador_id,
                conta_dataatualizacao = <span style="color: #397300">current_timestamp</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> conta_id = arg_conta_id
            <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _conta
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;conta&#x27;</span>, _conta
          );

        <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_fornecedor_simple {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_fornecedor_simple(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(fornecedor_id <span style="color: #C76A40">uuid</span>, fornecedor_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para listar todos os fornecedores ativaos (lista para as selects do form)
            filter := {
              arg_espaco_auth: ID
            }
            \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[]<span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                fo.fornecedor_id,
                fo.fornecedor_nome
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.fornecedor fo
              <span style="color: #C76A40;
            font-weight: 800;">where</span> fo.fornecedor_estado = _const.fornecedor_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> fo.fornecedor_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> fo.fornecedor_nome
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_espaco_estado {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_espaco_estado(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para ativar ou desativar o estado do um artigo
            args = {
              arg_colaborador_id: ID,
              arg_espaco_id: ID
            }
          \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_id&#x27;</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _espaco tweeks.espaco;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _espaco := tweeks._get_espaco( arg_espaco_id );

          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.espaco
            <span style="color: #C76A40;
            font-weight: 800;">set</span>
              espaco_estado = lib.swith( espaco_estado, _const.espaco_estado_ativo, _const.espaco_estado_fechado  ),
              espaco_colaborador_atualizaco = arg_colaborador_id,
              espaco_dataatualizacao = <span style="color: #397300">current_timestamp</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> espaco_id = arg_espaco_id
            <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _espaco
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;espaco&#x27;</span>, _espaco,
            <span style="color: #4d99bf">&#x27;text&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">case</span>
              <span style="color: #C76A40;
            font-weight: 800;">when</span> _espaco.espaco_estado = _const.espaco_estado_ativo   <span style="color: #C76A40;
            font-weight: 800;">then</span> format( <span style="color: #4d99bf">&#x27;O espaco &quot;%s&quot; foi ativado!&#x27;</span>, _espaco.espaco_nome )
              <span style="color: #C76A40;
            font-weight: 800;">when</span> _espaco.espaco_estado = _const.espaco_estado_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span> format( <span style="color: #4d99bf">&#x27;O espaco &quot;%s&quot; foi desativo!&#x27;</span>, _espaco.espaco_nome )
            <span style="color: #C76A40;
            font-weight: 800;">end</span>
          );

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_item {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks._get_item(arg_artigo_item <span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> artigo
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #888">-- Essa função devolve uma instancia da item do artigo</span>
        <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo itt <span style="color: #C76A40;
            font-weight: 800;">where</span> itt.artigo_id = arg_artigo_item
          <span style="color: #C76A40;
            font-weight: 800;">and</span> itt.artigo_classe_id = lib.to_uuid( <span style="color: #C76A40">1</span> ) ; <span style="color: #888">-- classe dos items</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_load_artigo_search {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_load_artigo_search(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              search_text:TXT,
              arg_espaco_auth
            }
           \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          _search_text <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;search_text&#x27;</span>;
          _search_text_like <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          ___branch <span style="color: #C76A40">uuid</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          ___branch := tweeks.__branch_uid( <span style="color: #C76A40;
            font-weight: 800;">null</span>, arg_espaco_auth );
          
          _search_text := lib.str_normalize( lower( <span style="color: #397300">public</span>.unaccent( _search_text ) ) );
          _search_text_like := format( <span style="color: #4d99bf">&#x27;%s%s%s&#x27;</span>, <span style="color: #4d99bf">&#x27;%&#x27;</span>, _search_text, <span style="color: #4d99bf">&#x27;%&#x27;</span> );

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span>
            __ean <span style="color: #C76A40;
            font-weight: 800;">as</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> e.ean_artigo_id, array_agg( e.ean_code ) <span style="color: #C76A40;
            font-weight: 800;">as</span> ean_code <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.ean e <span style="color: #C76A40;
            font-weight: 800;">where</span> e.ean_estado = _const.maguita_ean_estado_ativo <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> e.ean_artigo_id ),
            __artigo <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                c.classe_id,
                c.classe_nome,
                u.unit_id,
                u.unit_code,
                u.unit_name,
                art.artigo_id,
                art.artigo_classe_id,
                art.artigo_nome,
                art.artigo_codigo,
                art.artigo_stocknegativo,
                art.artigo_estado,
                s.stock_quantidade,
                l.link_metadata,
                e.ean_code,
                count( di.dispoe_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> artigos_extras
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo art
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.classe c <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_classe_id = c.classe_id
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.link l <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_id =  ( l.link_referencia-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_id&#x27;</span> )::<span style="color: #C76A40">uuid</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_estado = _const.maguita_link_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_tlink_id = _const.maguita_tlink_preco
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_espaco_destino = arg_espaco_auth
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.stock s <span style="color: #C76A40;
            font-weight: 800;">on</span> s.artigo_id = art.artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> s.espaco_id = arg_espaco_auth
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> s._branch_uid = ___branch
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.dispoe di <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_id = di.dispoe_artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> di.dispoe_estado = _const.dispoe_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> __ean e <span style="color: #C76A40;
            font-weight: 800;">on</span> e.ean_artigo_id = art.artigo_id
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.unit u <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_unit_id = u.unit_id

            <span style="color: #C76A40;
            font-weight: 800;">where</span> art._branch_uid = ___branch
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> art.artigo_id,
                c.classe_id,
                
                u.unit_id,
                s.stock_quantidade,
                l.link_metadata,
                art.artigo_stocknegativo,
                art.artigo_nome,
                e.ean_code
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> s.stock_quantidade &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> art.artigo_stocknegativo <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">1</span>
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">2</span>
                <span style="color: #C76A40;
            font-weight: 800;">end</span>,
                art.artigo_nome
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( a )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __artigo a
              <span style="color: #C76A40;
            font-weight: 800;">where</span>
                lower( <span style="color: #397300">public</span>.unaccent( a.artigo_nome ) )  <span style="color: #C76A40;
            font-weight: 800;">like</span> _search_text_like
                  <span style="color: #C76A40;
            font-weight: 800;">or</span> lower( <span style="color: #397300">public</span>.unaccent( a.artigo_codigo ) )  <span style="color: #C76A40;
            font-weight: 800;">like</span> _search_text_like
                  <span style="color: #C76A40;
            font-weight: 800;">or</span>  _search_text = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( a.ean_code )
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>

        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_unit {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_unit(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\**doc
              Carregar os documentos 
              args := {
                _espaco_auth
                _user_id
            }
            doc\*\/</span>
            _espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_espaco_auth&#x27;</span>;
            _user_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_user_id&#x27;</span>;
            _branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( _user_id, _espaco_auth );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">perform</span> tweeks.__sets_defaults_units( _branch );
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> _unit <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.unit u
                <span style="color: #C76A40;
            font-weight: 800;">where</span> u._branch_uid = _branch
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _u ) <span style="color: #C76A40;
            font-weight: 800;">from</span> _unit _u;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_fornecedor {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_fornecedor(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para registar um novo fornecedor no sistema
            args := {
              arg_espaco_auth: ID
              arg_colaborador_id: ID,
              arg_fornecedor_nif: ID,
              arg_fornecedor_nome: NOME,
              arg_fornecedor_email: EMAIL,
              arg_fornecedor_contacto: CONTACTO,
              arg_fornecedor_endereco: ENDERECO
            }
          \*\/</span>

          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_fornecedor_nif <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lib.str_normalize( lib.str_nospace( args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_fornecedor_nif&#x27;</span>) );
          arg_fornecedor_email <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lib.str_nospace( lower( args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_fornecedor_email&#x27;</span> ) );
          arg_fornecedor_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span>  lib.str_normalize( args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_fornecedor_nome&#x27;</span> );
          arg_fornecedor_contacto <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lib.str_normalize( lib.str_nospace( args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_fornecedor_contacto&#x27;</span> ) );
          arg_fornecedor_endereco <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lib.str_nospace( args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_fornecedor_endereco&#x27;</span> );

          _fornecedor tweeks.fornecedor;
          _branch <span style="color: #C76A40">uuid</span>  <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #888">-- Garantir que tanto o email quanto o nif seja unico</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span>(
            <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * ) &gt; <span style="color: #C76A40">0</span>
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.fornecedor fo
              <span style="color: #C76A40;
            font-weight: 800;">where</span> fo.fornecedor_nif = arg_fornecedor_nif
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>? <span style="color: #4d99bf">&#x27;NIF já existe!&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span>(
            <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * ) &gt; <span style="color: #C76A40">0</span>
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.fornecedor fo
              <span style="color: #C76A40;
            font-weight: 800;">where</span> fo.fornecedor_email = arg_fornecedor_email
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>? <span style="color: #4d99bf">&#x27;Email já existe!&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          _fornecedor.fornecedor_code := tweeks.__generate_fornecedor_code( _branch );

          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.fornecedor (
            fornecedor_colaborador_id,
            fornecedor_espaco_auth,
            fornecedor_nif,
            fornecedor_nome,
            fornecedor_email,
            fornecedor_contacto,
            fornecedor_endereco,
            fornecedor_code
          ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
            arg_colaborador_id,
            arg_espaco_auth,
            arg_fornecedor_nif,
            arg_fornecedor_nome,
            arg_fornecedor_email,
            arg_fornecedor_contacto,
            arg_fornecedor_endereco,
            _fornecedor.fornecedor_code
          ) <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _fornecedor;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;fornecedor&#x27;</span>, _fornecedor
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_conta_docs_financa {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_conta_docs_financa(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              conta_chave: CHAVE
              arg_colaborador_id: UID
              arg_espaco_auth: UID
              conta_id: UID,
              conta_data: DATE,
              conta_posto_id: UID
              conta_observacao
              conta_docorigin
              conta_datedocorigin
              _serie_id:UID
              _tserie_id: TSERIE_ID
              
              itens: [
                { venda_id?:ID, venda_quantidade?: NUMBER, venda_codigoimposto?:CODE, ... },
                { venda_id?:ID, venda_quantidade?: NUMBER, venda_codigoimposto?:CODE, ...},
                { venda_id?:ID, venda_quantidade?: NUMBER, venda_codigoimposto?:CODE, ... }...
              ]
            }
           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_conta_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;conta_id&#x27;</span>;
          __conta_docorigin <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;conta_docorigin&#x27;</span>;
          arg_branch_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          __branch <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.branch;
          _data <span style="color: #C76A40">record</span>;
          _vendas <span style="color: #C76A40">record</span>;
          _conta tweeks.conta;
          _conta_args tweeks.conta;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _conta_res lib.res;
          _conta_close_res lib.res;
          __iten_venda <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;<span style="color: #4d99bf">&#x27;itens&#x27;</span>;
          __signal <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>;
          
          __itens <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>(
            <span style="color: #C76A40;
            font-weight: 800;">select</span> (e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;venda_id&#x27;</span>)::<span style="color: #C76A40">uuid</span> 
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;itens&#x27;</span> ) e ( doc ) 
        <span style="color: #888">--       where e.doc-&gt;&gt;&#x27;venda_id&#x27; is not null and e.doc-&gt;&#x27;venda_id&#x27; != null</span>
          );
          _serie_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_serie_id&#x27;</span>;
          _tserie_id <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_tserie_id&#x27;</span>;
          _check <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _conta_args := jsonb_populate_record( _conta_args, args );
          _conta_args.conta_posto_fecho := _conta_args.conta_posto_id;
          _conta := tweeks._get_conta( arg_conta_id );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta.conta_estado != _const.maguita_conta_estado_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span>  lib.res_false( <span style="color: #4d99bf">&#x27;Essa conta não se encontra fechada&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _tserie_id = _const.maguita_tserie_notacredito <span style="color: #C76A40;
            font-weight: 800;">then</span> __signal := <span style="color: #C76A40">-1</span>; 
          <span style="color: #C76A40;
            font-weight: 800;">else</span> __signal := <span style="color: #C76A40">1</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> _conta.conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> 
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Não foi encontrado nenhuma conta interna com essa ID!&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_numerofatura = __conta_docorigin
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( format( <span style="color: #4d99bf">&#x27;Existe um documento interno com a mesma identificação do documento extreno %I&#x27;</span>, __conta_docorigin  ) );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;itens&#x27;</span> ) e ( doc )
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::tweeks.venda, e.doc ) eve <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.venda ve <span style="color: #C76A40;
            font-weight: 800;">on</span> eve.venda_id = ve.venda_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_conta_id = arg_conta_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ve.venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Não pode incluir novos itens a um documento interno!&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;itens&#x27;</span> ) e ( doc )
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::tweeks.venda, e.doc ) eve <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.venda ve <span style="color: #C76A40;
            font-weight: 800;">on</span> eve.venda_id = ve.venda_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_conta_id = arg_conta_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ve.venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Não pode vincular itens de documentos interno na anulação de um documento externo!&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">with</span> conta_origin <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                ct.*,
                ve.*,
                art.*,
                count( venc.venda_id ) &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_ncexists
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.venda ve <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_id = ve.venda_conta_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ve._branch_uid = arg_branch_uid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_estado = _const.maguita_venda_estado_fechado
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> ve.venda_artigo_id = art.artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> art._branch_uid = arg_branch_uid
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.conta ctnc <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_id = ctnc.conta_conta_docorigin
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ctnc.conta_estado = _const.maguita_conta_estado_fechado
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ctnc._branch_uid = arg_branch_uid
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.venda venc <span style="color: #C76A40;
            font-weight: 800;">on</span> ctnc.conta_id = ve.venda_conta_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> venc.venda_venda_docorign = ve.venda_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> venc.venda_estado = _const.maguita_venda_estado_fechado
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> venc._branch_uid = arg_branch_uid
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_id = arg_conta_id
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ct.conta_id,
                art.artigo_id,
                ve.venda_id
          ), notacareito_usar <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                count( ct.venda_id ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> (
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> ct.venda_ncexists
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.venda_id = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( __itens )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.venda_venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                ) <span style="color: #C76A40;
            font-weight: 800;">as</span> notacredito_aplicartotal,

                array_agg( ct.venda_id ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> (
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> ct.venda_ncexists
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.venda_id = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( __itens )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.venda_venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                ) <span style="color: #C76A40;
            font-weight: 800;">as</span> notacredito_aplicar,

                count( * ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> (
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.venda_id = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( __itens )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.venda_venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                ) <span style="color: #C76A40;
            font-weight: 800;">as</span> notacredito_usartotal,
               array_agg(
                 jsonb_build_object(
                   <span style="color: #4d99bf">&#x27;artigo_id&#x27;</span>, ct.artigo_id,
                   <span style="color: #4d99bf">&#x27;artigo_codigo&#x27;</span>, ct.artigo_codigo,
                   <span style="color: #4d99bf">&#x27;artigo_nome&#x27;</span>, ct.artigo_nome,
                   <span style="color: #4d99bf">&#x27;venda_id&#x27;</span>, ct.venda_id,
                   <span style="color: #4d99bf">&#x27;venda_quantidade&#x27;</span>, ct.venda_quantidade,
                   <span style="color: #4d99bf">&#x27;venda_custounitario&#x27;</span>, ct.venda_custounitario
                 )
               ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> (
                 <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.venda_ncexists
                   <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.venda_id = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( __itens )
                   <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.venda_venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
               ) <span style="color: #C76A40;
            font-weight: 800;">as</span> notacredito_exists
              <span style="color: #C76A40;
            font-weight: 800;">from</span> conta_origin ct
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
             <span style="color: #C76A40;
            font-weight: 800;">from</span> notacareito_usar
          ;
          
          
        <span style="color: #888">--   if _data.notacredito_aplicartotal = 0 then</span>
        <span style="color: #888">--     return lib.res_false( &#x27;Nenhum dos iten selecionado pode-se aplicar nota de credito sobre ele&#x27; );</span>
        <span style="color: #888">--   end if;</span>
        <span style="color: #888">-- </span>
        <span style="color: #888">--   if _data.notacredito_aplicartotal &lt; _data.notacredito_usartotal then</span>
        <span style="color: #888">--     return lib.res_false( &#x27;Alguns dos itens selecionados já têm notas de creditos aplicado sobre ele&#x27;,</span>
        <span style="color: #888">--       jsonb_build_object(</span>
        <span style="color: #888">--           &#x27;notacredito_exists&#x27;, _data.notacredito_exists</span>
        <span style="color: #888">--         )</span>
        <span style="color: #888">--     );</span>
        <span style="color: #888">--   end if;</span>


          <span style="color: #888">\/\*
            arg_vendas: [
                {
                  venda_id?: UID,
                  venda_artigo_id: UID,
                  venda_quantidade: QUANT,
                  venda_custounitario: COST
                  venda_custoquantidade: COST

                  + venda_editado
                  + venda_isencao
                  + venda_montante
                  + venda_montanteagregado
                  + venda_montantetotal
                  + venda_imposto
                  + venda_montantesemimposto
                  + venda_montantecomimposto
                  + venda_impostoadicionar
                  + venda_impostoretirar

                  + venda_descricao
                  + venda_lote
                  + venda_validade
                  + venda_metadata
                  + venda_codigoimposto

                  arg_itens: [
                      venda_id: UID
                      venda_artigo_id: UID,
                      venda_quantidade: QUANT,
                      venda_custounitario: COST
                      venda_custoquantidade: COST
                      venda_descricao: DESCRICAO
                      venda_lote: LOTE
                      venda_validade: VALIDADE
                      venda_metadata: {... any extras data}
                    + venda_montantetotal
                  ]
           \*\/</span>
          <span style="color: #C76A40;
            font-weight: 800;">with</span> __item_doc <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( __iten_venda ) ed( doc )
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::tweeks.venda, ed.doc ) <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
          ), __vendas_existis <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> 
                ve.*,
                abs( ve.venda_quantidade ) <span style="color: #C76A40;
            font-weight: 800;">as</span> __venda_quantidade,
                ( abs( ve.venda_montantecomimposto ) - abs( ve.venda_montantesemimposto ) ) / abs( ve.venda_quantidade ) <span style="color: #C76A40;
            font-weight: 800;">as</span> __venda_diferencaimposto,
                abs( ve.venda_montantecomimposto ) / abs( ve.venda_quantidade ) <span style="color: #C76A40;
            font-weight: 800;">as</span> __venda_montantecomimposto,
                abs( ve.venda_montantesemimposto ) / abs( ve.venda_quantidade ) <span style="color: #C76A40;
            font-weight: 800;">as</span> __venda_montantesemimposto,
                abs( ve.venda_montanteagregado ) / abs( ve.venda_quantidade ) <span style="color: #C76A40;
            font-weight: 800;">as</span> __venda_montanteagregado,
                abs( ve.venda_montantetotal ) / abs( ve.venda_quantidade ) <span style="color: #C76A40;
            font-weight: 800;">as</span> __venda_montantetotal,
                abs( ve.venda_imposto ) / abs( ve.venda_quantidade ) <span style="color: #C76A40;
            font-weight: 800;">as</span> __venda_imposto,
                abs( ve.venda_impostoadicionar ) / abs( ve.venda_quantidade ) <span style="color: #C76A40;
            font-weight: 800;">as</span> __venda_impostoadicionar,
                abs( ve.venda_impostoretirar ) / abs( ve.venda_quantidade ) <span style="color: #C76A40;
            font-weight: 800;">as</span> __venda_impostoretirar,
                abs( ve.venda_montante ) / abs( ve.venda_quantidade ) <span style="color: #C76A40;
            font-weight: 800;">as</span> __venda_montante
            
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.venda ve 
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ve.venda_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _data.notacredito_aplicar ) <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
          ), __vendas <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ve.venda_id
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_venda_docorign,
                <span style="color: #C76A40;
            font-weight: 800;">case</span> 
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ve.venda_artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">else</span>  ed.venda_artigo_id
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_artigo_id,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ed.venda_quantidade * __signal
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> coalesce( ed.venda_quantidade, ve.venda_quantidade ) * __signal
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_quantidade,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ed.venda_custounitario
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> ve.venda_custounitario
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_custounitario,
                <span style="color: #C76A40;
            font-weight: 800;">case</span> 
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ed.venda_custoquantidade
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> ve.venda_custoquantidade
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_custoquantidade,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ed.venda_editado
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> ve.venda_editado
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_editado,
                <span style="color: #C76A40;
            font-weight: 800;">case</span> 
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ed.venda_isencao
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> ve.venda_isencao
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_isencao,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ed.venda_taxas
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> ve.venda_taxas
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_taxas,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ed.venda_validade
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> ve.venda_validade
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_validade,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ed.venda_lote
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> ve.venda_lote
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_lote,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ed.venda_montante * __signal
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> ve.__venda_montante * coalesce( ed.venda_quantidade, ve.__venda_quantidade ) * __signal
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_montante,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ed.venda_montanteagregado * __signal
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> ve.__venda_montanteagregado * coalesce( ed.venda_quantidade, ve.__venda_quantidade ) * __signal
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_montanteagregado,
                <span style="color: #C76A40;
            font-weight: 800;">case</span> 
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ed.venda_montantetotal * __signal
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> ve.__venda_montantetotal * coalesce( ed.venda_quantidade, ve.__venda_quantidade ) * __signal
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_montantetotal,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ed.venda_imposto * __signal
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> ve.__venda_imposto * coalesce( ed.venda_quantidade, ve.__venda_quantidade ) * __signal
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_imposto,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ed.venda_montantesemimposto * __signal
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> ve.__venda_montantesemimposto * coalesce( ed.venda_quantidade, ve.__venda_quantidade ) * __signal
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_montantesemimposto,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ed.venda_montantecomimposto * __signal
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> ve.__venda_montantecomimposto * coalesce( ed.venda_quantidade, ve.__venda_quantidade ) * __signal
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_montantecomimposto,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ed.venda_impostoadicionar * __signal
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> ve.__venda_impostoadicionar * coalesce( ed.venda_quantidade, ve.venda_quantidade ) * __signal 
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_impostoadicionar,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ed.venda_impostoretirar * __signal
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> ve.__venda_impostoretirar * coalesce( ed.venda_quantidade, ve.venda_quantidade ) * __signal 
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_impostoretirar,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ed.venda_descricao
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> coalesce( ed.venda_descricao, ve.venda_descricao )
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_descricao,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ed.venda_metadata
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> coalesce( ed.venda_metadata, ve.venda_metadata )
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_metadata,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> ed.venda_codigoimposto
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> coalesce( ed.venda_codigoimposto, ve.venda_codigoimposto )
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_codigoimposto,
                jsonb_build_array() <span style="color: #C76A40;
            font-weight: 800;">as</span> arg_itens
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __item_doc ed
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> __vendas_existis ve <span style="color: #C76A40;
            font-weight: 800;">on</span> ed.venda_id = ve.venda_id

              <span style="color: #C76A40;
            font-weight: 800;">where</span> ( ve.venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> ) 
                <span style="color: #C76A40;
            font-weight: 800;">or</span> ( ve.venda_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _data.notacredito_aplicar ) <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> )
            
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
                jsonb_agg( to_jsonb( ve ) ) <span style="color: #C76A40;
            font-weight: 800;">as</span> arg_vendas
                <span style="color: #C76A40;
            font-weight: 800;">into</span> _vendas
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __vendas ve
          ;
          
          <span style="color: #888">\/\*
           -- obrigatorios
              arg_colaborador_id: ID,
              arg_espaco_auth: ID,

              conta_posto_id: ID,

              -- opcional
              conta_mesa: { numero:NUM, descricao:TEXT, lotacao:NUM }
              conta_id: ID?
              conta_extension: {} | { reserva_id: UID }
              conta_chave: CHAVE

              conta_currency_id: ID,
              conta_tpaga_id: ID,

              conta_cliente_id:UID
              conta_titular: CLIENTE-NOME
              conta_titularnif: CLIENTE-NIF
              conta_data: DATA,

              -- requerido
              arg_vendas
           \*\/</span>


          <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta.conta_cliente_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> _conta.conta_cliente_id = _const.maguita_cliente_final <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
              <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.cliente c
              <span style="color: #C76A40;
            font-weight: 800;">where</span> c.cliente_id = _const.maguita_cliente_finalnotacredito
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> __branch <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.branch <span style="color: #C76A40;
            font-weight: 800;">where</span> _branch_uid = arg_branch_uid;
              <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.cliente(
                  cliente_id,
                  cliente_colaborador_id,
                  cliente_colaborador_gerente,
                  cliente_espaco_auth,
                  cliente_titular,
                  _branch_uid,
                  cliente_code
              ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
                   _const.maguita_cliente_finalnotacredito,
                   _const.colaborador_system_data,
                   __branch.branch_main_user,
                   __branch.branch_main_workspace,
                   <span style="color: #4d99bf">&#x27;CONTA DE NOTA DE CREDITO/DEBITO&#x27;</span>,
                   __branch._branch_uid,
                   <span style="color: #4d99bf">&#x27;NDC100010&#x27;</span>
               );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          _conta_args.conta_cliente_id := _conta.conta_cliente_id;
          _conta_args.conta_data := coalesce( _conta_args.conta_data, <span style="color: #397300">current_date</span> );
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta_args.conta_cliente_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> _conta_args.conta_cliente_id = _const.maguita_cliente_final <span style="color: #C76A40;
            font-weight: 800;">then</span>
              _conta_args.conta_cliente_id := _const.maguita_cliente_finalnotacredito;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          


          _conta_res := tweeks.funct_pos_reg_conta(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
              <span style="color: #4d99bf">&#x27;_serie_id&#x27;</span>, _serie_id,
              <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, coalesce( _conta.conta_espaco_auth, arg_espaco_auth ),
              <span style="color: #4d99bf">&#x27;conta_posto_id&#x27;</span>, _conta_args.conta_posto_id,
              <span style="color: #4d99bf">&#x27;conta_mesa&#x27;</span>, _conta_args.conta_mesa,
              <span style="color: #4d99bf">&#x27;conta_extension&#x27;</span>, coalesce( _conta_args.conta_extension, jsonb_build_object()),
              <span style="color: #4d99bf">&#x27;conta_chave&#x27;</span>, _conta_args.conta_chave,
              <span style="color: #4d99bf">&#x27;conta_currency_id&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">null</span>,
              <span style="color: #4d99bf">&#x27;conta_tpaga_id&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">null</span>,
              <span style="color: #4d99bf">&#x27;conta_cliente_id&#x27;</span>, _conta_args.conta_cliente_id,
              <span style="color: #4d99bf">&#x27;conta_titular&#x27;</span>, _conta.conta_titular,
              <span style="color: #4d99bf">&#x27;conta_titularnif&#x27;</span>, _conta.conta_titularnif,
              <span style="color: #4d99bf">&#x27;conta_data&#x27;</span>, _conta_args.conta_data,
              <span style="color: #4d99bf">&#x27;arg_vendas&#x27;</span>, _vendas.arg_vendas,
              <span style="color: #4d99bf">&#x27;conta_conta_docorigin&#x27;</span>, _conta.conta_id,
              <span style="color: #4d99bf">&#x27;conta_observacao&#x27;</span>, _conta_args.conta_observacao,
              <span style="color: #4d99bf">&#x27;conta_tserie_id&#x27;</span>, _tserie_id,
              <span style="color: #4d99bf">&#x27;conta_espaco_notacredito&#x27;</span>, arg_espaco_auth,
              <span style="color: #4d99bf">&#x27;conta_docorigin&#x27;</span>, args-&gt;&gt;<span style="color: #4d99bf">&#x27;conta_docorigin&#x27;</span>,
              <span style="color: #4d99bf">&#x27;conta_datedocorigin&#x27;</span>, args-&gt;&gt;<span style="color: #4d99bf">&#x27;conta_datedocorigin&#x27;</span>
            )
          );
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _conta_res.result <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> _conta_res;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">\/\*
            Essa função fecha uma nova conta
              arg = {
                arg_espaco_auth: ID,
                arg_colaborador_id: ID,

                deposito:{
                  deposito_cliente_id
                  deposito_caixa_id
                  deposito_tpaga_id
                  deposito_currency_id
                  deposito_posto_id
                  deposito_montantemoeda
                  deposito_montantetroco
                  deposito_data
                  deposito_docref: DOCUMENTO-REF?
                  deposito_observacao: OBSERVACAO?
                }

                conta_id: ID,
                conta_extension: {} | { reserva_id: UID }
                conta_mesa: { numero:NUM, descricao:TEXT, lotacao:NUM },

                conta_posto_id: ID,
                conta_desconto

                conta_titular: NOME-CLIENTE
                conta_titularnif: VARCHAR,
                conta_data: DATA,
                conta_cliente_id,

                //Relativos a GUIA
                guia_documentoperacao: CODIGO,
                guia_dataopeacao: DATA,
                guia_observacao: DESCRICAO
                guia_metadata: { ... any extras data }

                custos:[{
                  custoguia_montante: MONTANTE,
                  custoguia_descricao: DESCRICAO PARA O CUSTO
                  custoguia_tcusto_id: 1 - DESPESA | 2 - RECEITA
                }]
           \*\/</span>
          
          _conta_close_res := tweeks.funct_pos_change_conta_fechar(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
              <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, coalesce( _conta.conta_espaco_auth, arg_espaco_auth ),
              <span style="color: #4d99bf">&#x27;arg_tserie_id&#x27;</span>, _tserie_id,
              <span style="color: #4d99bf">&#x27;_serie_id&#x27;</span>, _serie_id,
              <span style="color: #4d99bf">&#x27;conta_conta_docorigin&#x27;</span>, _conta.conta_id,
              <span style="color: #4d99bf">&#x27;conta_id&#x27;</span>, _conta_res.data-&gt;&gt;<span style="color: #4d99bf">&#x27;conta_id&#x27;</span>,
              <span style="color: #4d99bf">&#x27;conta_extension&#x27;</span>, jsonb_build_object(),
              <span style="color: #4d99bf">&#x27;conta_posto_id&#x27;</span>,  _conta_args.conta_posto_id,
              <span style="color: #4d99bf">&#x27;conta_posto_fecho&#x27;</span>,  _conta_args.conta_posto_id,
              <span style="color: #4d99bf">&#x27;conta_desconto&#x27;</span>, ( _conta.conta_desconto ),
              <span style="color: #4d99bf">&#x27;conta_titular&#x27;</span>, _conta.conta_titular,
              <span style="color: #4d99bf">&#x27;conta_tserie_id&#x27;</span>, _tserie_id,
              <span style="color: #4d99bf">&#x27;conta_titularnif&#x27;</span>, _conta.conta_titularnif,
              <span style="color: #4d99bf">&#x27;conta_data&#x27;</span>, coalesce( _conta_args.conta_data, now()::<span style="color: #C76A40">date</span>),
              <span style="color: #4d99bf">&#x27;conta_cliente_id&#x27;</span>, _conta_args.conta_cliente_id,
              <span style="color: #4d99bf">&#x27;guia_documentoperacao&#x27;</span>, format(<span style="color: #4d99bf">&#x27;NC-%s&#x27;</span>,  to_char( clock_timestamp(), <span style="color: #4d99bf">&#x27;YYYYMMDDHHMISS-US&#x27;</span>)),
              <span style="color: #4d99bf">&#x27;guia_observacao&#x27;</span>, <span style="color: #4d99bf">&#x27;Guia de devolução ao stock ao efeturar uma nota de credito&#x27;</span>,
              <span style="color: #4d99bf">&#x27;guia_metadata&#x27;</span>, coalesce( _conta_res.data, jsonb_build_object() ),
              <span style="color: #4d99bf">&#x27;custos&#x27;</span>, jsonb_build_array(),
              <span style="color: #4d99bf">&#x27;conta_chave&#x27;</span>, _conta_args.conta_chave,
              <span style="color: #4d99bf">&#x27;arg_group_id&#x27;</span>, _conta._tgrupo_id
            )
          );

          <span style="color: #C76A40;
            font-weight: 800;">return</span> _conta_close_res;

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
            <span style="color: #C76A40;
            font-weight: 800;">begin</span>
                <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
                <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_exception( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
            <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_impostos_taxa {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks._get_impostos_taxa(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(artigo_id <span style="color: #C76A40">uuid</span>, percentagem_adicionar <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, percentagem_retirar <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, taxa_adicionar <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, taxa_retirar <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, taxas <span style="color: #C76A40">uuid</span>[])
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            arg_artigo_id [ ID, ... ]
            arg_espaco_auth UID
            arg_colaborador_id UID
           \*\/</span>


          arg_artigo_id <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>(
            <span style="color: #C76A40;
            font-weight: 800;">select</span> e.text::<span style="color: #C76A40">uuid</span>
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements_text( args-&gt; <span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span> ) e(  <span style="color: #C76A40">text</span> )
          );
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span>  args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _data <span style="color: #C76A40">record</span>;
          __knext <span style="color: #C76A40">record</span>;
          ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">for</span> __knext <span style="color: #C76A40;
            font-weight: 800;">in</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
             <span style="color: #C76A40;
            font-weight: 800;">from</span> unnest( arg_artigo_id ) u( _argito_id )
          <span style="color: #C76A40;
            font-weight: 800;">loop</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
              sum( ( txass::tweeks.taxa ).taxa_percentagem ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> tap.taplicar_id = _const.maguita_taplicar_adicionar ) <span style="color: #C76A40;
            font-weight: 800;">as</span> percentagem_adicionar,
              sum( ( txass::tweeks.taxa ).taxa_percentagem ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> tap.taplicar_id = _const.maguita_taplicar_retirar ) <span style="color: #C76A40;
            font-weight: 800;">as</span> percentagem_retivar,
              sum( ( txass::tweeks.taxa ).taxa_taxa ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> tap.taplicar_id = _const.maguita_taplicar_adicionar ) <span style="color: #C76A40;
            font-weight: 800;">as</span> taxa_adicionar,
              sum( ( txass::tweeks.taxa ).taxa_taxa ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> tap.taplicar_id = _const.maguita_taplicar_retirar ) <span style="color: #C76A40;
            font-weight: 800;">as</span> taxa_retivar,
              array_agg( <span style="color: #C76A40;
            font-weight: 800;">distinct</span> (txass::tweeks.taxa).taxa_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> taxas
              <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.imposto ip
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.taplicar tap <span style="color: #C76A40;
            font-weight: 800;">on</span> ip.imposto_taplicar_id = tap.taplicar_id
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.taxa tx <span style="color: #C76A40;
            font-weight: 800;">on</span> ip.imposto_tipoimposto_id = tx.taxa_tipoimposto_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> tx.taxa_estado = _const.taxa_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> tx.taxa_espaco_auth = ip.imposto_espaco_auth
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.taxa_espaco( tx, _const, arg_espaco_auth ) txass <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> ip.imposto_artigo_id = __knext._argito_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> ip._branch_uid = ___branch
              <span style="color: #C76A40;
            font-weight: 800;">and</span> tx._branch_uid = ___branch
              <span style="color: #C76A40;
            font-weight: 800;">and</span> ip.imposto_estado = _const.maguita_imposto_estado_ativo;

            _get_impostos_taxa.artigo_id := __knext._argito_id;
            _get_impostos_taxa.percentagem_adicionar := coalesce( _data.percentagem_adicionar, <span style="color: #C76A40">0</span> );
            _get_impostos_taxa.percentagem_retirar := coalesce( _data.percentagem_retivar, <span style="color: #C76A40">0</span> );
            _get_impostos_taxa.taxa_adicionar := coalesce( _data.taxa_adicionar, <span style="color: #C76A40">0</span> );
            _get_impostos_taxa.taxa_retirar := coalesce( _data.taxa_retivar, <span style="color: #C76A40">0</span> );
            _get_impostos_taxa.taxas := coalesce( _data.taxas, <span style="color: #C76A40;
            font-weight: 800;">array</span>[]::<span style="color: #C76A40">uuid</span>[] );
            <span style="color: #C76A40;
            font-weight: 800;">return next</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_fornecedor {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_fornecedor(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">json</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para listar os fornecedores da base de dados
            filter := {
              arg_espaco_auth: ID,
              arg_colaborador_id: UID,
              query: {
                any:,
                code: CODE,
                name: NAME,
                mail: MAIL,
                tel: CONTACTO,
                nif: NIF,
                address: ENDERECO

              }
            }
          \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[ ] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );

          _query_any <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lower( <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;query&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;any&#x27;</span> );
          _query_code <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lower( <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;query&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;code&#x27;</span> );
          _query_name <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lower( <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;query&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;name&#x27;</span> );
          _query_mail <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lower( <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;query&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;mail&#x27;</span> );
          _query_tel <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lower( <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;query&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;tel&#x27;</span> );
          _query_nif <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lower( <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;query&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;nif&#x27;</span> );
          _query_address <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lower( <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;query&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;address&#x27;</span> );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __fornecedor <span style="color: #C76A40;
            font-weight: 800;">as</span>  (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                fo.fornecedor_id,
                fo.fornecedor_code,
                fo.fornecedor_nif,
                fo.fornecedor_nome,
                fo.fornecedor_email,
                fo.fornecedor_contacto,
                fo.fornecedor_endereco,
                fo.fornecedor_estado,
                fo.fornecedor_dataregistro,
                fo.fornecedor_dataatualizacao
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.fornecedor fo
              <span style="color: #C76A40;
            font-weight: 800;">where</span> fo.fornecedor_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> fo.fornecedor_estado = _const.maguita_fornecedor_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> fo._branch_uid = _branch
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> fo.fornecedor_nome
            ), __query <span style="color: #C76A40;
            font-weight: 800;">as</span>  (
                <span style="color: #C76A40;
            font-weight: 800;">select</span> _f.*
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __fornecedor _f
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( _f.fornecedor_code, <span style="color: #4d99bf">&#x27;&#x27;</span> ) = coalesce( _query_code, _f.fornecedor_code, <span style="color: #4d99bf">&#x27;&#x27;</span> )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( _f.fornecedor_nif, <span style="color: #4d99bf">&#x27;&#x27;</span> ) = coalesce( _query_nif, _f.fornecedor_nif, <span style="color: #4d99bf">&#x27;&#x27;</span> )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( _f.fornecedor_contacto, <span style="color: #4d99bf">&#x27;&#x27;</span> ) = coalesce( _query_tel, _f.fornecedor_contacto, <span style="color: #4d99bf">&#x27;&#x27;</span> )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> lower( coalesce( _f.fornecedor_nome, <span style="color: #4d99bf">&#x27;&#x27;</span> ) ) <span style="color: #C76A40;
            font-weight: 800;">like</span> lower( format( <span style="color: #4d99bf">&#x27;%%%s%%&#x27;</span>, coalesce( _query_name, _f.fornecedor_nome, <span style="color: #4d99bf">&#x27;&#x27;</span> ) ) )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> lower( coalesce( _f.fornecedor_email, <span style="color: #4d99bf">&#x27;&#x27;</span> ) ) <span style="color: #C76A40;
            font-weight: 800;">like</span> lower( format( <span style="color: #4d99bf">&#x27;%%%s%%&#x27;</span>, coalesce( _query_mail, _f.fornecedor_email, <span style="color: #4d99bf">&#x27;&#x27;</span> ) ) )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> lower( coalesce( _f.fornecedor_endereco, <span style="color: #4d99bf">&#x27;&#x27;</span> ) ) <span style="color: #C76A40;
            font-weight: 800;">like</span> lower( format( <span style="color: #4d99bf">&#x27;%%%s%%&#x27;</span>, coalesce( _query_address, _f.fornecedor_endereco, <span style="color: #4d99bf">&#x27;&#x27;</span> ) ) )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ( <span style="color: #C76A40;
            font-weight: 800;">false</span>
                      <span style="color: #C76A40;
            font-weight: 800;">or</span> coalesce( _f.fornecedor_code, <span style="color: #4d99bf">&#x27;&#x27;</span> ) = coalesce( _query_any, _f.fornecedor_code, <span style="color: #4d99bf">&#x27;&#x27;</span>  )
                      <span style="color: #C76A40;
            font-weight: 800;">or</span> coalesce( _f.fornecedor_nif, <span style="color: #4d99bf">&#x27;&#x27;</span>) = coalesce( _query_any, _f.fornecedor_nif, <span style="color: #4d99bf">&#x27;&#x27;</span>  )
                      <span style="color: #C76A40;
            font-weight: 800;">or</span> coalesce( _f.fornecedor_contacto, <span style="color: #4d99bf">&#x27;&#x27;</span> ) = coalesce( _query_any, _f.fornecedor_contacto, <span style="color: #4d99bf">&#x27;&#x27;</span> )
                      <span style="color: #C76A40;
            font-weight: 800;">or</span> lower( coalesce( _f.fornecedor_nome, <span style="color: #4d99bf">&#x27;&#x27;</span> ) ) <span style="color: #C76A40;
            font-weight: 800;">like</span> lower( format( <span style="color: #4d99bf">&#x27;%%%s%%&#x27;</span>, coalesce( _query_name, _f.fornecedor_nome, <span style="color: #4d99bf">&#x27;&#x27;</span> ) ) )
                      <span style="color: #C76A40;
            font-weight: 800;">or</span> lower( coalesce( _f.fornecedor_email, <span style="color: #4d99bf">&#x27;&#x27;</span> ) ) <span style="color: #C76A40;
            font-weight: 800;">like</span> lower( format( <span style="color: #4d99bf">&#x27;%%%s%%&#x27;</span>, coalesce( _query_mail, _f.fornecedor_email, <span style="color: #4d99bf">&#x27;&#x27;</span> ) ) )
                      <span style="color: #C76A40;
            font-weight: 800;">or</span> lower( coalesce( _f.fornecedor_endereco, <span style="color: #4d99bf">&#x27;&#x27;</span> ) ) <span style="color: #C76A40;
            font-weight: 800;">like</span> lower( format( <span style="color: #4d99bf">&#x27;%%%s%%&#x27;</span>, coalesce( _query_address, _f.fornecedor_endereco, <span style="color: #4d99bf">&#x27;&#x27;</span> ) ) )
                    )
            )
            <span style="color: #C76A40;
            font-weight: 800;">select</span> to_json( f )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __query f
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_chave {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_chave(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            arg_chave_temporaria: CHAVE-TEMP
           \*\/</span>
            arg_chave_temporaria <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_chave_temporaria&#x27;</span>;
            _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">delete</span>
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.chave s
            <span style="color: #C76A40;
            font-weight: 800;">where</span> chave_definitiva <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
              <span style="color: #C76A40;
            font-weight: 800;">and</span> chave_date &lt; now() - <span style="color: #C76A40">interval</span> <span style="color: #4d99bf">&#x27;1&#x27;</span> day
          ;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_chave_temporaria <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return query</span>
                  <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( ch )
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.chave ch
                    <span style="color: #C76A40;
            font-weight: 800;">where</span> (ch.chave_date + <span style="color: #C76A40">interval</span> <span style="color: #4d99bf">&#x27;24&#x27;</span> hour )  &gt; now()
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> ch.chave_definitiva <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
              <span style="color: #C76A40;
            font-weight: 800;">return query</span>
                  <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( ch ) || coalesce( to_jsonb( p ), jsonb_build_object()) || jsonb_build_object(
                        <span style="color: #4d99bf">&#x27;posto_disponivel&#x27;</span>, coalesce( p.posto_estado != _const.maguita_posto_estado_encerado, <span style="color: #C76A40;
            font-weight: 800;">false</span> )
                    )
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.chave ch
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.posto p <span style="color: #C76A40;
            font-weight: 800;">on</span> ch.chave_definitiva = p.posto_chave
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> ch.chave_temporarai = arg_chave_temporaria
              ;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_report_stock_movimentos {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_report_stock_movimentos(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Esse relatorio apresenta as movimentações em stock
            filters := {
              arg_data_operacao: {start: date, end: date }
              arg_data_registro: {start: date, end: date }
              arg_tmovimento_id: ID,
              arg_toperacao_stock: ID
              arg_artigo_id: ID
            }
          \*\/</span>

          arg_data_registro_start <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_registro&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;start&#x27;</span>;
          arg_data_registro_end <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_registro&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;end&#x27;</span>;
          arg_data_operacao_start <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_registro&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;start&#x27;</span>;
          arg_data_operacao_end <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_registro&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;end&#x27;</span>;

          arg_tmovimento_id <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_tmovimento_id&#x27;</span>;
          arg_toperacao_stock <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_toperacao_stock&#x27;</span>;
          arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span>;
          arg_classe_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_classe_id&#x27;</span>;

          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );

          arg_columns <span style="color: #C76A40">text</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>[
              <span style="color: #4d99bf">&#x27;movimento_id&#x27;</span>,
              <span style="color: #4d99bf">&#x27;movimento_data&#x27;</span>,
              <span style="color: #4d99bf">&#x27;movimento_documento&#x27;</span>,
              <span style="color: #4d99bf">&#x27;movimento_quantidade&#x27;</span>,
              <span style="color: #4d99bf">&#x27;movimento_quantidadeinicia&#x27;</span>,
              <span style="color: #4d99bf">&#x27;movimento_quantidadefinal&#x27;</span>,
              <span style="color: #4d99bf">&#x27;movimento_dataregistro&#x27;</span>,
              <span style="color: #4d99bf">&#x27;artigo_nome&#x27;</span>,
              <span style="color: #4d99bf">&#x27;artigo_codigo&#x27;</span>,
              <span style="color: #4d99bf">&#x27;espaco_nome&#x27;</span>,
              <span style="color: #4d99bf">&#x27;colaborador_nome&#x27;</span>,
              <span style="color: #4d99bf">&#x27;stock_quantidade&#x27;</span>,
              <span style="color: #4d99bf">&#x27;artigo_stock&#x27;</span>,
              <span style="color: #4d99bf">&#x27;tmovimento_designacao&#x27;</span>,
              <span style="color: #4d99bf">&#x27;toperacao_designacao&#x27;</span>
            ];

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> report <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                mv.*,
                tm.*,
                a.*,
                e.*,
                col.*,
                top.*,
                format( <span style="color: #4d99bf">&#x27;%s %s&#x27;</span>, col.colaborador_nome, col.colaborador_apelido ) <span style="color: #C76A40;
            font-weight: 800;">as</span> colaborador_nomecompleto
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.movimento mv
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.stock s <span style="color: #C76A40;
            font-weight: 800;">on</span> mv.movimento_stock_id = s.stock_id
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo a <span style="color: #C76A40;
            font-weight: 800;">on</span> s.stock_artigo_id = a.artigo_id
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> s.stock_espacao_id = e.espaco_id
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.colaborador col <span style="color: #C76A40;
            font-weight: 800;">on</span> mv.movimento_colaborador_id = col.colaborador_id
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.toperacao top <span style="color: #C76A40;
            font-weight: 800;">on</span> mv.movimento_toperacao_id = top.toperacao_id
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.tmovimento tm <span style="color: #C76A40;
            font-weight: 800;">on</span> mv.movimento_tmovimento_id = tm.tmovimento_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> mv.movimento_estado != _const.movimento_estado_canselado
                <span style="color: #C76A40;
            font-weight: 800;">and</span> tm.tmovimento_id = coalesce( arg_tmovimento_id, tm.tmovimento_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> mv.movimento_toperacao_id = coalesce( arg_toperacao_stock, mv.movimento_toperacao_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> mv.movimento_data <span style="color: #C76A40;
            font-weight: 800;">between</span> coalesce( arg_data_operacao_start, mv.movimento_data ) <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( arg_data_operacao_end, mv.movimento_data )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> mv.movimento_dataregistro::<span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">between</span> coalesce( arg_data_registro_start, mv.movimento_dataregistro::<span style="color: #C76A40">date</span> ) <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( arg_data_registro_end, mv.movimento_dataregistro::<span style="color: #C76A40">date</span> )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> a.artigo_id = coalesce( arg_artigo_id, a.artigo_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> a.artigo_classe_id = coalesce( arg_classe_id, a.artigo_classe_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> mv.movimento_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> mv.movimento_dataregistro <span style="color: #C76A40;
            font-weight: 800;">desc</span>
            )
            <span style="color: #C76A40;
            font-weight: 800;">select</span> lib.jsonb_values( rp , <span style="color: #C76A40;
            font-weight: 800;">variadic</span> arg_columns )
            <span style="color: #C76A40;
            font-weight: 800;">from</span> report rp
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __infinity_loop {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__infinity_loop(_espaco espaco)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          __loop <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">with</span> <span style="color: #C76A40;
            font-weight: 800;">recursive</span> __espaco <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                e.espaco_id,
                e.espaco_espaco_id,
                e.espaco_nome,
                _espaco.espaco_id <span style="color: #C76A40;
            font-weight: 800;">as</span> find
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.espaco e
          ), __infinite_lop <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> e.*, <span style="color: #C76A40;
            font-weight: 800;">array</span>[]::<span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">as</span> <span style="color: #C76A40;
            font-weight: 800;">family</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> __espaco e
            <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span> _es.*, _c.<span style="color: #C76A40;
            font-weight: 800;">family</span> || _es.espaco_id
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __espaco _es
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __infinite_lop _c <span style="color: #C76A40;
            font-weight: 800;">on</span> _es.espaco_id = _c.espaco_espaco_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> _es.espaco_id != <span style="color: #C76A40;
            font-weight: 800;">all</span>( _c.<span style="color: #C76A40;
            font-weight: 800;">family</span> )
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> __loop
            <span style="color: #C76A40;
            font-weight: 800;">from</span> __infinite_lop c
            <span style="color: #C76A40;
            font-weight: 800;">where</span> c.espaco_id  = c.find
              <span style="color: #C76A40;
            font-weight: 800;">and</span> c.espaco_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( c.<span style="color: #C76A40;
            font-weight: 800;">family</span> )
          ;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> __loop.espaco_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> __loop := <span style="color: #C76A40;
            font-weight: 800;">null</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">return</span> to_jsonb( __loop );

        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_entrada {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_entrada(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa funcao serve para registar as entradas de produto
            args = {
              arg_colaborador_id: *ID,
              arg_espaco_destino: *ID,
              arg_espaco_auth: *ID,



              arg_entradas: [
                artigo_id: *ID,
                entrada_quantidade: *QT,
                entrada_lote: LOTE,
                entrada_validade: LOTE,
                entrada_descricao: DESCRICAO
                entrada_custounitario: PRECO
                entrada_metadata: { ... any extras data }
              ]

              //Relativos a GUIA
              guia_refuid: FORNECEDOR-ID
              guia_documentoperacao: CODIGO,
              guia_dataopeacao: DATA,
              guia_observacao: DESCRICAO
              guia_metadata: { ... any extras data }

              custos:[{
                custoguia_montante: MONTANTE,
                custoguia_descricao: DESCRICAO PARA O CUSTO
                custoguia_tcusto_id: 1 - DESPESA | 2 - RECEITA
              }]
            }
           \*\/</span>

          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_destino <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_destino&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_entrada_codigofatura <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_entrada_codigofatura&#x27;</span>;

          arg_entrada_next <span style="color: #C76A40">int</span> ;

          _entreda tweeks.entrada;
          _new tweeks.entrada;
          __entreda tweeks.entrada[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>[]::tweeks.entrada[];
          _espaco tweeks.espaco;
          _entrada_group <span style="color: #C76A40">uuid</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _data <span style="color: #C76A40">record</span>;
          _guia tweeks.guia;
          _branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          _espaco := tweeks._get_espaco( arg_espaco_destino );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_entrada_codigofatura <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            arg_entrada_codigofatura := lib.str_nospace( to_char( arg_entrada_next, <span style="color: #4d99bf">&#x27;&quot;EN#&quot;000-000&#x27;</span> ) );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _entrada_group := <span style="color: #397300">public</span>.uuid_generate_v4();

          _guia := jsonb_populate_record( _guia, args );
          _guia.guia_tguia_id := _const.maguita_tguia_entrada;
          _guia.guia_espaco_entrada := arg_espaco_destino;
          _guia.guia_toperacao_id := _const.maguita_toperacao_entrada;
          _guia.guia_refclass := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( <span style="color: #4d99bf">&#x27;tweeks.fornecedor&#x27;</span>::<span style="color: #C76A40">regclass</span> );
          _guia.guia_refs := jsonb_build_object(
              <span style="color: #4d99bf">&#x27;fornecedor&#x27;</span>, jsonb_build_object( <span style="color: #4d99bf">&#x27;fornecedor_id&#x27;</span>, _guia.guia_refuid ),
              <span style="color: #4d99bf">&#x27;destino&#x27;</span>, jsonb_build_object( <span style="color: #4d99bf">&#x27;espaco_id&#x27;</span>, arg_espaco_destino )
          );

          _guia := tweeks.funct_sets_guia( jsonb_build_object(
            <span style="color: #4d99bf">&#x27;guia&#x27;</span>, _guia,
            <span style="color: #4d99bf">&#x27;custoguia&#x27;</span>, args-&gt;<span style="color: #4d99bf">&#x27;custos&#x27;</span>,
            <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
            <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth

          ));

          <span style="color: #C76A40;
            font-weight: 800;">for</span> _data <span style="color: #C76A40;
            font-weight: 800;">in</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                ( e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_id&#x27;</span> )::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> artigo_id,
                ( e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;entrada_descricao&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> entrada_descricao,
                ( e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;entrada_quantidade&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> entrada_quantidade,
                ( e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;entrada_custounitario&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> entrada_custounitario,
                ( e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;entrada_metadata&#x27;</span> )::<span style="color: #C76A40">json</span> entrada_metadata,
                ( e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;entrada_lote&#x27;</span> )::<span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">as</span>  entrada_lote,
                ( e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;entrada_validade&#x27;</span> )::<span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">as</span>  entrada_validade
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;arg_entradas&#x27;</span> ) e( doc )
          <span style="color: #C76A40;
            font-weight: 800;">loop</span>
            _new.entrada_descricao :=       _data.entrada_descricao;
            _new.entrada_artigo_id :=       _data.artigo_id;
            _new.entrada_custounitario :=        _data.entrada_custounitario;
            _new.entrada_quantidade :=      _data.entrada_quantidade;
            _new.entrada_lote :=          _data.entrada_lote;
            _new.entrada_validade :=      _data.entrada_validade;
            _new.entrada_metadata :=      _data.entrada_metadata;

            _new.entrada_espaco_destino :=  arg_espaco_destino;
            _new.entrada_espaco_auth :=     arg_espaco_auth;
            _new.entrada_colaborador_id :=  arg_colaborador_id;
            _new.entrada_guia_id :=         _guia.guia_uid;

            <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _entreda
              <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets_in( _new )
            ;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;guia&#x27;</span>, _guia,
            <span style="color: #4d99bf">&#x27;entrada&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">array</span>(
              <span style="color: #C76A40;
            font-weight: 800;">select</span> ent
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.entrada ent
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ent.entrada_guia_id = _guia.guia_uid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ent.entrada_estado = _const.entrada_estado_ativo
            ),<span style="color: #4d99bf">&#x27;custoguia&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">array</span>(
              <span style="color: #C76A40;
            font-weight: 800;">select</span> cg
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.custoguia cg
                <span style="color: #C76A40;
            font-weight: 800;">where</span> cg.custoguia_guia_uid = _guia.guia_uid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> cg.custoguia_estado = _const.maguita_custoguia_estado_ativo
            )
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __get_autorizacao {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__get_autorizacao(<span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> autorizacao
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.autorizacao <span style="color: #C76A40;
            font-weight: 800;">where</span> autorizacao_uid = <span style="color: #1f7199">$1</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __generate_caixa_code {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__generate_caixa_code(brc <span style="color: #C76A40">uuid</span>, user_brc <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>, space_brc <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _code <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;
          _len <span style="color: #C76A40">int</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40">6</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _cluster := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local();
          brc := coalesce( brc, tweeks.__branch_uid( user_brc, space_brc ));

          <span style="color: #C76A40;
            font-weight: 800;">while</span> _code <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>
              _code := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.next( <span style="color: #4d99bf">&#x27;caixa.code/seq&#x27;</span>, sub := brc::<span style="color: #C76A40">text</span>, lpad := _len, lpad_char := <span style="color: #4d99bf">&#x27;0&#x27;</span> );
              <span style="color: #C76A40;
            font-weight: 800;">if</span>( <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
                  <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.caixa c
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> c.caixa_code = _code
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> c._branch_uid = coalesce( brc, c._branch_uid )
                )) <span style="color: #C76A40;
            font-weight: 800;">then</span>
                _code := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
          <span style="color: #C76A40;
            font-weight: 800;">return</span> _code;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_tespaco {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_tespaco(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(tespaco_id <span style="color: #C76A40">smallint</span>, tespaco_designacao <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #888">-- Essa função lista os tipos de espaco</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.tespaco t <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> t.tespaco_designacao <span style="color: #C76A40;
            font-weight: 800;">asc</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_report_venda_artigo {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_report_venda_artigo(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Relatorio de vendas
            filter := {
              arg_data_operacao:{ start: DATE, end: DATE },
              arg_data_registro:{ start: DATE, end: DATE },
              arg_artigo_id: ID
              arg_posto_id: ID,
              arg_colaborador_vendedor: ID,
              arg_currency_pagamento: ID,
              arg_colaborador_vendedor: ID,
              arg_tpaga_id: ID,
              arg_classe_id: ID,
              arg _conta_fatura: FATURA,
            }
           \*\/</span>

          arg_data_operacao_start <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_operacao&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;start&#x27;</span>;
          arg_data_operacao_end <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_operacao&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;end&#x27;</span>;

          arg_data_registro_start <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_registro&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;start&#x27;</span>;
          arg_data_registro_end <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_registro&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;end&#x27;</span>;

          arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span>;
          arg_posto_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_id&#x27;</span>;
          arg_colaborador_vendedor <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_vendedor&#x27;</span>;
          arg_classe_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_classe_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );

          arg_currency_pagamento <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_currency_pagamento&#x27;</span>;
          arg_tpaga_id <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_tpaga_id&#x27;</span>;
          arg_conta_montante_start <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_conta_montante&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;start&#x27;</span>;
          arg_conta_montante_end <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_conta_montante&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;end&#x27;</span>;
          arg_conta_fatura <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_conta_fatura&#x27;</span>;


          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __vendas ( venda_id, venda_conta_id, venda_artigo_id, venda_quantidade, venda_custounitario, venda_montente, venda_dataregistro, venda_modalidade, venda_tmodalidade, venda_gmodalidade  ) <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> v.venda_id, v.venda_conta_id, v.venda_artigo_id, v.venda_quantidade, v.venda_custounitario, v.venda_montente, v.venda_dataregistro, <span style="color: #4d99bf">&#x27;Venda directa&#x27;</span>::<span style="color: #C76A40">text</span>, <span style="color: #C76A40">1</span>, <span style="color: #C76A40">1</span>
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.venda v
                <span style="color: #C76A40;
            font-weight: 800;">where</span> v.venda_estado = _const.venda_estado_fechado
            <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span> ag.agrega_id, ve.venda_conta_id, ag.agrega_artigo_item, ag.agrega_quantidade, ag.agrega_custounitario, ag.agrega_montante, ag.agrega_dataregistro, <span style="color: #4d99bf">&#x27;Item Extras&#x27;</span>::<span style="color: #C76A40">text</span>, <span style="color: #C76A40;
            font-weight: 800;">case</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> ag.agrega_montante &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">2</span> <span style="color: #C76A40;
            font-weight: 800;">else</span>  <span style="color: #C76A40">3</span> <span style="color: #C76A40;
            font-weight: 800;">end</span>, <span style="color: #C76A40">2</span>
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.agrega ag
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.venda ve <span style="color: #C76A40;
            font-weight: 800;">on</span> ag.agrega_venda_id = ve.venda_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ag.agrega_estado = _const.agrega_estado_fechado
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_estado = _const.venda_estado_fechado
            ), report <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> art.*,
                 _v.venda_custounitario <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_custounitario,
                 sum( _v.venda_quantidade ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_quantidade,
                 sum( _v.venda_montente ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_montente,
                _v.venda_modalidade <span style="color: #C76A40;
            font-weight: 800;">as</span>  venda_modalidade
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo art
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __vendas _v <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_id = _v.venda_artigo_id
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.conta ct <span style="color: #C76A40;
            font-weight: 800;">on</span> _v.venda_conta_id = ct.conta_id
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.caixa cx <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_caixa_fechopagamento = cx.caixa_id

              <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_estado = _const.conta_estado_pago
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_data <span style="color: #C76A40;
            font-weight: 800;">between</span> coalesce( arg_data_operacao_start, ct.conta_data ) <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( arg_data_operacao_end, ct.conta_data )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_dataregistro::<span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">between</span> coalesce( arg_data_registro_start, ct.conta_dataregistro::<span style="color: #C76A40">date</span> ) <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( arg_data_registro_end, ct.conta_dataregistro::<span style="color: #C76A40">date</span> )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> cx.caixa_posto_id = coalesce( arg_posto_id, cx.caixa_posto_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( ct.conta_colaborador_atualizacao, ct.conta_colaborador_id ) = coalesce( arg_colaborador_vendedor, ct.conta_colaborador_atualizacao, ct.conta_colaborador_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_currency_id = coalesce( arg_currency_pagamento, ct.conta_currency_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_tpaga_id = coalesce( arg_tpaga_id, ct.conta_tpaga_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_montante <span style="color: #C76A40;
            font-weight: 800;">between</span>  coalesce( arg_conta_montante_start, ct.conta_montante ) <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( arg_conta_montante_end, ct.conta_montante )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_classe_id = coalesce( arg_classe_id, art.artigo_classe_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_id = coalesce( arg_artigo_id, art.artigo_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> lower( ct.conta_numerofatura ) <span style="color: #C76A40;
            font-weight: 800;">like</span> <span style="color: #4d99bf">&#x27;%&#x27;</span> ||lower( coalesce( arg_conta_fatura, ct.conta_numerofatura ) ) ||<span style="color: #4d99bf">&#x27;%&#x27;</span>
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                art.artigo_id,
                _v.venda_custounitario,
                _v.venda_modalidade,
                _v.venda_tmodalidade,
                _v.venda_gmodalidade
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> art.artigo_nome <span style="color: #C76A40;
            font-weight: 800;">asc</span>,
                 _v.venda_modalidade
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> lib.jsonb_values( r,
                <span style="color: #4d99bf">&#x27;artigo_codigo&#x27;</span>,
                <span style="color: #4d99bf">&#x27;artigo_nome&#x27;</span>,
                <span style="color: #4d99bf">&#x27;venda_quantidade&#x27;</span>,
                <span style="color: #4d99bf">&#x27;venda_custounitario&#x27;</span>,
                <span style="color: #4d99bf">&#x27;venda_montente&#x27;</span>,
                <span style="color: #4d99bf">&#x27;venda_modalidade&#x27;</span>,
                <span style="color: #4d99bf">&#x27;venda_tmodalidade&#x27;</span>,
                <span style="color: #4d99bf">&#x27;venda_gmodalidade&#x27;</span>
              )
            <span style="color: #C76A40;
            font-weight: 800;">from</span> report r
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_parametrizacao {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_parametrizacao(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**doc
            args := {
              arg_colaborador_id:UID
              arg_espaco_auth: UID,
              parametrizacao_tags: []
            
            }
          doc\*\/</span>
          
          _user_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          _espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( _user_id, _espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _parametrizacao tweeks.parametrizacao;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _parametrizacao := jsonb_populate_record( _parametrizacao, args );
          <span style="color: #C76A40;
            font-weight: 800;">if</span> coalesce( array_length( _parametrizacao.parametrizacao_tags, <span style="color: #C76A40">1</span> ),  <span style="color: #C76A40">0</span> ) = <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> 
              _parametrizacao.parametrizacao_tags := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">return query</span> 
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __parametrizacao <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.parametrizacao p 
                <span style="color: #C76A40;
            font-weight: 800;">where</span> p.parametrizacao_estado = _const.maguita_parametrizacao_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> p.parametrizacao_tags @&gt; coalesce( _parametrizacao.parametrizacao_tags, p.parametrizacao_tags )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> p._branch_uid = ___branch
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _p )
               <span style="color: #C76A40;
            font-weight: 800;">from</span> __parametrizacao _p
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_branch_by_colaborador {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks._get_branch_by_colaborador(<span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.branch
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">select</span> b.*
        <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.branch b
               <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.colaborador c <span style="color: #C76A40;
            font-weight: 800;">on</span> c.colaborador_branch_uid = b.branch_uid
        <span style="color: #C76A40;
            font-weight: 800;">where</span> c.colaborador_id = <span style="color: #1f7199">$1</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_sets_autorizacao_continue {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_sets_autorizacao_continue(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            {
              arg_colaborador_id: UID
              arg_espaco_auth: UID
              autorizacao_uid: UID
            }
           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_branch_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );

          _autorizacao tweeks.autorizacao;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _data <span style="color: #C76A40">record</span>;
          _next <span style="color: #C76A40">record</span>;
          _res lib.res;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">lock</span> <span style="color: #C76A40;
            font-weight: 800;">table</span> tweeks.autorizacao;
          _autorizacao := tweeks.__get_autorizacao( ( args-&gt;&gt;<span style="color: #4d99bf">&#x27;autorizacao_uid&#x27;</span> )::<span style="color: #C76A40">uuid</span> );
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>( 
            <span style="color: #C76A40;
            font-weight: 800;">select</span> 
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.autorizacao a
              <span style="color: #C76A40;
            font-weight: 800;">where</span> autorizacao_autorizacao_continuer = _autorizacao.autorizacao_uid
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span> 
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false(<span style="color: #4d99bf">&#x27;Já existe uma continuação para essa autorização definida!&#x27;</span>);
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">with</span> __serie <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                serie_tserie_id,
                serie_espaco_id,
                serie_designacao,
                format(<span style="color: #4d99bf">&#x27;%s%s&#x27;</span>, substr( serie_numero, <span style="color: #C76A40">1</span>, length( serie_numero ) <span style="color: #C76A40">-2</span> ), to_char( <span style="color: #397300">current_date</span>, <span style="color: #4d99bf">&#x27;yy&#x27;</span>)) <span style="color: #C76A40;
            font-weight: 800;">as</span> serie_numero,
                serie_quantidade,
                serie_numcertificacao,
                serie_numatorizacao,
                se.serie_id <span style="color: #C76A40;
            font-weight: 800;">as</span> serie_serie_id,
                <span style="color: #C76A40;
            font-weight: 800;">case</span> 
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> _autorizacao.autorizacao_ano = extract( years <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #397300">current_date</span>)::<span style="color: #C76A40">int</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> serie_sequencia
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">0</span>
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> serie_sequencia
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.serie se
              <span style="color: #C76A40;
            font-weight: 800;">where</span> se.serie_autorizacao_uid = _autorizacao.autorizacao_uid
                <span style="color: #C76A40;
            font-weight: 800;">and</span> se.serie_estado = _const.maguita_serie_estado_fechado
                <span style="color: #C76A40;
            font-weight: 800;">and</span> se.serie_fechoautorizacao
                <span style="color: #C76A40;
            font-weight: 800;">and</span> se._branch_uid = arg_branch_uid
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
                jsonb_agg( to_jsonb( _s ) ) <span style="color: #C76A40;
            font-weight: 800;">as</span> series,
                array_agg( _s.serie_serie_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> _series_id
                <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __serie _s;


          _res :=  tweeks.funct_sets_autorizacao( jsonb_build_object(
            <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
            <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth,
            <span style="color: #4d99bf">&#x27;_autorizacao_continue&#x27;</span>, _autorizacao,
            <span style="color: #4d99bf">&#x27;autorizacao_uid&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">null</span>,
            <span style="color: #4d99bf">&#x27;autorizacao_autorizacao_continuer&#x27;</span>, _autorizacao.autorizacao_uid,
            <span style="color: #4d99bf">&#x27;autorizacao_espaco_uid&#x27;</span>, _autorizacao.autorizacao_espaco_uid,
            <span style="color: #4d99bf">&#x27;autorizacao_designacao&#x27;</span>, _autorizacao.autorizacao_designacao,
            <span style="color: #4d99bf">&#x27;autorizacao_numero&#x27;</span>, _autorizacao.autorizacao_numero,
            <span style="color: #4d99bf">&#x27;series&#x27;</span>, _data.series
          ));


          <span style="color: #C76A40;
            font-weight: 800;">for</span> _next <span style="color: #C76A40;
            font-weight: 800;">in</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                al.*,
                newFT.serie_id <span style="color: #C76A40;
            font-weight: 800;">as</span> _serie_fatura,
                newFR.serie_id <span style="color: #C76A40;
            font-weight: 800;">as</span> _serie_faturarecibo
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.aloca al
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.serie oldFR <span style="color: #C76A40;
            font-weight: 800;">on</span> al.aloca_serie_faturarecibo = oldFR.serie_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> oldFR.serie_id = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( _data._series_id )
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.serie newFR <span style="color: #C76A40;
            font-weight: 800;">on</span> newFR.serie_serie_id = oldFR.serie_id
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.serie oldFT <span style="color: #C76A40;
            font-weight: 800;">on</span> al.aloca_serie_fatura = oldft.serie_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> oldFT.serie_id = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( _data._series_id )
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.serie newFT <span style="color: #C76A40;
            font-weight: 800;">on</span> newFT.serie_serie_id = oldFT.serie_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> al.aloca_estado = _const.maguita_aloca_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ( newFT.serie_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span>  <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> newFR.serie_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> )
          <span style="color: #C76A40;
            font-weight: 800;">loop</span>
            <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.aloca
              <span style="color: #C76A40;
            font-weight: 800;">set</span> 
                aloca_serie_faturarecibo = _next._serie_faturarecibo,
                aloca_serie_fatura = _next.aloca_serie_fatura
              <span style="color: #C76A40;
            font-weight: 800;">where</span> aloca_id = _next.aloca_id
            ;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">return</span> _res;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __fluxo_stock {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__fluxo_stock(_artigo_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>, _espaco_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>, _classe_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>, _branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(espaco_id <span style="color: #C76A40">uuid</span>, artigo_id <span style="color: #C76A40">uuid</span>, stock_quantidade <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
            <span style="color: #C76A40;
            font-weight: 800;">with</span>  __artigo <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> a.artigo_id
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo a
              <span style="color: #C76A40;
            font-weight: 800;">where</span> a.artigo_id = coalesce( _artigo_uid, a.artigo_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> a.artigo_classe_id = coalesce( _classe_uid, a.artigo_classe_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> a._branch_uid = coalesce( _branch, a._branch_uid )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> a.artigo_stocknegativo
            ), __espaco <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> e.espaco_id
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.espaco e
                <span style="color: #C76A40;
            font-weight: 800;">where</span> e.espaco_id = coalesce( _espaco_uid, e.espaco_id )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> e._branch_uid = coalesce( _branch, e._branch_uid )
            ), __fluxo <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  a.artigo_id,
                  e.espaco_id,
                  f.fluxo_id,
                  f.fluxo_sequencia,
                  f.fluxo_dataregistro,
                  f.fluxo_quantidadefinal,
                  f.fluxo_quantidadein,
                  f.fluxo_quantidadeout,
                  f.fluxo_artigo_in <span style="color: #C76A40;
            font-weight: 800;">as</span> artigo_in,
                  f.fluxo_artigo_out <span style="color: #C76A40;
            font-weight: 800;">as</span> artigo_out,
                  f.fluxo_espaco_out <span style="color: #C76A40;
            font-weight: 800;">as</span> espaco_out,
                  f.fluxo_espaco_in <span style="color: #C76A40;
            font-weight: 800;">as</span> espaco_in,
                  f.fluxo_checkpoint
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.fluxo f
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> e.espaco_id  <span style="color: #C76A40;
            font-weight: 800;">in</span> ( f.fluxo_espaco_in, f.fluxo_espaco_out)
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __artigo a <span style="color: #C76A40;
            font-weight: 800;">on</span> a.artigo_id <span style="color: #C76A40;
            font-weight: 800;">in</span> ( f.fluxo_artigo_in, f.fluxo_artigo_out )
                <span style="color: #C76A40;
            font-weight: 800;">where</span> f._branch_uid = coalesce( _branch, f._branch_uid )
            ), __check_point <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  f.artigo_id,
                  f.espaco_id,
                  f.fluxo_id,
                  f.fluxo_dataregistro,
                  f.fluxo_quantidadefinal,
                  rank() <span style="color: #C76A40;
            font-weight: 800;">over</span> ( <span style="color: #C76A40;
            font-weight: 800;">partition</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> f.artigo_id, f.espaco_id <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> f.fluxo_dataregistro <span style="color: #C76A40;
            font-weight: 800;">desc</span> , f.fluxo_sequencia <span style="color: #C76A40;
            font-weight: 800;">desc</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> fluxo_rank
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __fluxo f
                <span style="color: #C76A40;
            font-weight: 800;">where</span> f.fluxo_checkpoint = <span style="color: #C76A40">0</span>
            ), __sumary <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                f.artigo_id,
                f.espaco_id,
                coalesce(
                    sum( f.fluxo_quantidadein ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> f.artigo_id = f.artigo_in <span style="color: #C76A40;
            font-weight: 800;">and</span> f.espaco_id = f.espaco_in ),
                    <span style="color: #C76A40">0</span>
                ) + coalesce( cp.fluxo_quantidadefinal, <span style="color: #C76A40">0.0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> credito,
                coalesce(
                    sum( f.fluxo_quantidadeout ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> f.artigo_id = f.artigo_out <span style="color: #C76A40;
            font-weight: 800;">and</span> f.espaco_id = f.espaco_out ),
                    <span style="color: #C76A40">0</span>
                ) + coalesce( cp.fluxo_quantidadefinal, <span style="color: #C76A40">0.0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> debigo
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __fluxo f
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> __check_point cp <span style="color: #C76A40;
            font-weight: 800;">on</span>  f.artigo_id = cp.artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> f.espaco_id = cp.espaco_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> cp.fluxo_rank = <span style="color: #C76A40">1</span>
                <span style="color: #C76A40;
            font-weight: 800;">where</span> (f.fluxo_dataregistro &gt; cp.fluxo_dataregistro)
                   <span style="color: #C76A40;
            font-weight: 800;">or</span> cp.fluxo_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                  f.artigo_id,
                  f.espaco_id,
                  cp.fluxo_quantidadefinal
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  s.espaco_id,
                  s.artigo_id,
                  s.credito - s.debigo <span style="color: #C76A40;
            font-weight: 800;">as</span> stock
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __sumary s
            ;
          $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface sets_atividade {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.sets_atividade(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$ 
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**doc
            args := {
              _user_uid uuid,
              _workspace_uid uuid,
              _operacao_description
              atividade_title character varying not null,
              atividade_description character varying default null null,
              atividade_referer jsonb default null,
              atividade_props jsonb not null default jsonb_build_object(),
              atividade_tatividade_id int not null,
            }
           doc\*\/</span>

          _user_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_user_uid&#x27;</span>;
          _workspace_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_workspace_uid&#x27;</span>;
          _branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( _user_uid, _workspace_uid );
          _operacao_description <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lib.str_normalize(upper(args-&gt;&gt;<span style="color: #4d99bf">&#x27;_operacao_description&#x27;</span>));
          _atividadeoperacao tweeks.atividadeoperacao;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _trunk <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;00000000-0000-0000-0000-000000000001&#x27;</span>::<span style="color: #C76A40">uuid</span>;
          _atividade tweeks.atividade;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _branch <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> _workspace_uid = _trunk <span style="color: #C76A40;
            font-weight: 800;">then</span> 
            _branch := _trunk;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _branch <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Não pode criar a ativadade, branch não foi definido&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _atividade := jsonb_populate_record( _atividade, args );
          
          <span style="color: #C76A40;
            font-weight: 800;">select</span> *
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.atividadeoperacao at 
            <span style="color: #C76A40;
            font-weight: 800;">where</span> at.atividadeoperacao_description = _operacao_description
              <span style="color: #C76A40;
            font-weight: 800;">and</span> at._branch_uid  = _branch
            <span style="color: #C76A40;
            font-weight: 800;">into</span> _atividadeoperacao
          ;
          
          <span style="color: #888">-- Criar o grupo de atividade se não existir</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _atividadeoperacao.atividadeoperacao_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.atividadeoperacao(
              atividadeoperacao_description,
              atividadeoperacao_user_id,
              _branch_uid        
            ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
              _operacao_description,
              _user_uid,
              _branch
            ) <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _atividadeoperacao;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- Criar atividade</span>
          _atividade.atividade_atividadeoperacao_id := _atividadeoperacao.atividadeoperacao_uid;
          <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _atividade
            <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets( _atividade )
          ;
          
          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;atividade&#x27;</span>, _atividade  
            )
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos__calc_imposto {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos__calc_imposto(arg_artigo_id <span style="color: #C76A40">uuid</span>, montante <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, args <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(venda_imposto <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, venda_impostoadicionar <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, venda_impostoretirar <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, venda_montantesemimposto <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, venda_montantecomimposto <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, impostos <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _simple tweeks.impostovenda;
          _changes <span style="color: #C76A40">record</span>;
          _data <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #888">\/\*_const := map.constant();
          _simple.impostovenda_espaco_auth := args-&gt;&gt;&#x27;arg_espaco_auth&#x27;;
          _simple.impostovenda_colaborador_id := args-&gt;&gt;&#x27;arg_colaborador_id&#x27;;
          _simple.impostovenda_venda_id := args-&gt;&gt;&#x27;arg_venda_id&#x27;;
          with __imposto as (
            select
                i.imposto_percentagem,
                i.imposto_valor,
                ti.tipoimposto_valor,
                ti.tipoimposto_percentagem,
                i.imposto_taplicar_id as aplicar_id,
                i.imposto_taplicar_id = _const.maguita_taplicar_retirar as retirar,
                i.imposto_taplicar_id = _const.maguita_taplicar_adicionar as adicionar,
                iv.impostovenda_id,
                iv.impostovenda_valor,
                iv.impostovenda_percentagem,
                iv,
                coalesce( i.imposto_percentagem, ti.tipoimposto_percentagem ) as percentagem,
                coalesce( i.imposto_valor, ti.tipoimposto_valor ) as valor
              from tweeks.imposto i
                inner join tweeks.tipoimposto ti on i.imposto_tipoimposto_id = ti.tipoimposto_id
                left join tweeks.impostovenda iv on ti.tipoimposto_id = iv.impostovenda_tipoimposto_id
                  and iv.impostovenda_venda_id = _simple.impostovenda_venda_id
                  and iv.impostovenda_estado = _const.maguita_venda_estado_aberto
              where i.imposto_artigo_id = arg_artigo_id
                and i.imposto_estado = _const.maguita_imposto_estado_ativo
          ), __calc_value as (
            select
                ip.*,
                case
                  when ip.valor and ip.valor &gt; 0 then ip.valor
                  when ip.percentagem and ip.percentagem &gt; 0  then ( ip.percentagem / 100 ) * montante
                end as value_apply
              from __imposto ip
          ), __calc_percent as (
            select
                cv.*,
                case
                  when cv.percentagem is not null and cv.percentagem &gt; 0  then cv.percentagem
                  when cv.value_apply is not null and cv.value_apply &gt; 0 then cv.value_apply / montante * 100
                end as percent_apply
              from __calc_value cv
          ), __sync as (
            select
                c.*, &quot;returning&quot;
              from __calc_percent c
                inner join lib.sets( c.iv, replacer := jsonb_build_object(
                  &#x27;impostovenda_colaborador_id&#x27;, _simple.impostovenda_colaborador_id,
                  &#x27;impostovenda_espaco_auth&#x27;, _simple.impostovenda_espaco_auth,
                  &#x27;impostovenda_venda_id&#x27;, _simple.impostovenda_venda_id,
                  &#x27;impostovenda_valor&#x27;, c.impostovenda_valor,
                  &#x27;impostovenda_percentagem&#x27;, c.impostovenda_percentagem,
                ) || to_jsonb( _simple ) ) on true
              where true in (
                c.impostovenda_valor != c.value_apply,
                c.impostovenda_percentagem != c.percent_apply
              )
          ) select count( * ) as changes, array_agg( &quot;returning&quot; ) into _changes from __sync;
          \*\/</span>

          funct_pos__calc_imposto.venda_imposto := <span style="color: #C76A40">0</span>;
          funct_pos__calc_imposto.venda_impostoadicionar := <span style="color: #C76A40">0</span>;
          funct_pos__calc_imposto.venda_impostoretirar := <span style="color: #C76A40">0</span>;
          funct_pos__calc_imposto.venda_montantesemimposto := montante;
          funct_pos__calc_imposto.venda_montantecomimposto := montante;
          funct_pos__calc_imposto.impostos := jsonb_build_array();
          <span style="color: #C76A40;
            font-weight: 800;">return next</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_guia_data {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_guia_data(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">json</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              guia_id UUID,
              arg_colaborador_id UUID
              arg_espaco_auth UUID
            }
           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;

          _guia tweeks.guia;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _guia := jsonb_populate_record( _guia, args );
          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _guia
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.guia
            <span style="color: #C76A40;
            font-weight: 800;">where</span> guia_uid = _guia.guia_uid
              <span style="color: #C76A40;
            font-weight: 800;">and</span> _branch_uid = ___branch
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return next</span> json_build_object( <span style="color: #4d99bf">&#x27;type&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( pg_typeof( _guia )::<span style="color: #C76A40">text</span>::<span style="color: #C76A40">regclass</span> ), <span style="color: #4d99bf">&#x27;data&#x27;</span>, _guia );

          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span> __custoguia <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> ent <span style="color: #C76A40;
            font-weight: 800;">as</span> data, <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( ent.tableoid ) <span style="color: #C76A40;
            font-weight: 800;">as</span> <span style="color: #C76A40;
            font-weight: 800;">type</span>
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.custoguia ent
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ent.custoguia_guia_uid = _guia.guia_uid
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ent.custoguia_estado = _const.maguita_custoguia_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ent._branch_uid = ___branch
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_json( _e ) <span style="color: #C76A40;
            font-weight: 800;">from</span> __custoguia _e;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _guia.guia_toperacao_id = _const.maguita_toperacao_entrada <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span> __raw <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> ent.*,
                     art.artigo_id,
                     art.artigo_nome,
                     art.artigo_codigo,
                     un.unit_id,
                     un.unit_code,
                     un.unit_name,
                     <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( ent.tableoid ) <span style="color: #C76A40;
            font-weight: 800;">as</span> <span style="color: #C76A40;
            font-weight: 800;">type</span>
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.entrada ent
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> ent.entrada_artigo_id = art.artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.unit un <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_unit_id = un.unit_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ent.entrada_guia_id = _guia.guia_uid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ent.entrada_estado = _const.entrada_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ent._branch_uid = ___branch
            ), __entrada <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> to_json( r ) <span style="color: #C76A40;
            font-weight: 800;">as</span> data, r.<span style="color: #C76A40;
            font-weight: 800;">type</span>
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __raw r
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_json( _e ) <span style="color: #C76A40;
            font-weight: 800;">from</span> __entrada _e;

            <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span> __fornecedor <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> ent <span style="color: #C76A40;
            font-weight: 800;">as</span> data, <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( ent.tableoid ) <span style="color: #C76A40;
            font-weight: 800;">as</span> <span style="color: #C76A40;
            font-weight: 800;">type</span>
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.fornecedor ent
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ent._branch_uid = ___branch
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ent.fornecedor_id = _guia.guia_refuid
                <span style="color: #C76A40;
            font-weight: 800;">and</span> _guia.guia_refclass::<span style="color: #C76A40">regclass</span> = ent.TABLEOID::<span style="color: #C76A40">regclass</span>
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_json( _f ) <span style="color: #C76A40;
            font-weight: 800;">from</span> __fornecedor _f;

          elseif _guia.guia_toperacao_id = _const.maguita_toperacao_venda <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span> __venda <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> ent <span style="color: #C76A40;
            font-weight: 800;">as</span> data, <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( <span style="color: #4d99bf">&#x27;tweeks.conta&#x27;</span>::<span style="color: #C76A40">regclass</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> <span style="color: #C76A40;
            font-weight: 800;">type</span>
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.funct_pos_load_conta_data( args ) ent
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_json( _e ) <span style="color: #C76A40;
            font-weight: 800;">from</span> __venda _e;

          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_tpaga {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_tpaga(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(tpaga_id <span style="color: #C76A40">smallint</span>, tpaga_designacao <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #888">-- Essa função lista os tipos de pagamento</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.tpaga t <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> t.tpaga_designacao <span style="color: #C76A40;
            font-weight: 800;">asc</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_venda {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks._get_venda(arg_venda_id <span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> venda
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #888">-- Essa função devolve uma instancia de venda</span>
        <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.venda ve <span style="color: #C76A40;
            font-weight: 800;">where</span> ve.venda_id = arg_venda_id;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __precario {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__precario(<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(precario_custo <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, precario_quantidade <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">select</span> (<span style="color: #1f7199">$1</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;precario_custo&#x27;</span>)::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>,
                 (<span style="color: #1f7199">$1</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;precario_quantidade&#x27;</span>)::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_serie_distribuicao {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_serie_distribuicao(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_tserie_id <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;tserie_id&#x27;</span>;
          ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _espaco tweeks.espaco;
          _tserie tweeks.tserie;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _tserie
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.tserie ts
            <span style="color: #C76A40;
            font-weight: 800;">where</span> ts.tserie_id = arg_tserie_id
          ;

          <span style="color: #888">-- Obter o espaço superior que pode gerar numero de seire</span>
          <span style="color: #C76A40;
            font-weight: 800;">with</span> <span style="color: #C76A40;
            font-weight: 800;">recursive</span> __espaco <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> e.*, e.espaco_gerarfatura <span style="color: #C76A40;
            font-weight: 800;">as</span> __generate_serie
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.espaco e
            <span style="color: #C76A40;
            font-weight: 800;">where</span> e.espaco_id =arg_espaco_auth
            <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> w.*, w.espaco_gerarfatura
            <span style="color: #C76A40;
            font-weight: 800;">from</span> __espaco _e
                   <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco w <span style="color: #C76A40;
            font-weight: 800;">on</span> _e.espaco_espaco_id = w.espaco_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _e.__generate_serie
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _espaco <span style="color: #C76A40;
            font-weight: 800;">from</span> __espaco __e
            <span style="color: #C76A40;
            font-weight: 800;">where</span> __e.__generate_serie
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __autorizacao <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  s.serie_id,
                  s.serie_numero,
                  s.serie_designacao,
                  s.serie_sequencia,
                  s.serie_numcertificacao,
                  s.serie_quantidade,
                  a.autorizacao_uid,
                  a.autorizacao_ano,
                  ts.tserie_id,
                  ts.tserie_financa,
                  ts.tserie_desc,
                  ts.tserie_numlimit,
                  ts.tserie_seqlimit
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.serie s
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.autorizacao a <span style="color: #C76A40;
            font-weight: 800;">on</span> s.serie_autorizacao_uid = a.autorizacao_uid
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.tserie ts <span style="color: #C76A40;
            font-weight: 800;">on</span> s.serie_tserie_id = ts.tserie_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> s.serie_autorizacao_uid = a.autorizacao_uid
                <span style="color: #C76A40;
            font-weight: 800;">and</span> s._branch_uid = ___branch
                <span style="color: #C76A40;
            font-weight: 800;">and</span> a._branch_uid = ___branch
                <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_espaco_id = _espaco.espaco_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_tserie_id = arg_tserie_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_estado = _const.maguita_serie_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> a.autorizacao_estado = _const.maguita_autorizacao_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> a.autorizacao_ano = extract( years <span style="color: #C76A40;
            font-weight: 800;">from</span> now() )::<span style="color: #C76A40">int</span>
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _a )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __autorizacao _a
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_conta_documento {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_conta_documento(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**doc
            args :={
              arg_colaborador_id: UUID
              arg_espaco_auth: UUID
              _tserie_id: *INT2
              _date_start: DATE
              _date_end: DATE
              _colaborator_id: UID
              _posto_id: UUID
              _artigo_id: UUID
              _client_id: UUID
              _client_nif: character varying
              _fornecedor_id: UUID
              _documento: character varying
            }
           doc\*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          _tserie_id <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_tserie_id&#x27;</span>;
          
          _date_start <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_date_start&#x27;</span>;
          _date_end <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_date_end&#x27;</span>;
          _colaborator_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_colaborator_id&#x27;</span>;
          _posto_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_posto_id&#x27;</span>;
          _artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_artigo_id&#x27;</span>;
          _client_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_client_id&#x27;</span>;
          _fornecedor_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_fornecedor_id&#x27;</span>;
          _documento <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_documento&#x27;</span>;
          _docfilter <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;
          _client_nif <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_client_nif&#x27;</span>;
          _client_nif_filter  <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _documento <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _docfilter := format( <span style="color: #4d99bf">&#x27;%%%s%%&#x27;</span>, trim( upper( _documento ) ) );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _client_nif <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _client_nif_filter := format( <span style="color: #4d99bf">&#x27;%%%s%%&#x27;</span>, trim( lower( _client_nif ) ) );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _tserie_id  = _const.maguita_tserie_guiaentrada <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return query</span>
                <span style="color: #C76A40;
            font-weight: 800;">with</span> __guia_entrada <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                  <span style="color: #C76A40;
            font-weight: 800;">select</span>
                      g.guia_uid,
                      g.guia_date,
                      g.guia_dataoperacao,
                      g.guia_numero,
                      g.guia_observacao,
                      g.guia_documentoperacao,
                      f.fornecedor_id,
                      f.fornecedor_nome,
                      f.fornecedor_code,
                      e.espaco_id,
                      e.espaco_nome,
                      col.colaborador_id,
                      col.colaborador_nome,
                      col.colaborador_apelido,
                      _tserie_id <span style="color: #C76A40;
            font-weight: 800;">as</span> tserie_id,
                      sum( entr.entrada_custounitario  * entr.entrada_quantidade ) <span style="color: #C76A40;
            font-weight: 800;">as</span> guia_montante
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.guia g 
                      <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.fornecedor f <span style="color: #C76A40;
            font-weight: 800;">on</span> (g.guia_refs-&gt;<span style="color: #4d99bf">&#x27;fornecedor&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;fornecedor_id&#x27;</span>)::<span style="color: #C76A40">uuid</span> = f.fornecedor_id
                      <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> (g.guia_refs-&gt;<span style="color: #4d99bf">&#x27;destino&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;espaco_id&#x27;</span>)::<span style="color: #C76A40">uuid</span> = e.espaco_id
                      <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.colaborador col <span style="color: #C76A40;
            font-weight: 800;">on</span> g.guia_colaborador_id = col.colaborador_id
                      <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.entrada entr <span style="color: #C76A40;
            font-weight: 800;">on</span> entr.entrada_guia_id = g.guia_uid
                    <span style="color: #C76A40;
            font-weight: 800;">where</span> g._branch_uid = ___branch
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> g.guia_tguia_id = _const.maguita_tguia_entrada
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> g.guia_dataoperacao &gt;= coalesce( _date_start, g.guia_dataoperacao )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> g.guia_dataoperacao &lt;= coalesce( _date_end, g.guia_dataoperacao )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> g.guia_colaborador_id = coalesce( _colaborator_id, g.guia_colaborador_id )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> f.fornecedor_id = coalesce( _fornecedor_id, f.fornecedor_id )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> (
                        upper( guia_numero ) <span style="color: #C76A40;
            font-weight: 800;">like</span> coalesce( _docfilter, guia_numero )                
                        <span style="color: #C76A40;
            font-weight: 800;">or</span> upper( guia_documentoperacao ) <span style="color: #C76A40;
            font-weight: 800;">like</span> coalesce( _docfilter, guia_documentoperacao )
                      )
                    <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                      g.guia_uid,
                      f.fornecedor_id,
                      e.espaco_id,
                      col.colaborador_id
                    <span style="color: #C76A40;
            font-weight: 800;">having</span> count( * ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> entr.entrada_artigo_id = coalesce( _artigo_id, entr.entrada_artigo_id ) ) &gt; <span style="color: #C76A40">0</span>
                ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _gs )
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> __guia_entrada _gs
                    <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> _gs.guia_date <span style="color: #C76A40;
            font-weight: 800;">desc</span>
            ;
            <span style="color: #C76A40;
            font-weight: 800;">return</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
              
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _tserie_id <span style="color: #C76A40;
            font-weight: 800;">in</span> (
            _const.maguita_tserie_fatura, 
            _const.maguita_tserie_faturarecibo, 
            _const.maguita_tserie_faturasimplificada, 
            _const.maguita_tserie_notadebito, 
            _const.maguita_tserie_notacredito
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return query</span> 
              <span style="color: #C76A40;
            font-weight: 800;">with</span> __conta_documentos <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    ct.conta_id,
                    ct.conta_numerofatura,
                    ct.conta_data,
                    ct.conta_montante,
                    ct.conta_numero,
                    ct.conta_dataregistro,
                    ct.conta_observacao,
                    coalesce( ctorg.conta_numerofatura, ct.conta_docorigin ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_docorigin,
                    coalesce( ctorg.conta_data, ct.conta_datedocorigin ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_datedocorigin,
                    coalesce( c.cliente_titular, ct.conta_titular ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_titular,
                    coalesce( c.cliente_nif, ct.conta_titularnif) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_titularnif,
                    c.cliente_id,
                    col.colaborador_id,
                    col.colaborador_nome,
                    col.colaborador_apelido,
                    p.posto_id,
                    p.posto_designacao,
                    e.espaco_id,
                    e.espaco_nome,
                    ct.conta_tserie_id <span style="color: #C76A40;
            font-weight: 800;">as</span> tserie_id,
                    cam.cambio_id,
                    cam.cambio_data,
                    cam.cambio_taxa,
                    cam.cambio_estado,
                    cur.currency_id,
                    cur.currency_code,
                    cur.currency_name,
                    cur.currency_symbol
                    
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.venda ve <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_id = ve.venda_conta_id
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_estado = _const.maguita_venda_estado_fechado
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.colaborador col <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_colaborador_fecho = col.colaborador_id
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.posto p <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_posto_fecho = p.posto_id
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_espaco_auth = e.espaco_id
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.cliente c <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_cliente_id = c.cliente_id
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.conta ctorg <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_conta_docorigin = ctorg.conta_id
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> geoinfo.currency cur <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_currency_id = cur.currency_id
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.cambio cam <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_cambio_uid = cam.cambio_id
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> cur.currency_id = cam.cambio_currency_id
                    
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> ct._branch_uid = ___branch
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_tserie_id = _tserie_id
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_data &gt;= coalesce( _date_start, ct.conta_data )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_data &lt;= coalesce( _date_end, ct.conta_data )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_colaborador_fecho = coalesce( _colaborator_id, ct.conta_colaborador_fecho )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_posto_fecho = coalesce( _posto_id, ct.conta_posto_fecho )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_estado = _const.maguita_conta_estado_fechado
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_cliente_id = coalesce( _client_id, ct.conta_cliente_id )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> upper( ct.conta_numerofatura ) <span style="color: #C76A40;
            font-weight: 800;">like</span> coalesce( _docfilter, ct.conta_numerofatura )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> lower( coalesce( ct.conta_titularnif, c.cliente_nif, <span style="color: #4d99bf">&#x27;999999999&#x27;</span> ) ) <span style="color: #C76A40;
            font-weight: 800;">like</span> coalesce( _client_nif_filter, lower( coalesce( ct.conta_titularnif, c.cliente_nif, <span style="color: #4d99bf">&#x27;999999999&#x27;</span> )) )
                  <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ct.conta_id,
                    col.colaborador_id,
                    c.cliente_id,
                    ctorg.conta_id,
                    p.posto_id,
                    e.espaco_id,
                    cam.cambio_id,
                    cur.currency_id
                  <span style="color: #C76A40;
            font-weight: 800;">having</span> count( * ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> ve.venda_artigo_id = coalesce( _artigo_id, ve.venda_artigo_id ) ) &gt; <span style="color: #C76A40">0</span>
              ) <span style="color: #C76A40;
            font-weight: 800;">select</span>  to_jsonb( _cd )
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __conta_documentos _cd
                  <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> _cd.conta_dataregistro <span style="color: #C76A40;
            font-weight: 800;">desc</span>
            ;
            
            <span style="color: #C76A40;
            font-weight: 800;">return</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _tserie_id <span style="color: #C76A40;
            font-weight: 800;">in</span> (
            _const.maguita_tserie_faturaproforma
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return query</span> 
              <span style="color: #C76A40;
            font-weight: 800;">with</span> __conta_documentos <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    ct.conta_id,
                    ct.conta_numerofatura,
                    ct.conta_data,
                    ct.conta_montante,
                    ct.conta_numero,
                    ct.conta_dataregistro,
                    ct.conta_observacao,
                    coalesce( ctorg.conta_numerofatura, ct.conta_docorigin ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_docorigin,
                    coalesce( ctorg.conta_data, ct.conta_datedocorigin ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_datedocorigin,
                    coalesce( c.cliente_titular, ct.conta_titular ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_titular,
                    coalesce( c.cliente_nif, ct.conta_titularnif) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_titularnif,
                    c.cliente_id,
                    col.colaborador_id,
                    col.colaborador_nome,
                    col.colaborador_apelido,
                    p.posto_id,
                    p.posto_designacao,
                    e.espaco_id,
                    e.espaco_nome,
                    ct.conta_tserie_id <span style="color: #C76A40;
            font-weight: 800;">as</span> tserie_id,
                    ct.conta_proforma,
                    ct.conta_proformaextras,
                    ct.conta_proformavencimento
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.venda ve <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_id = ve.venda_conta_id
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.colaborador col <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_colaborador_fecho = col.colaborador_id
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.posto p <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_posto_fecho = p.posto_id
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_espaco_auth = e.espaco_id
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.cliente c <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_cliente_id = c.cliente_id
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.conta ctorg <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_conta_docorigin = ctorg.conta_id
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> ct._branch_uid = ___branch
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_tserie_id = _tserie_id
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_data &gt;= coalesce( _date_start, ct.conta_data )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_data &lt;= coalesce( _date_end, ct.conta_data )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_colaborador_fecho = coalesce( _colaborator_id, ct.conta_colaborador_fecho )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_posto_fecho = coalesce( _posto_id, ct.conta_posto_fecho )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_proforma
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_cliente_id = coalesce( _client_id, ct.conta_cliente_id )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> upper( ct.conta_numerofatura ) <span style="color: #C76A40;
            font-weight: 800;">like</span> coalesce( _docfilter, ct.conta_numerofatura )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> lower( coalesce( ct.conta_titularnif, c.cliente_nif, <span style="color: #4d99bf">&#x27;999999999&#x27;</span> ) ) <span style="color: #C76A40;
            font-weight: 800;">like</span> coalesce( _client_nif_filter, lower( coalesce( ct.conta_titularnif, c.cliente_nif, <span style="color: #4d99bf">&#x27;999999999&#x27;</span> )) )
                  <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ct.conta_id,
                    col.colaborador_id,
                    c.cliente_id,
                    ctorg.conta_id,
                    p.posto_id,
                    e.espaco_id
                  <span style="color: #C76A40;
            font-weight: 800;">having</span> count( * ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> ve.venda_artigo_id = coalesce( _artigo_id, ve.venda_artigo_id ) ) &gt; <span style="color: #C76A40">0</span>
              ) <span style="color: #C76A40;
            font-weight: 800;">select</span>  to_jsonb( _cd )
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __conta_documentos _cd
                <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> _cd.conta_dataregistro <span style="color: #C76A40;
            font-weight: 800;">desc</span>
            ;
            
            <span style="color: #C76A40;
            font-weight: 800;">return</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _tserie_id <span style="color: #C76A40;
            font-weight: 800;">in</span> (
            _const.maguita_tserie_guiasaida
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return query</span> 
              <span style="color: #C76A40;
            font-weight: 800;">with</span> __guia_saida <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    ct.conta_id,
                    ct.conta_numerofatura,
                    ct.conta_data,
                    ct.conta_montante,
                    ct.conta_numero,
                    ct.conta_dataregistro,
                    ct.conta_observacao,
                    coalesce( ctorg.conta_numerofatura, ct.conta_docorigin ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_docorigin,
                    coalesce( ctorg.conta_data, ct.conta_datedocorigin ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_datedocorigin,
                    coalesce( c.cliente_titular, ct.conta_titular ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_titular,
                    coalesce( c.cliente_nif, ct.conta_titularnif) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_titularnif,

                    c.cliente_id,
                    col.colaborador_id,
                    col.colaborador_nome,
                    col.colaborador_apelido,
                    p.posto_id,
                    p.posto_designacao,
                    e.espaco_id,
                    e.espaco_nome,
                    ct.conta_tserie_id <span style="color: #C76A40;
            font-weight: 800;">as</span> tserie_id,
                    ct.conta_proforma,
                    ct.conta_proformaextras,
                    ct.conta_proformavencimento
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.venda ve <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_id = ve.venda_conta_id
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_estado <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.maguita_venda_estado_fechado, _const.maguita_venda_estado_aberto )
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.colaborador col <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_colaborador_fecho = col.colaborador_id
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.posto p <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_posto_fecho = p.posto_id
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_espaco_auth = e.espaco_id
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.cliente c <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_cliente_id = c.cliente_id
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.conta ctorg <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_conta_docorigin = ctorg.conta_id
                  <span style="color: #C76A40;
            font-weight: 800;">where</span>
                    ct._branch_uid = ___branch
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_tserie_id = _tserie_id
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_data &gt;= coalesce( _date_start, ct.conta_data )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_data &lt;= coalesce( _date_end, ct.conta_data )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_colaborador_fecho = coalesce( _colaborator_id, ct.conta_colaborador_fecho )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_posto_fecho = coalesce( _posto_id, ct.conta_posto_fecho )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_estado <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.maguita_conta_estado_fechado, _const.maguita_conta_estado_aberto )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_cliente_id = coalesce( _client_id, ct.conta_cliente_id )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> upper( ct.conta_numerofatura ) <span style="color: #C76A40;
            font-weight: 800;">like</span> coalesce( _docfilter, ct.conta_numerofatura )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> lower( coalesce( ct.conta_titularnif, c.cliente_nif, <span style="color: #4d99bf">&#x27;999999999&#x27;</span> ) ) <span style="color: #C76A40;
            font-weight: 800;">like</span> coalesce( _client_nif_filter, lower( coalesce( ct.conta_titularnif, c.cliente_nif, <span style="color: #4d99bf">&#x27;999999999&#x27;</span> )) )
                  <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ct.conta_id,
                    col.colaborador_id,
                    c.cliente_id,
                    ctorg.conta_id,
                    p.posto_id,
                    e.espaco_id
                  <span style="color: #C76A40;
            font-weight: 800;">having</span> count( * ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> ve.venda_artigo_id = coalesce( _artigo_id, ve.venda_artigo_id ) ) &gt; <span style="color: #C76A40">0</span>
              ) <span style="color: #C76A40;
            font-weight: 800;">select</span>  to_jsonb( _cd )
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __guia_saida _cd
                  <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> _cd.conta_dataregistro <span style="color: #C76A40;
            font-weight: 800;">desc</span>
                ;
            <span style="color: #C76A40;
            font-weight: 800;">return</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _tserie_id = _const.maguita_tserie_recibo <span style="color: #C76A40;
            font-weight: 800;">then</span> 
              <span style="color: #C76A40;
            font-weight: 800;">return query</span> 
                <span style="color: #C76A40;
            font-weight: 800;">with</span> __recibo <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                  <span style="color: #C76A40;
            font-weight: 800;">select</span>
                      de.deposito_id,
                      de.deposito_montante,
                      de.deposito_data,
                      de.deposito_montantefinal,
                      de.deposito_montantetroco,
                      de.deposito_montantemoeda,
                      de.deposito_documento,
                      de.deposito_docref,
                      de.deposito_observacao,
                      de.deposito_taxacambio,
                      de.deposito_dataregistro,
                      de.deposito_referencia,
                      cu.currency_id,
                      cu.currency_code,
                      cu.currency_name,
                      cli.cliente_id,
                      cli.cliente_titular,
                      cli.cliente_nif,
                      cli.cliente_metadata,
                      cli.cliente_mail,
                      cli.cliente_contactos,
                      cli.cliente_code,
                      cli.cliente_documento,
                      tdoc.tdocumento_id,
                      tdoc.tdocumento_nome,
                      col.colaborador_id,
                      col.colaborador_nome,
                      col.colaborador_apelido,
                      cx.caixa_id,
                      cx.caixa_code,
                      po.posto_id,
                      po.posto_designacao,
                      tp.tpaga_id,
                      tp.tpaga_designacao,
                      ts.tserie_id,
                      ts.tserie_code,
                      ts.tserie_desc
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.deposito de
                      <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> geoinfo.currency cu <span style="color: #C76A40;
            font-weight: 800;">on</span> de.deposito_currency_id = cu.currency_id
                      <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.cliente cli <span style="color: #C76A40;
            font-weight: 800;">on</span> cli.cliente_id = de.deposito_cliente_id
                      
                      <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.colaborador col <span style="color: #C76A40;
            font-weight: 800;">on</span> col.colaborador_id = de.deposito_colaborador_id
                      <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.tpaga tp <span style="color: #C76A40;
            font-weight: 800;">on</span> de.deposito_tpaga_id = tp.tpaga_id
                      <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.serie se <span style="color: #C76A40;
            font-weight: 800;">on</span> de.deposito_serie_id = se.serie_id
                      <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.tserie ts <span style="color: #C76A40;
            font-weight: 800;">on</span> se.serie_tserie_id = ts.tserie_id
                      <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.tdocuemto tdoc <span style="color: #C76A40;
            font-weight: 800;">on</span> cli.cliente_tdocument_id = tdoc.tdocumento_id
                      <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.caixa cx <span style="color: #C76A40;
            font-weight: 800;">on</span> de.deposito_caixa_id = cx.caixa_id
                      <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.posto po <span style="color: #C76A40;
            font-weight: 800;">on</span> de.deposito_posto_id = po.posto_id

                    <span style="color: #C76A40;
            font-weight: 800;">where</span> de._branch_uid = ___branch
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> de.deposito_data &gt;= coalesce( _date_start, de.deposito_data )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> de.deposito_data &lt;= coalesce( _date_end, de.deposito_data )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> de.deposito_colaborador_id = coalesce( _colaborator_id, de.deposito_colaborador_id )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( de.deposito_posto_id, <span style="color: #4d99bf">&#x27;00000000-0000-0000-0000-000000000001&#x27;</span>) = coalesce( _posto_id, de.deposito_posto_id, <span style="color: #4d99bf">&#x27;00000000-0000-0000-0000-000000000001&#x27;</span> )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> de.deposito_estado <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.maguita_deposito_estado_ativo )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> de.deposito_cliente_id = coalesce( _client_id, de.deposito_cliente_id )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> ts.tserie_id <span style="color: #C76A40;
            font-weight: 800;">in</span> (
                        _const.maguita_tserie_recibo,
                        _const.maguita_tserie_faturarecibo
                      )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> (
                        upper( de.deposito_documento ) <span style="color: #C76A40;
            font-weight: 800;">like</span> coalesce( _docfilter, de.deposito_documento )
                        <span style="color: #C76A40;
            font-weight: 800;">or</span> upper( de.deposito_docref ) <span style="color: #C76A40;
            font-weight: 800;">like</span> coalesce( _docfilter, de.deposito_docref )
                      )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> lower( coalesce( cli.cliente_nif, <span style="color: #4d99bf">&#x27;999999999&#x27;</span> ) ) <span style="color: #C76A40;
            font-weight: 800;">like</span> coalesce( _client_nif_filter, lower( coalesce( cli.cliente_nif, <span style="color: #4d99bf">&#x27;999999999&#x27;</span> )) )
                ) <span style="color: #C76A40;
            font-weight: 800;">select</span> 
                      to_jsonb( _rc )
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> __recibo _rc
                    <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> _rc.deposito_dataregistro <span style="color: #C76A40;
            font-weight: 800;">desc</span>
              ;
              <span style="color: #C76A40;
            font-weight: 800;">return</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __generate_cliente_code {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__generate_cliente_code(colaborador <span style="color: #C76A40">uuid</span>, espaco <span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          code <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;
          repeate <span style="color: #C76A40">integer</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40">0</span>;
          codeLen <span style="color: #C76A40">integer</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40">4</span>;
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( colaborador, espaco );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _cluster := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local();

          <span style="color: #C76A40;
            font-weight: 800;">while</span> code <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>
              code := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.next( <span style="color: #4d99bf">&#x27;client/seq&#x27;</span>, lpad := codeLen, lpad_char := <span style="color: #4d99bf">&#x27;0&#x27;</span>, sub := _branch::<span style="color: #C76A40">text</span>  );
            <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
                <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.cliente c
                  <span style="color: #C76A40;
            font-weight: 800;">where</span>  code = c.cliente_code
            ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
              code := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            repeate := repeate +<span style="color: #C76A40">1</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
          <span style="color: #C76A40;
            font-weight: 800;">return</span> code;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __tg_fluxo_on_retalho {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__tg_fluxo_on_retalho()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _new tweeks.retalho;
          _fluxo tweeks.fluxo;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_replication() <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _new := <span style="color: #397300">new</span>;

          _fluxo.fluxo_toperacao_id := _const.maguita_toperacao_retalho;
          _fluxo.fluxo_documento := _new.retalho_codigo;
          _fluxo.fluxo_data := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          _fluxo.fluxo_referencia := lib.sets_ref(<span style="color: #397300">new</span> );
          _fluxo.fluxo_regclass := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( pg_typeof( <span style="color: #397300">new</span> )::<span style="color: #C76A40">text</span>::<span style="color: #C76A40">regclass</span> );

          _fluxo.fluxo_refuid := _new.retalho_id;
          _fluxo.fluxo_quantidadeout := _new.retalho_quantidade;
          _fluxo.fluxo_quantidadein := _new.retalho_total;

          _fluxo.fluxo_artigo_out := _new.retalho_artigo_composto;
          _fluxo.fluxo_artigo_in := _new.retalho_artigo_base;

          _fluxo.fluxo_espaco_out := _new.retalho_espaco_auth;
          _fluxo.fluxo_espaco_in  := _new.retalho_espaco_auth;

          _fluxo.fluxo_espaco_auth := _new.retalho_espaco_auth;
          _fluxo.fluxo_colaborador_id := _new.retalho_colaborador_id;

          <span style="color: #C76A40;
            font-weight: 800;">perform</span> lib.sets_in( _fluxo );
          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_autorizacao_closeyear {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_autorizacao_closeyear(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            {
              arg_colaborador_id: UID
              arg_espaco_auth: UID
              autorizacao_uid: UID
            }
           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_branch_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          _autorizacao tweeks.autorizacao;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _autorizacao := jsonb_populate_record( _autorizacao, args );
          _autorizacao := tweeks.__get_autorizacao( _autorizacao.autorizacao_uid );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _autorizacao.autorizacao_estado != _const.maguita_autorizacao_estado_ativo <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;A autorizacao selecionada para fecho já esta encerada!&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.autorizacao
            <span style="color: #C76A40;
            font-weight: 800;">set</span> autorizacao_colaborador_atualizacao = arg_colaborador_id,
                autorizacao_dataatualizacao = now(),
                autorizacao_estado = _const.autenticacao_estado_fechado
            <span style="color: #C76A40;
            font-weight: 800;">where</span> autorizacao_uid = _autorizacao.autorizacao_uid
            <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _autorizacao
          ;

          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.serie
            <span style="color: #C76A40;
            font-weight: 800;">set</span> serie_dataatualizacao = now(),
                serie_colaborador_atualizacao = arg_colaborador_id,
                serie_estado = _const.maguita_serie_estado_fechado,
                serie_fechoautorizacao = <span style="color: #C76A40;
            font-weight: 800;">true</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> serie_estado = _const.maguita_serie_estado_ativo
              <span style="color: #C76A40;
            font-weight: 800;">and</span> serie_autorizacao_uid = _autorizacao.autorizacao_uid
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true( jsonb_build_object(
            <span style="color: #4d99bf">&#x27;autorizacao&#x27;</span>, _autorizacao
          ));
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface ___override_auth_funct_autenticacao {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.___override_auth_funct_autenticacao(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa funcao serve para autenticar um colaborador
            no final da autenticacao sera devolvido as informacoes basica do colaborador
            args :{
              arg_auth_name: id | nif | email
              arg_auth_value: VALUE_OF_AUTH_NAME,
              arg_auth_method: senha | pin,
              arg_auth_key: VALUE_OF_AUTH_METHOD
            }
         \*\/</span>
          _auth <span style="color: #C76A40">record</span>;
          espacos <span style="color: #C76A40">jsonb</span>;
          ___branch tweeks.branch;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _auth
            <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.funct_autenticacao( args );

          <span style="color: #888">-- Quando o colaborador tiver accesso</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _auth.colaborador_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            ___branch := tweeks.__get_branch( tweeks.__branch_uid(
              _auth.colaborador_id
            ));

            <span style="color: #C76A40;
            font-weight: 800;">if</span> ___branch.branch_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              _auth.acesso := to_jsonb(<span style="color: #C76A40;
            font-weight: 800;">array</span>(
                <span style="color: #C76A40;
            font-weight: 800;">select</span> e.grants
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.funct_load_grants(jsonb_build_object(
                    <span style="color: #4d99bf">&#x27;menus&#x27;</span>, ___branch.branch_grants-&gt;<span style="color: #4d99bf">&#x27;menu&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;colaborador_id&#x27;</span>, _auth.colaborador_id
                  )) e( grants )
              ));
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">return query</span>
              <span style="color: #C76A40;
            font-weight: 800;">with</span> __trabaha <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                  <span style="color: #C76A40;
            font-weight: 800;">select</span> array_agg( to_jsonb( tr ) || to_jsonb( es ) ) <span style="color: #C76A40;
            font-weight: 800;">as</span> espaco_trabalha
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.trabalha tr
                      <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco es <span style="color: #C76A40;
            font-weight: 800;">on</span> tr.trabalha_espaco_destino = es.espaco_id
                        <span style="color: #C76A40;
            font-weight: 800;">and</span> tr.trabalha_colaborador_proprietario = _auth.colaborador_id
                    <span style="color: #C76A40;
            font-weight: 800;">where</span> tr.trabalha_estado = _const.maguita_trabalha_estado_ativo
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> es.espaco_estado = _const.maguita_espaco_estado_ativo
              ) <span style="color: #C76A40;
            font-weight: 800;">select</span> jsonb_build_object(
                    <span style="color: #4d99bf">&#x27;auth&#x27;</span>, _auth,
                    <span style="color: #4d99bf">&#x27;espaco_trabalha&#x27;</span>, tr.espaco_trabalha
                  )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __trabaha tr
              ;

            <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span>
              __clusters <span style="color: #C76A40;
            font-weight: 800;">as</span> ( <span style="color: #C76A40;
            font-weight: 800;">select</span> c.cluster_uid, c.cluster_identifier, c.cluster_name, c.cluster_path  <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span> c ),
              __branch <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                      b.branch_uid,
                      b.branch_path,
                      b.branch_clusters,
                      b.branch_main_user,
                      b.branch_main_workspace,
                      b.branch_grants,
                      b.branch_name,
                      b.branch_licence,
                      b.branch_state,
                      b.branch_date,
                      tb.tbranch_id,
                      tb.tbranch_configs,
                      tb.tbranch_name,
                      e.espaco_id,
                      e.espaco_nome,
                      e.espaco_nivel,
                      e.espaco_codigo,
                      cmain.colaborador_id,
                      cmain.colaborador_nome,
                      cmain.colaborador_apelido,
                      cmain.colaborador_email,
                      cmain.colaborador_estado,
                      cmain.colaborador_accesso,
                      cmain.colaborador_tipo,
                      array_agg( _clus ) <span style="color: #C76A40;
            font-weight: 800;">as</span> clusters

                  <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.colaborador cauth
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.branch b <span style="color: #C76A40;
            font-weight: 800;">on</span> cauth.colaborador_branch_uid = b.branch_uid
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.tbranch tb <span style="color: #C76A40;
            font-weight: 800;">on</span> b.branch_tbranch_id = tb.tbranch_id
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> b.branch_uid = e.espaco_branch_uid
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> e.espaco_id = b.branch_main_workspace
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.colaborador cmain <span style="color: #C76A40;
            font-weight: 800;">on</span> b.branch_uid = cmain.colaborador_branch_uid
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> cmain.colaborador_id = b.branch_main_user
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> __clusters _clus <span style="color: #C76A40;
            font-weight: 800;">on</span> _clus.cluster_path = b.branch_path
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> ( b.branch_clusters <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> _clus.cluster_identifier = <span style="color: #C76A40;
            font-weight: 800;">any</span>( b.branch_clusters ) )
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> cauth.colaborador_id = _auth.colaborador_id
                  <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                    cauth.colaborador_id,
                    b.branch_uid,
                    e.espaco_id,
                    cmain.colaborador_id,
                    tb.tbranch_id
              ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _b )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __branch _b;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_artigo_exports {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_artigo_exports(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**doc
            arg_espaco_auth
            arg_colaborador_uid
            _espaco_id:[]
           doc\*\/</span>
          
          _arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          _arg_colaborador_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_uid&#x27;</span>;
          
          __branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( _arg_colaborador_uid, _arg_espaco_auth );
          _child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens_static( _arg_espaco_auth );

          _espaco <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> e.text::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements_text( args-&gt;<span style="color: #4d99bf">&#x27;_espaco_id&#x27;</span> ) e ( <span style="color: #C76A40">text</span> ));
          _product <span style="color: #C76A40">record</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">for</span> _product <span style="color: #C76A40;
            font-weight: 800;">in</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __imposto <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> 
                  io.imposto_artigo_id <span style="color: #C76A40;
            font-weight: 800;">as</span> _artigo_uid,
                  io.imposto_percentagem,
                  io.imposto_valor,
                  io.imposto_id,
                  tp.tipoimposto_id,
                  tp.tipoimposto_nome,
                  tp.tipoimposto_percentagem,
                  tp.tipoimposto_valor,
                  tp.tipoimposto_codigo,
                  ta.taxa_id,
                  ta.taxa_percentagem,
                  ta.taxa_taxa,
                  ta.taxa_estado,
                  tap.taplicar_id,
                  tap.taplicar_descricao
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.imposto io
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.tipoimposto tp <span style="color: #C76A40;
            font-weight: 800;">on</span> io.imposto_tipoimposto_id = tp.tipoimposto_id
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.taxa ta <span style="color: #C76A40;
            font-weight: 800;">on</span> tp.tipoimposto_id = ta.taxa_tipoimposto_id
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.taplicar tap <span style="color: #C76A40;
            font-weight: 800;">on</span> io.imposto_taplicar_id = tap.taplicar_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> io.imposto_estado = <span style="color: #C76A40">1</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> tp.tipoimposto_estado = <span style="color: #C76A40">1</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ta._branch_uid = __branch
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> tp._branch_uid = __branch
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> io._branch_uid = __branch
            ), __ean <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  ean_artigo_id <span style="color: #C76A40;
            font-weight: 800;">as</span> _artigo_uid, 
                  e.ean_id,
                  ean_code,
                  ean_dateout,
                  ean_datein,
                  ean_estado,
                  ean_date
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.ean e
                <span style="color: #C76A40;
            font-weight: 800;">where</span> e._branch_uid = __branch
            ), __artigo_ean <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> 
                e._artigo_uid <span style="color: #C76A40;
            font-weight: 800;">as</span> _artigo_uid,
                array_agg(e) <span style="color: #C76A40;
            font-weight: 800;">as</span> eans
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __ean e 
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> e._artigo_uid
            ), __artigo_impostos <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  array_agg(e) <span style="color: #C76A40;
            font-weight: 800;">as</span> impostos,
                  _artigo_uid
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __imposto e
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> e._artigo_uid
            ), __artigo <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  art.*,
                  u.*,
                  uorig.unit_id <span style="color: #C76A40;
            font-weight: 800;">as</span> unit_originid,
                  uorig.unit_code <span style="color: #C76A40;
            font-weight: 800;">as</span> unit_origncode,
                  uorig.unit_name <span style="color: #C76A40;
            font-weight: 800;">as</span> unit_origenname,
                  art.artigo_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _child ) <span style="color: #C76A40;
            font-weight: 800;">as</span> artigo_owner,
                  coalesce( s.stock_quantidade, <span style="color: #C76A40">0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> stock_quantidade,
                  origin.artigo_id <span style="color: #C76A40;
            font-weight: 800;">as</span> origin_id,
                  origin.artigo_codigo <span style="color: #C76A40;
            font-weight: 800;">as</span> origin_codigo,
                  origin.artigo_descricao <span style="color: #C76A40;
            font-weight: 800;">as</span> orign_descricao,
                  origin.artigo_nome <span style="color: #C76A40;
            font-weight: 800;">as</span> origin_nome,
                  origin.artigo_compostoquantidade <span style="color: #C76A40;
            font-weight: 800;">as</span> orign_compostoquantidade,
                  origin.artigo_artigo_id <span style="color: #C76A40;
            font-weight: 800;">as</span> origin_origin_id,
            
                  count( l.link_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> _counts,
                  coalesce( array_agg( l.link_espaco_destino ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> l.link_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> ), <span style="color: #C76A40;
            font-weight: 800;">array</span>[]::<span style="color: #C76A40">uuid</span>[] )  <span style="color: #C76A40;
            font-weight: 800;">as</span> links,
                  coalesce( array_agg( l ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> l.link_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> ), <span style="color: #4d99bf">&#x27;{}&#x27;</span>::tweeks.link[] ) <span style="color: #C76A40;
            font-weight: 800;">as</span> armazems
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo art
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.unit u <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_unit_id = u.unit_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.artigo origin <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_artigo_id = origin.artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.unit uorig <span style="color: #C76A40;
            font-weight: 800;">on</span> origin.artigo_unit_id = uorig.unit_id

                  
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.link l <span style="color: #C76A40;
            font-weight: 800;">on</span> l.link_estado = _const.maguita_link_estado_ativo
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ( l.link_referencia-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_id&#x27;</span> )::<span style="color: #C76A40">uuid</span> = art.artigo_id
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_espaco_destino = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _espaco )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_tlink_id = _const.maguita_tlink_preco
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> l._branch_uid = __branch
                  
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.stock s <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_id = s.artigo_id
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> s.espaco_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _espaco )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> s._branch_uid = __branch
                <span style="color: #C76A40;
            font-weight: 800;">where</span> art._branch_uid = __branch
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> 
                  art.artigo_id,
                  u.unit_id,
                  uorig.unit_id,
                  origin.artigo_id,
                  s.stock_quantidade
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  art.*,
                  coalesce( ip.impostos, <span style="color: #4d99bf">&#x27;{}&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> impostos,
                  coalesce( ea.eans, <span style="color: #4d99bf">&#x27;{}&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> eans
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __artigo art
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> __artigo_impostos ip <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_id = ip._artigo_uid
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> __artigo_ean ea <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_id = ea._artigo_uid
                <span style="color: #C76A40;
            font-weight: 800;">where</span> art._counts &gt; <span style="color: #C76A40">0</span>
          <span style="color: #C76A40;
            font-weight: 800;">loop</span> 
            <span style="color: #C76A40;
            font-weight: 800;">return next</span> to_jsonb( _product );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __tg_venda_before_check {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__tg_venda_before_check()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _conta <span style="color: #C76A40">record</span>;
          _artigo <span style="color: #C76A40">record</span>;
          _new tweeks.venda;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> upper( <span style="color: #397300">tg_op</span> ) <span style="color: #C76A40;
            font-weight: 800;">in</span> ( <span style="color: #4d99bf">&#x27;INSERT&#x27;</span>, <span style="color: #4d99bf">&#x27;UPDATE&#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _new := <span style="color: #397300">new</span>;
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_id = _new.venda_conta_id
              <span style="color: #C76A40;
            font-weight: 800;">into</span> _conta
            ;

            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo a
              <span style="color: #C76A40;
            font-weight: 800;">where</span> a.artigo_id = _new.venda_artigo_id
              <span style="color: #C76A40;
            font-weight: 800;">into</span> _artigo
            ;
            
            <span style="color: #888">-- Garantir que a quantidade vendida nunca seja de zero</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #397300">new</span>.venda_quantidade = <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;%&#x27;</span>, format(<span style="color: #4d99bf">&#x27;A quantidade de artigo para %I %s não pode ser zero&#x27;</span>, _artigo.artigo_nome, <span style="color: #C76A40;
            font-weight: 800;">case</span>
                <span style="color: #C76A40;
            font-weight: 800;">when</span> _new.venda_descricao != _artigo.artigo_nome <span style="color: #C76A40;
            font-weight: 800;">then</span> format( <span style="color: #4d99bf">&#x27;com descrição %I&#x27;</span>, _new.venda_descricao )
                <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #4d99bf">&#x27;&#x27;</span>
              <span style="color: #C76A40;
            font-weight: 800;">end</span>) ;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #888">-- Garantir que a quantidade vendida só seja negativa para o caso de conta corrente</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _new.venda_quantidade &lt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> _conta.conta_docorigin <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;%&#x27;</span>, format( <span style="color: #4d99bf">&#x27;Não vender o artigo %I %s com quantidade negativa!&#x27;</span>, _artigo.artigo_nome, <span style="color: #C76A40;
            font-weight: 800;">case</span>
                <span style="color: #C76A40;
            font-weight: 800;">when</span> _new.venda_descricao != _artigo.artigo_nome <span style="color: #C76A40;
            font-weight: 800;">then</span> format( <span style="color: #4d99bf">&#x27;com descrição %I&#x27;</span>, _new.venda_descricao )
                <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #4d99bf">&#x27;&#x27;</span>
              <span style="color: #C76A40;
            font-weight: 800;">end</span>);
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #397300">new</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_venda_preparado {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_venda_preparado(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
            <span style="color: #C76A40;
            font-weight: 800;">declare</span>
              <span style="color: #888">\/\**
                  args := {
                    arg_colaborador_id: UID
                    arg_espaco_auth: UID
                    arg_conta_id: UID
                    arg_vendas: [UID, UID, ..., UID]
                  }
               \*\/</span>
              arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
              arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
              
              ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
              vendas <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> e.text <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements_text( args-&gt;<span style="color: #4d99bf">&#x27;arg_vendas&#x27;</span> ) e( <span style="color: #C76A40">text</span>) );
              _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
              updates tweeks.venda[];
            <span style="color: #C76A40;
            font-weight: 800;">begin</span>
              _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
              <span style="color: #C76A40;
            font-weight: 800;">with</span> __update <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                  <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.venda
                    <span style="color: #C76A40;
            font-weight: 800;">set</span> venda_estadopreparacao = _const.maguita_venda_estadopreparacao_preparado,
                        venda_colaborador_atualizacao = arg_colaborador_id
                    <span style="color: #C76A40;
            font-weight: 800;">where</span> venda_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( vendas )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> _branch_uid = ___branch
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> venda_estado = _const.maguita_venda_estadopreparacao_pendente
                    <span style="color: #C76A40;
            font-weight: 800;">returning</span> *
              ) <span style="color: #C76A40;
            font-weight: 800;">select</span> array_agg( u ) <span style="color: #C76A40;
            font-weight: 800;">into</span> updates
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __update u 
              ;
              
              
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true( jsonb_build_object(
                <span style="color: #4d99bf">&#x27;venda&#x27;</span>, updates
              ));
            <span style="color: #C76A40;
            font-weight: 800;">end</span>;
          $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_load_conta_aberto {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_load_conta_aberto(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              arg_colaborador_id: UID*,
              arg_espaco_auth: UID?,
              arg_posto_id: UID*
            }
           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_posto_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __conta <span style="color: #C76A40;
            font-weight: 800;">as</span>(
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  ct.conta_id,
                  ct.conta_numero,
                  ct.conta_montante,
                  ct.conta_mesa,
                  ct.conta_chave,
                  c.colaborador_id,
                  c.colaborador_nome,
                  c.colaborador_apelido,
                  e.espaco_id,
                  e.espaco_nome,
                  count( ve.venda_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_vendas
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.colaborador c <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_colaborador_id = c.colaborador_id
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_espaco_auth = e.espaco_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.venda ve <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_id = ve.venda_conta_id
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_estado = _const.maguita_venda_estado_aberto
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_posto_id = arg_posto_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_estado = _const.maguita_conta_estado_aberto
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_espaco_auth = coalesce( arg_espaco_auth, ct.conta_espaco_auth )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> ct.conta_proforma
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                  c.colaborador_id,
                  ct.conta_id,
                  e.espaco_id
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( ct ) <span style="color: #C76A40;
            font-weight: 800;">from</span> __conta ct;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_venda {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_venda(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para associar mais vendas a conta
            args := {
              arg_colaborador_id: ID,
              arg_conta_id: ID,
              arg_message_error: TRUE|FALSE,
              arg_espaco_auth: ID,
              arg_vendas: [
                {
                  arg_venda_id: ID,
                  arg_venda_quantidade: QUANT,
                  arg_venda_custounitario: CUSTO,

                  arg_agregas: [
                    {
                      arg_item_id: ID,
                      arg_item_quantidadecusto: QUANT/CUSTO
                      arg_agrega_quantidade: QUANT,
                      arg_item_custo: CUSTO,
                      arg_agrega_montante: MONTANTE
                    }
                  ]
                }
              ]
            }\*\/</span>

          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_conta_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_conta_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_vendas <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_vendas&#x27;</span>;
          arg_message_error <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_message_error&#x27;</span>;

          <span style="color: #888">-- colocar todos os id dos artigos em uma lista</span>
          arg_artigos_id <span style="color: #C76A40">uuid</span> [ ] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> ( doc.venda-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span> )::<span style="color: #C76A40">uuid</span>  <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( arg_vendas ) doc( venda ) );

          arg_items_id <span style="color: #C76A40">uuid</span> [ ];

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _conta tweeks.conta;
          _data <span style="color: #C76A40">record</span>;
          _venda tweeks.venda;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          arg_message_error := coalesce( arg_message_error, <span style="color: #C76A40;
            font-weight: 800;">true</span> );

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _conta := tweeks._get_conta( arg_conta_id );


          <span style="color: #888">-- Garrantir que tenha o stock disponivel para os artigos</span>
          <span style="color: #C76A40;
            font-weight: 800;">with</span> novas_vendas <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                ( dos.venda-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_venda_id&#x27;</span> )::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> arg_venda_id,
                ( dos.venda-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span> )::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> arg_artigo_id,
                ( dos.venda-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_venda_quantidade&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> arg_venda_quantidade,
                ( dos.venda-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_venda_custounitario&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> arg_venda_custounitario,
                dos.venda-&gt;<span style="color: #4d99bf">&#x27;arg_agregas&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> arg_agregas
            <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( arg_vendas ) dos( venda )
          )
          <span style="color: #C76A40;
            font-weight: 800;">select</span>
              count( art.artigo_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> artigo_total,
              string_agg( art.artigo_nome, <span style="color: #4d99bf">&#x27;, &#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> artigo_nomes
              <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
            <span style="color: #C76A40;
            font-weight: 800;">from</span> novas_vendas vds
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.venda ve <span style="color: #C76A40;
            font-weight: 800;">on</span> vds.arg_venda_id = ve.venda_id
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> ve.venda_artigo_id = art.artigo_id
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.stock st <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_id = st.stock_artigo_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span> st.stock_espacao_id = arg_espaco_auth
              <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.artigo_has_stock( art.artigo_id, arg_espaco_auth, vds.arg_venda_quantidade -  ve.venda_quantidade )
          ;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _data.artigo_total &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> arg_message_error <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;%&#x27;</span>, format( <span style="color: #4d99bf">&#x27;Os stock dos produtos &quot;%s&quot; não cobrem a venda para essa conta&#x27;</span>, _data.artigo_nomes );

          <span style="color: #C76A40;
            font-weight: 800;">elsif</span> _data.artigo_total &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? format( <span style="color: #4d99bf">&#x27;Os stock dos produtos &quot;%s&quot; não cobrem a venda para essa conta&#x27;</span>, _data.artigo_nomes );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;


          <span style="color: #888">-- Registar as novas vendas a conta</span>
          <span style="color: #C76A40;
            font-weight: 800;">for</span> _data <span style="color: #C76A40;
            font-weight: 800;">in</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> novas_vendas <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  ( dos.venda-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_venda_id&#x27;</span> )::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> arg_venda_id,
                  ( dos.venda-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span> )::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> arg_artigo_id,
                  ( dos.venda-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_venda_quantidade&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> arg_venda_quantidade,
                  ( dos.venda-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_venda_custounitario&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> arg_venda_custounitario,
                  dos.venda -&gt; <span style="color: #4d99bf">&#x27;arg_agregas&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> arg_agregas
                <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( arg_vendas ) dos( venda )
            )
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> novas_vendas nv
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.venda ve <span style="color: #C76A40;
            font-weight: 800;">on</span> nv.arg_venda_id = ve.venda_id
          <span style="color: #C76A40;
            font-weight: 800;">loop</span>
            _data.venda_custounitario := _data.arg_venda_custounitario;
            _data.venda_quantidade := _data.arg_venda_quantidade;

            <span style="color: #888">-- Anular o valor do montante anterior em campo montante</span>
            _data.venda_montantetotal := _data.venda_montantetotal - _data.venda_montente;

            <span style="color: #888">-- Atualizar o valor de novo montante</span>
            _data.venda_montente := _data.arg_venda_quantidade * _data.arg_venda_custounitario;

            <span style="color: #888">-- Atualizar o valor de montante total</span>
            _data.venda_montantetotal := _data.venda_montantetotal + _data.venda_montente;

            <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.venda
              <span style="color: #C76A40;
            font-weight: 800;">set</span> venda_quantidade = _data.venda_quantidade,
                  venda_custounitario = _data.venda_custounitario,
                  venda_montente = _data.venda_montente,
                  venda_montantetotal = _data.venda_montantetotal,
                  venda_espaco_auth = arg_espaco_auth
              <span style="color: #C76A40;
            font-weight: 800;">where</span> venda_id = _data.venda_id
              <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _venda
            ;

            arg_items_id := <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> ( doc.agrega-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_item_id&#x27;</span> )::<span style="color: #C76A40">uuid</span>  <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( _data.arg_agregas ) doc( agrega ) );
            <span style="color: #888">-- desagregar o item da venda</span>
            <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.agrega
              <span style="color: #C76A40;
            font-weight: 800;">set</span> agrega_estado = _const.agrega_estado_canselado,
                  agrega_colaborador_atualizacao = arg_colaborador_id,
                  agrega_dataatualizacao = <span style="color: #397300">current_timestamp</span>
              <span style="color: #C76A40;
            font-weight: 800;">where</span> agrega_venda_id = _data.venda_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> agrega_artigo_item != <span style="color: #C76A40;
            font-weight: 800;">all</span>( arg_items_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> agrega_estado = _const.agrega_estado_aberto
            ;

            <span style="color: #888">-- aggregar os novos item a venda</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> item_preco <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                ( doc.agrega-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_agrega_quantidade&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> arg_agrega_quantidade,
                ( doc.agrega-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_item_quantidadecusto&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> arg_item_quantidadecusto,
                ( doc.agrega-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_item_custo&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> arg_item_custo,
                ( doc.agrega-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_item_id&#x27;</span> )::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> arg_item_id
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( _data.arg_agregas ) doc( agrega )
            )
            <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.agrega (
              agrega_venda_id,
              agrega_artigo_item,
              agrega_colaborador_id,
              agrega_quantidade,
              agrega_custounitario,
              agrega_montante,
              agrega_espaco_auth
            )
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                _data.venda_id,
                it.artigo_id,
                arg_colaborador_id,
                ip.arg_agrega_quantidade,
                ip.arg_item_custo,
                <span style="color: #C76A40;
            font-weight: 800;">rule</span>.calculate_cost( ip.arg_item_quantidadecusto, ip.arg_item_custo, ip.arg_agrega_quantidade ),
                arg_espaco_auth
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo it
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> item_preco ip <span style="color: #C76A40;
            font-weight: 800;">on</span> it.artigo_id = ip.arg_item_id
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> agrega a <span style="color: #C76A40;
            font-weight: 800;">on</span> it.artigo_id = a.agrega_artigo_item
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> a.agrega_estado = _const.agrega_estado_aberto
              <span style="color: #C76A40;
            font-weight: 800;">where</span> it.artigo_id = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( arg_items_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> a.agrega_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
            ;

            <span style="color: #888">-- Aplicar o calculo do imposto</span>
            <span style="color: #C76A40;
            font-weight: 800;">perform</span> tweeks.funct_reg_vendaimposto(
              jsonb_build_object(
                <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
                <span style="color: #4d99bf">&#x27;arg_venda_id&#x27;</span>, _venda.venda_id,
                <span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span>, _venda.venda_artigo_id,
                <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth
              )
            );

          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;venda&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">array</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( ve ) || jsonb_build_object(
                  <span style="color: #4d99bf">&#x27;venda_item&#x27;</span>, jsonb_agg( to_jsonb( agg ) || to_jsonb( it) )
                )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.venda ve
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.agrega agg <span style="color: #C76A40;
            font-weight: 800;">on</span> ve.venda_id = agg.agrega_venda_id
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> agg.agrega_estado = _const.agrega_estado_aberto
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.artigo it <span style="color: #C76A40;
            font-weight: 800;">on</span> agg.agrega_artigo_item = it.artigo_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ve.venda_conta_id = arg_conta_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_artigo_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_artigos_id )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_estado = _const.venda_estado_aberto
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ve.venda_id
            ),

            <span style="color: #4d99bf">&#x27;venda_all&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">array</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( ve ) || jsonb_build_object(
                  <span style="color: #4d99bf">&#x27;venda_item&#x27;</span>, jsonb_agg( to_jsonb( agg ) || to_jsonb( it) )
                )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.venda ve
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.agrega agg <span style="color: #C76A40;
            font-weight: 800;">on</span> ve.venda_id = agg.agrega_venda_id
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> agg.agrega_estado &gt;= _const.agrega_estado_aberto
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.artigo it <span style="color: #C76A40;
            font-weight: 800;">on</span> agg.agrega_artigo_item = it.artigo_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ve.venda_conta_id = arg_conta_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_estado &gt;= _const.venda_estado_aberto
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ve.venda_id
            )
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface viewargs_object {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.viewargs_object()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">PARALLEL SAFE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">select</span>
              jsonb_object_agg(
                substr(e.param, length(<span style="color: #4d99bf">&#x27;viewargs.*&#x27;</span>), length( e.param )),
                current_setting( e.param, <span style="color: #C76A40;
            font-weight: 800;">true</span> )::<span style="color: #C76A40">jsonb</span>
              )
            <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements_text( current_setting( <span style="color: #4d99bf">&#x27;viewargs.*&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">true</span> )::<span style="color: #C76A40">jsonb</span> )  e( param)
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __cluster_filter_branch {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__cluster_filter_branch(<span style="color: #C76A40;
            font-weight: 800;">share</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, _object <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">object</span>, _collector <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.collector, _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>, _origin <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">boolean</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _rec <span style="color: #C76A40">record</span>;
          _branch tweeks.branch;
          _class <span style="color: #C76A40">regclass</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>[
            <span style="color: #4d99bf">&#x27;auth.colaborador&#x27;</span>::<span style="color: #C76A40">regclass</span>,
            <span style="color: #4d99bf">&#x27;auth.acesso&#x27;</span>::<span style="color: #C76A40">regclass</span>,
            <span style="color: #4d99bf">&#x27;tweeks.branch&#x27;</span>::<span style="color: #C76A40">regclass</span>,
            <span style="color: #4d99bf">&#x27;tweeks.espaco&#x27;</span>::<span style="color: #C76A40">regclass</span>,
            <span style="color: #4d99bf">&#x27;tweeks.cambio&#x27;</span>::<span style="color: #C76A40">regclass</span>,
            <span style="color: #4d99bf">&#x27;tweeks.trabalha&#x27;</span>::<span style="color: #C76A40">regclass</span>
          ]::<span style="color: #C76A40">regclass</span>[];
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">share</span>::<span style="color: #C76A40">regclass</span> != <span style="color: #C76A40;
            font-weight: 800;">all</span>( _class ) <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">share</span>::<span style="color: #C76A40">regclass</span> = <span style="color: #4d99bf">&#x27;tweeks.branch&#x27;</span>::<span style="color: #C76A40">regclass</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _branch := jsonb_populate_record( _branch, _collector.collector_metadata );

          <span style="color: #888">--- Obter os branch dos registros</span>
          <span style="color: #C76A40;
            font-weight: 800;">elsif</span> <span style="color: #C76A40;
            font-weight: 800;">share</span>::<span style="color: #C76A40">regclass</span> = <span style="color: #4d99bf">&#x27;auth.colaborador&#x27;</span>::<span style="color: #C76A40">regclass</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _rec := jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::auth.colaborador, _collector.collector_metadata );
            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _branch
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.branch b
              <span style="color: #C76A40;
            font-weight: 800;">where</span> b.branch_uid = _rec.colaborador_branch_uid
            ;

          <span style="color: #C76A40;
            font-weight: 800;">elsif</span> <span style="color: #C76A40;
            font-weight: 800;">share</span>::<span style="color: #C76A40">regclass</span> = <span style="color: #4d99bf">&#x27;auth.acesso&#x27;</span>::<span style="color: #C76A40">regclass</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _rec := jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::auth.acesso, _collector.collector_metadata );
            <span style="color: #C76A40;
            font-weight: 800;">select</span> b.* <span style="color: #C76A40;
            font-weight: 800;">into</span> _branch
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.branch b
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.colaborador co <span style="color: #C76A40;
            font-weight: 800;">on</span> co.colaborador_branch_uid = b.branch_uid
              <span style="color: #C76A40;
            font-weight: 800;">where</span> co.colaborador_id = _rec.acesso_colaborador_propetario
            ;

          <span style="color: #C76A40;
            font-weight: 800;">elsif</span> <span style="color: #C76A40;
            font-weight: 800;">share</span>::<span style="color: #C76A40">regclass</span> = <span style="color: #4d99bf">&#x27;tweeks.espaco&#x27;</span>::<span style="color: #C76A40">regclass</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _rec := jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::tweeks.espaco, _collector.collector_metadata );
            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _branch
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.branch b
              <span style="color: #C76A40;
            font-weight: 800;">where</span> b.branch_uid = _rec.espaco_branch_uid
            ;

          <span style="color: #C76A40;
            font-weight: 800;">elsif</span> <span style="color: #C76A40;
            font-weight: 800;">share</span>::<span style="color: #C76A40">regclass</span> = <span style="color: #4d99bf">&#x27;tweeks.trabalha&#x27;</span>::<span style="color: #C76A40">regclass</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>

            _rec := jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::tweeks.trabalha, _collector.collector_metadata );
            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _branch
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.branch br
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> br.branch_uid = e.espaco_branch_uid
              <span style="color: #C76A40;
            font-weight: 800;">where</span> e.espaco_id = _rec.trabalha_espaco_destino
            ;

          <span style="color: #C76A40;
            font-weight: 800;">elsif</span> <span style="color: #C76A40;
            font-weight: 800;">share</span>::<span style="color: #C76A40">regclass</span> = <span style="color: #4d99bf">&#x27;tweeks.cambio&#x27;</span>::<span style="color: #C76A40">regclass</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>

            _rec := jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::tweeks.cambio, _collector.collector_metadata );
            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _branch
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.branch br
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> br.branch_uid = e.espaco_branch_uid
              <span style="color: #C76A40;
            font-weight: 800;">where</span> e.espaco_id = _rec.cambio_espaco_auth
            ;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">share</span>::<span style="color: #C76A40">regclass</span> = <span style="color: #4d99bf">&#x27;tweeks.branch&#x27;</span>::<span style="color: #C76A40">regclass</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _branch.branch_path <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _branch.branch_path != _cluster.cluster_path
                <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_sub_path( _branch.branch_path, _cluster.cluster_path )
            <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>;

            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_sub_path( _cluster.cluster_path, _branch.branch_path ) <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_sub_path( _cluster.cluster_path, _branch.branch_path ) <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface viewargs_sets {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.viewargs_sets(<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(param <span style="color: #C76A40">text</span>, <span style="color: #C76A40;
            font-weight: 800;">value</span> <span style="color: #C76A40">jsonb</span>, <span style="color: #C76A40">text</span> <span style="color: #C76A40">text</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            _record <span style="color: #C76A40">record</span>;
            _keys <span style="color: #C76A40">jsonb</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>

            _keys := coalesce( current_setting( <span style="color: #4d99bf">&#x27;viewargs.*&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">true</span> )::<span style="color: #C76A40">jsonb</span>, jsonb_build_array());
            <span style="color: #C76A40;
            font-weight: 800;">select</span> coalesce(jsonb_agg( k.param ), jsonb_build_array()) <span style="color: #C76A40;
            font-weight: 800;">into</span> _keys
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements_text( _keys ) k( param)
              <span style="color: #C76A40;
            font-weight: 800;">where</span> k.param != <span style="color: #C76A40;
            font-weight: 800;">all</span>( <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> format(<span style="color: #4d99bf">&#x27;viewargs.%I&#x27;</span>,  e ) <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_object_keys( <span style="color: #1f7199">$1</span>) e))
            ;
            
            <span style="color: #C76A40;
            font-weight: 800;">for</span> _record <span style="color: #C76A40;
            font-weight: 800;">in</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_each( <span style="color: #1f7199">$1</span> )
            <span style="color: #C76A40;
            font-weight: 800;">loop</span>
              viewargs_sets.param := format(<span style="color: #4d99bf">&#x27;viewargs.%I&#x27;</span>, _record.key );
              viewargs_sets.text := _record.<span style="color: #C76A40;
            font-weight: 800;">value</span>;
              viewargs_sets.<span style="color: #C76A40;
            font-weight: 800;">value</span> := _record.<span style="color: #C76A40;
            font-weight: 800;">value</span>;
              _keys := _keys || to_jsonb( viewargs_sets.param );
              <span style="color: #C76A40;
            font-weight: 800;">perform</span> set_config( viewargs_sets.param, viewargs_sets.text, <span style="color: #C76A40;
            font-weight: 800;">false</span> );
              <span style="color: #C76A40;
            font-weight: 800;">return next</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

            viewargs_sets.param := <span style="color: #4d99bf">&#x27;viewargs.*&#x27;</span>;
            viewargs_sets.text := to_jsonb( _keys );
            viewargs_sets.<span style="color: #C76A40;
            font-weight: 800;">value</span> := to_jsonb( _keys );
            <span style="color: #C76A40;
            font-weight: 800;">perform</span> set_config( viewargs_sets.param, viewargs_sets.text, <span style="color: #C76A40;
            font-weight: 800;">false</span> );
            <span style="color: #C76A40;
            font-weight: 800;">return next</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_posto_simple {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_posto_simple(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(posto_id <span style="color: #C76A40">uuid</span>, posto_designacao <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>

          <span style="color: #888">\/\** Carregar a lista de posto simples
            filter := {
              arg_espaco_auth: ID
            }
          \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                pt.posto_id,
                pt.posto_designacao
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.posto pt
              <span style="color: #C76A40;
            font-weight: 800;">where</span> pt.posto_estado != _const.posto_estado_encerado
                <span style="color: #C76A40;
            font-weight: 800;">and</span> pt.posto_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> pt.posto_designacao <span style="color: #C76A40;
            font-weight: 800;">asc</span>
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_caixa {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_caixa(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\** Essa função serve para devolver todas as caixas
              arg_espaco_auth: ID,
              arg_caixa_estado: [ ],
              arg_posto_showmontante: boolean,

             \*\/</span>
            arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
            arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
            arg_caixa_estado <span style="color: #C76A40">int2</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> jsonb_array_elements_text( <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_caixa_estado&#x27;</span> )::<span style="color: #C76A40">int2</span> );
            arg_posto_showmontante <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_showmontante&#x27;</span>;
            arg_show  <span style="color: #C76A40">text</span>[];
            _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

            <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_caixa_estado&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                arg_caixa_estado := <span style="color: #C76A40;
            font-weight: 800;">array</span>[ _const.caixa_estado_ativo ];
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            arg_show := <span style="color: #C76A40;
            font-weight: 800;">array</span>[
                <span style="color: #4d99bf">&#x27;caixa_id&#x27;</span>,
                <span style="color: #4d99bf">&#x27;caixa_montanteinicial&#x27;</span>,
                <span style="color: #4d99bf">&#x27;caixa_montantefecho&#x27;</span>,
                <span style="color: #4d99bf">&#x27;caixa_montanteinicialposto&#x27;</span>,
                <span style="color: #4d99bf">&#x27;caixa_montantefechoposto&#x27;</span>,
                <span style="color: #4d99bf">&#x27;caixa_quantidadecheque&#x27;</span>,
                <span style="color: #4d99bf">&#x27;caixa_observacao&#x27;</span>,
                <span style="color: #4d99bf">&#x27;posto_id&#x27;</span>,
                <span style="color: #4d99bf">&#x27;posto_designacao&#x27;</span>,
                <span style="color: #4d99bf">&#x27;colaborador_id&#x27;</span>,
                <span style="color: #4d99bf">&#x27;colaborador_nome&#x27;</span>,
                <span style="color: #4d99bf">&#x27;colaborador_apelido&#x27;</span>
                ];

            <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_posto_showmontante <span style="color: #C76A40;
            font-weight: 800;">then</span>
                arg_show := arg_show || <span style="color: #C76A40;
            font-weight: 800;">array</span>[
                    <span style="color: #4d99bf">&#x27;posto_montante&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;conta_cheques&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;conta_montantevenda&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;caixa_montante&#x27;</span>
                    ];
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">return query</span>
                <span style="color: #C76A40;
            font-weight: 800;">with</span> loads <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                    <span style="color: #C76A40;
            font-weight: 800;">select</span>
                        cx.*,
                        pos.*,
                        col.*,
                        count( <span style="color: #C76A40;
            font-weight: 800;">distinct</span> ct.conta_id ) conta_cheques,
                        sum( ct.conta_montante ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_montantevenda,
                        cx.caixa_montanteinicial + sum( ct.conta_montante ) <span style="color: #C76A40;
            font-weight: 800;">as</span> caixa_montante
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.caixa cx
                             <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.posto pos <span style="color: #C76A40;
            font-weight: 800;">on</span> cx.caixa_posto_id = pos.posto_id
                             <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.colaborador col <span style="color: #C76A40;
            font-weight: 800;">on</span> cx.caixa_colaborador_id = col.colaborador_id
                             <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.conta ct <span style="color: #C76A40;
            font-weight: 800;">on</span> cx.caixa_id = ct.conta_caixa_fechopagamento
                        <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_estado = _const.conta_estado_pago
                    <span style="color: #C76A40;
            font-weight: 800;">where</span> cx.caixa_estado = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_caixa_estado )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> cx.caixa_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
                    <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> cx.caixa_id,
                             pos.posto_id,
                             col.colaborador_id
                    <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                        <span style="color: #C76A40;
            font-weight: 800;">case</span>
                            <span style="color: #C76A40;
            font-weight: 800;">when</span> cx.caixa_estado = _const.caixa_estado_ativo <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">1</span>
                            <span style="color: #C76A40;
            font-weight: 800;">when</span> cx.caixa_estado = _const.cambio_estado_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">3</span>
                            <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">2</span>
                            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">asc</span>,
                        cx.caixa_dataregistro <span style="color: #C76A40;
            font-weight: 800;">desc</span>
                ) <span style="color: #C76A40;
            font-weight: 800;">select</span> lib.jsonb_values( to_jsonb( l ), <span style="color: #C76A40;
            font-weight: 800;">variadic</span> arg_show )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> loads l
            ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_ean {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_ean(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**

            Essa função serve para registar varios ean de uma vez
            args := {
              arg_artigo_id: UUID,
              arg_espaco_auth: UUID,
              arg_colaborador_id: UUID,
              arg_ean_codes: [
                { ean_code:CODE, ean_dateout:DATE, ean_datein:DATE }
              ]
              arg_ean_disable: [ CODES ]
            }
           \*\/</span>
          arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_ean_codes <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;<span style="color: #4d99bf">&#x27;arg_ean_codes&#x27;</span>;
          arg_ean_disable <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> jsonb_array_elements_text(args-&gt;<span style="color: #4d99bf">&#x27;arg_ean_disable&#x27;</span>) );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _data <span style="color: #C76A40">record</span>;
          _ean tweeks.ean;
          __eans tweeks.ean[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>[]::tweeks.ean[];
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">for</span> _data <span style="color: #C76A40;
            font-weight: 800;">in</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> ___ean <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> eandoc.*, ea.ean_id <span style="color: #C76A40;
            font-weight: 800;">as</span> persitent_ean_id
                <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( arg_ean_codes ) e( document )
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::tweeks.ean, e.document ) eandoc <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.ean ea <span style="color: #C76A40;
            font-weight: 800;">on</span> ea.ean_code = eandoc.ean_code
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> ___ean
          <span style="color: #C76A40;
            font-weight: 800;">loop</span>
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _data.persitent_ean_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.ean
                <span style="color: #C76A40;
            font-weight: 800;">set</span> ean_datein = _data.ean_datein,
                    ean_dateout = _data.ean_dateout,
                    ean_artigo_id = arg_artigo_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ean_id = _data.persitent_ean_id
                <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _ean
              ;
              __eans := __eans || _ean;
            <span style="color: #C76A40;
            font-weight: 800;">else</span>
              <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.ean(
                ean_artigo_id,
                ean_espaco_auth,
                ean_colaborador_id,
                ean_code,
                ean_dateout,
                ean_datein
              ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
                arg_artigo_id,
                arg_espaco_auth,
                arg_colaborador_id,
                _data.ean_code,
                _data.ean_dateout,
                _data.ean_datein
              ) <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _ean;
              __eans := __eans || _ean;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;


          <span style="color: #C76A40;
            font-weight: 800;">if</span> jsonb_array_length( args-&gt;<span style="color: #4d99bf">&#x27;arg_ean_disable&#x27;</span> ) &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.ean
              <span style="color: #C76A40;
            font-weight: 800;">set</span> ean_estado = _const.maguita_ean_estado_ativo,
                  ena_dateupdate = <span style="color: #397300">current_timestamp</span>,
                  ean_colaborador_atualizacao = arg_colaborador_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ean_code = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_ean_disable );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_true( jsonb_build_object(
              <span style="color: #4d99bf">&#x27;eans&#x27;</span>, __eans,
              <span style="color: #4d99bf">&#x27;disable&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> e <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.ean e <span style="color: #C76A40;
            font-weight: 800;">where</span> e.ean_code = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( arg_ean_disable ))
          ));
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __check_conta_data {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__check_conta_data(_tserie_id <span style="color: #C76A40">integer</span>, _conta_data <span style="color: #C76A40">date</span>, _raise <span style="color: #C76A40">boolean</span>, _serie_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">text</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span> 
          _data <span style="color: #C76A40">record</span>;
          __serie <span style="color: #C76A40">record</span>;
          _message <span style="color: #C76A40">text</span>;
          _uuid_base <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lib.to_uuid(<span style="color: #C76A40">1</span>);
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> max( ct.conta_data ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_data
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct 
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_tserie_id = _tserie_id 
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_data &lt;= <span style="color: #397300">current_date</span>
                <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( ct.conta_serie_id, _uuid_base ) = coalesce( _serie_id, ct.conta_serie_id,  _uuid_base )
              <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
            ;
            
            _data.conta_data := coalesce( _data.conta_data, _conta_data, <span style="color: #397300">current_date</span> );
            
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.tserie ts
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.serie s <span style="color: #C76A40;
            font-weight: 800;">on</span> ts.tserie_id = s.serie_tserie_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_id = _serie_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ts.tserie_id = _tserie_id
              <span style="color: #C76A40;
            font-weight: 800;">into</span> __serie
            ;
            
        <span style="color: #888">--     if _conta_data &gt; current_date and _message is null then </span>
        <span style="color: #888">--       _message :=  format( &#x27;Data de emissão invalida para a operação! A data para a %I%s não pode ser superior a data atual!&#x27;, __serie.tserie_desc, case</span>
        <span style="color: #888">--         when __serie.serie_designacao is null then &#x27;&#x27;</span>
        <span style="color: #888">--         else format( &#x27; com designação %I&#x27;, __serie.serie_designacao)</span>
        <span style="color: #888">--       end);</span>
        <span style="color: #888">--     end if;</span>
            
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta_data &lt; _data.conta_data <span style="color: #C76A40;
            font-weight: 800;">and</span> _message <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              _message := format( <span style="color: #4d99bf">&#x27;Data de emissão invalida para a operação! A última data de emissão para %I%s foi de %I!&#x27;</span>, __serie.tserie_desc, <span style="color: #C76A40;
            font-weight: 800;">case</span> 
                <span style="color: #C76A40;
            font-weight: 800;">when</span> __serie.serie_designacao <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #4d99bf">&#x27;&#x27;</span>
                <span style="color: #C76A40;
            font-weight: 800;">else</span> format( <span style="color: #4d99bf">&#x27; com designação %I&#x27;</span>, __serie.serie_designacao)
              <span style="color: #C76A40;
            font-weight: 800;">end</span>, _data.conta_data );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _raise <span style="color: #C76A40;
            font-weight: 800;">and</span> _message <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;%&#x27;</span>, _message;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            
            <span style="color: #C76A40;
            font-weight: 800;">return</span> _message;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_posto {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_posto(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
            <span style="color: #C76A40;
            font-weight: 800;">declare</span>
              <span style="color: #888">\/\**doc
                Essa função serve para criar uma posto para o colaborador
                args := {
                  arg_posto_id: UUID
                  arg_espaco_auth: ID,
                  arg_espaco_destino: [{
                    espaco_id: UUID,
                    serie_faturarecibo: UUID
                    serie_fatura: UUID
                  }],
                  arg_colaborador_id: ID
                  arg_posto_multiplecaixa: BOOLEAN
            
                  arg_posto_matricula:  MATRICULA (CHAVE TEMPORARIA),
                  arg_posto_designacao: DESIGNACAO,
                  arg_tposto_id: ID,
                  arg_posto_multipleuser: BOOLEAN,
                  arg_posto_designcao: ID,
                  arg_posto_montanteinicial: MONTANTE_INICIAL,
                  posto_authmode: AUTH-MODE,
                  posto_caixamode: CAIXA-MODE,
                }
              doc\*\/</span>
            
              arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
              arg_posto_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_id&#x27;</span>;
              arg_espaco_destino <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;espaco_id&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;arg_espaco_destino&#x27;</span>) e( doc ));
              arg_posto_designacao <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_designacao&#x27;</span>;
              arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
              arg_tposto_id <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_tposto_id&#x27;</span>;
              arg_posto_multiplecaixa <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_multiplecaixa&#x27;</span>;
              arg_posto_matricula <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span>   args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_matricula&#x27;</span>;
              arg_posto_montanteinicial <span style="color: #C76A40">float</span> <span style="color: #C76A40;
            font-weight: 800;">default</span>         args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_montanteinicial&#x27;</span>;
              arg_posto_authmode <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span>        args-&gt;&gt;<span style="color: #4d99bf">&#x27;posto_authmode&#x27;</span>;
              arg_posto_caixamode <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span>       args-&gt;&gt;<span style="color: #4d99bf">&#x27;posto_caixamode&#x27;</span>;
            
              _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
              _posto tweeks.posto;
              _next <span style="color: #C76A40">record</span>;
              ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
            
            <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            
              _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
            
              <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_posto_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">if</span> (
                  <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * ) &gt; <span style="color: #C76A40">0</span>
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.posto p
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> p.posto_matricula = arg_posto_matricula
                ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
                  <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;Código do posto já existe!&#x27;</span>;
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
                
                _posto := jsonb_populate_record( _posto, args );
                
                _posto.posto_colaborador_atualizacao := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
                _posto.posto_dataatualizacao := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
                _posto._branch_uid := ___branch;
                _posto.posto_id := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
                _posto.posto_espaco_auth := arg_espaco_auth;
                _posto.posto_tposto_id := arg_tposto_id;
                _posto.posto_colaborador_id := arg_colaborador_id;
                _posto.posto_designacao := arg_posto_designacao;
                _posto.posto_multiplecaixa := coalesce( arg_posto_multiplecaixa, <span style="color: #C76A40;
            font-weight: 800;">true</span> );
                _posto.posto_matricula := arg_posto_matricula;
                _posto.posto_chave := tweeks.__generate_posto_chave();
                _posto.posto_authmode := arg_posto_authmode;
                _posto.posto_caixamode := arg_posto_caixamode;
            
                <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _posto <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets_in( _posto );
            
                <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.chave
                <span style="color: #C76A40;
            font-weight: 800;">set</span> chave_definitiva = _posto.posto_chave
                <span style="color: #C76A40;
            font-weight: 800;">where</span> chave_temporarai = _posto.posto_matricula
                ;
              <span style="color: #C76A40;
            font-weight: 800;">else</span>
                <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _posto
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.posto p
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> lib.sets_up( p, replacer := args||jsonb_build_object(
                    <span style="color: #4d99bf">&#x27;posto_tposto_id&#x27;</span>, arg_tposto_id,
                    <span style="color: #4d99bf">&#x27;posto_designacao&#x27;</span>, arg_posto_designacao,
                    <span style="color: #4d99bf">&#x27;posto_multiplecaixa&#x27;</span>, coalesce( arg_posto_multiplecaixa, <span style="color: #C76A40;
            font-weight: 800;">true</span> ),
                    <span style="color: #4d99bf">&#x27;posto_authmode&#x27;</span>, arg_posto_authmode,
                    <span style="color: #4d99bf">&#x27;posto_caixamode&#x27;</span>, arg_posto_caixamode
                  )) up <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                <span style="color: #C76A40;
            font-weight: 800;">where</span> p.posto_id = arg_posto_id
                ;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            
              <span style="color: #888">-- Desativar os antigos espaços alocados ao posto</span>
              <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.aloca
                <span style="color: #C76A40;
            font-weight: 800;">set</span>
                  aloca_estado = _const.maguita_aloca_estado_fechado,
                  aloca_colaborador_atualizacao = arg_colaborador_id,
                  aloca_dataatualizacao = <span style="color: #397300">current_timestamp</span>
                <span style="color: #C76A40;
            font-weight: 800;">where</span> aloca_posto_id = _posto.posto_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> aloca_estado = _const.maguita_aloca_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> aloca_espaco_destino != <span style="color: #C76A40;
            font-weight: 800;">all</span>( arg_espaco_destino )
              ;
              
              <span style="color: #C76A40;
            font-weight: 800;">for</span> _next <span style="color: #C76A40;
            font-weight: 800;">in</span> 
                <span style="color: #C76A40;
            font-weight: 800;">with</span> __aloca <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                  <span style="color: #C76A40;
            font-weight: 800;">select</span>
                      (e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;espaco_id&#x27;</span>)::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> espaco_id,
                      (e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;serie_faturarecibo&#x27;</span>)::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> serie_faturarecibo,
                      (e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;serie_fatura&#x27;</span>)::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> serie_fatura
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;arg_espaco_destino&#x27;</span>) e( doc )
                ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    _posto.posto_id,
                    n.*,
                    arg_espaco_auth,
                    arg_colaborador_id,
                    al.aloca_id,
                    coalesce( arg_posto_montanteinicial, <span style="color: #C76A40">0</span> )
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __aloca n 
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.aloca al <span style="color: #C76A40;
            font-weight: 800;">on</span> n.espaco_id = al.aloca_espaco_destino
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> al.aloca_posto_id = _posto.posto_id
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> al.aloca_estado = _const.maguita_aloca_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">where</span> al.aloca_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                  <span style="color: #C76A40;
            font-weight: 800;">or</span> coalesce( al.aloca_serie_fatura, lib.to_uuid(<span style="color: #C76A40">0</span>) ) != coalesce( n.serie_fatura, al.aloca_serie_fatura, lib.to_uuid(<span style="color: #C76A40">0</span>) )
                  <span style="color: #C76A40;
            font-weight: 800;">or</span> coalesce( al.aloca_serie_faturarecibo, lib.to_uuid(<span style="color: #C76A40">0</span>) ) != coalesce( n.serie_faturarecibo, al.aloca_serie_faturarecibo, lib.to_uuid(<span style="color: #C76A40">0</span>) )
              <span style="color: #C76A40;
            font-weight: 800;">loop</span> 
                <span style="color: #C76A40;
            font-weight: 800;">if</span> _next.aloca_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                  <span style="color: #888">-- Desativar os antigos espaços alocados ao posto</span>
                  <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.aloca
                    <span style="color: #C76A40;
            font-weight: 800;">set</span>
                      aloca_estado = _const.maguita_aloca_estado_fechado,
                      aloca_colaborador_atualizacao = arg_colaborador_id,
                      aloca_dataatualizacao = <span style="color: #397300">current_timestamp</span>
                    <span style="color: #C76A40;
            font-weight: 800;">where</span> aloca_posto_id = _posto.posto_id
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> aloca_id = _next.aloca_id
                  ;
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
                
                <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.aloca (
                  aloca_posto_id, 
                  aloca_espaco_destino,
                  aloca_espaco_auth,
                  aloca_colaborador_id,
                  aloca_montante,
                  aloca_serie_faturarecibo,
                  aloca_serie_fatura,
                  _branch_uid
                )  <span style="color: #C76A40;
            font-weight: 800;">values</span> (
                  _next.posto_id,
                  _next.espaco_id,
                  arg_espaco_auth,
                  arg_colaborador_id,
                  coalesce( arg_posto_montanteinicial, <span style="color: #C76A40">0.0</span> ),
                  _next.serie_faturarecibo,
                  _next.serie_fatura,
                  ___branch
                );
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
            
              <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
                  <span style="color: #4d99bf">&#x27;posto&#x27;</span>, _posto,
                  <span style="color: #4d99bf">&#x27;aloca&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">array</span>(
                      <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( a )
                      <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.aloca a
                      <span style="color: #C76A40;
            font-weight: 800;">where</span> a.aloca_posto_id = _posto.posto_id
                        <span style="color: #C76A40;
            font-weight: 800;">and</span> a.aloca_estado = _const.maguita_aloca_estado_ativo
                    )
                );
            <span style="color: #C76A40;
            font-weight: 800;">end</span>;
            $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_generate_chave {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_generate_chave(args <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _chave tweeks.chave;
          arg_chave_descricao <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_chave_descricao&#x27;</span>;
          letters <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;
          numbers <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;0123456789&#x27;</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _chave.chave_temporarai := format( <span style="color: #4d99bf">&#x27;%s-%s-%s&#x27;</span>,
              lib.dset_random_text( letters, <span style="color: #C76A40">3</span> ),
              lib.dset_random_text( numbers||letters||numbers, <span style="color: #C76A40">3</span> ),
              lib.dset_random_text( numbers, <span style="color: #C76A40">3</span> )
          );
          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.chave(
            chave_temporarai,
            chave_descricao
          ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
            _chave.chave_temporarai,
            arg_chave_descricao
          ) <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _chave;
          <span style="color: #C76A40;
            font-weight: 800;">return next</span>  to_jsonb( _chave );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_reg_caixa {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_reg_caixa(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para registar uma nova caixa
            args := {
              arg_espaco_auth: ID
              arg_posto_id: ID
              arg_colaborador_id: ID
              caixa_montanteinicial: MONTANTE
            }
          \*\/</span>

          arg_posto_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_caixa_montanteinicial <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;caixa_montanteinicial&#x27;</span>;

          _data <span style="color: #C76A40">record</span>;
          _posto tweeks.posto;
          _caixa tweeks.caixa;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _posto
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.posto
            <span style="color: #C76A40;
            font-weight: 800;">where</span> posto_id = arg_posto_id
          ;

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">with</span> __aloca <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
              a.aloca_posto_id,
              sum( a.aloca_montante ) <span style="color: #C76A40;
            font-weight: 800;">as</span> aloca_montante
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.aloca a
            <span style="color: #C76A40;
            font-weight: 800;">where</span> a.aloca_estado = _const.maguita_aloca_estado_ativo
              <span style="color: #C76A40;
            font-weight: 800;">and</span> a.aloca_posto_id = arg_posto_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">case</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> _posto.posto_caixamode = _const.maguita_posto_caixamodo_posto <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> _posto.posto_caixamode = _const.maguita_posto_caixamodo_espaco <span style="color: #C76A40;
            font-weight: 800;">then</span> a.aloca_espaco_destino = arg_espaco_auth
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> _posto.posto_caixamode = _const.maguita_posto_caixamodo_pessoal <span style="color: #C76A40;
            font-weight: 800;">then</span> a.aloca_espaco_destino = arg_espaco_auth
                    <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>
              <span style="color: #C76A40;
            font-weight: 800;">end</span>
            <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> a.aloca_posto_id
          ), __caixa <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
              cx.caixa_posto_id,
              mode() <span style="color: #C76A40;
            font-weight: 800;">within</span> <span style="color: #C76A40;
            font-weight: 800;">group</span> ( <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> e.espaco_nome <span style="color: #C76A40;
            font-weight: 800;">desc</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> espaco_nome,
              count( cx.caixa_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> posto_caixas
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.caixa cx
                   <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> cx.caixa_espaco_auth = e.espaco_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span> cx.caixa_posto_id = arg_posto_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> cx.caixa_estado = _const.maguita_caixa_estado_ativo
            <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> cx.caixa_posto_id
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
              *,
              coalesce( aloca_montante, <span style="color: #C76A40">0.0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> _aloca_montante
          <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
          <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.posto p
                 <span style="color: #C76A40;
            font-weight: 800;">left join</span> __aloca al <span style="color: #C76A40;
            font-weight: 800;">on</span> p.posto_id = al.aloca_posto_id
                 <span style="color: #C76A40;
            font-weight: 800;">left join</span> __caixa cx <span style="color: #C76A40;
            font-weight: 800;">on</span> p.posto_id = cx.caixa_posto_id
          <span style="color: #C76A40;
            font-weight: 800;">where</span> p.posto_id = arg_posto_id
          ;

          <span style="color: #C76A40;
            font-weight: 800;">if</span>  <span style="color: #C76A40;
            font-weight: 800;">not</span> _posto.posto_multiplecaixa <span style="color: #C76A40;
            font-weight: 800;">and</span> _data.posto_caixas &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false(
                format( <span style="color: #4d99bf">&#x27;Esse posto só pode trabalhar com uma caixa a cada momento, por favor fechar primeiramente a caixa abertas atualmente!&#x27;</span> )
              );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;


          _caixa.caixa_colaborador_id := arg_colaborador_id;
          _caixa.caixa_posto_id := arg_posto_id;
          _caixa.caixa_montanteinicialposto := _data._aloca_montante;
          _caixa.caixa_montanteinicial := arg_caixa_montanteinicial;
          _caixa.caixa_espaco_auth := arg_espaco_auth;
          _caixa.caixa_code := tweeks.__generate_caixa_code( ___branch, arg_colaborador_id, arg_espaco_auth );

          <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _caixa
            <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets_in(_caixa  )
          ;

          _posto.posto_estado := _const.maguita_posto_estado_aberto;
          <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _posto <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets_up( _posto );

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true( jsonb_build_object(
              <span style="color: #4d99bf">&#x27;caixa&#x27;</span>, _caixa,
              <span style="color: #4d99bf">&#x27;posto&#x27;</span>, _posto
            ));
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface main {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.main(<span style="color: #C76A40;
            font-weight: 800;">function</span> <span style="color: #C76A40">regproc</span>, args <span style="color: #C76A40">jsonb</span>, mode <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #4d99bf">&#x27;dev&#x27;</span>::<span style="color: #C76A40">text</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          MODE_PROD <span style="color: #C76A40;
            font-weight: 800;">constant</span> <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;prod&#x27;</span>;
          MODE_TEST <span style="color: #C76A40;
            font-weight: 800;">constant</span> <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;test&#x27;</span>;
          MODE_DEV <span style="color: #C76A40;
            font-weight: 800;">constant</span> <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;dev&#x27;</span>;
          MODE_PUB <span style="color: #C76A40;
            font-weight: 800;">constant</span> <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;public&#x27;</span>;
          _statement <span style="color: #C76A40">text</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #888">--language=PostgreSQL</span>
          _statement := format( $<span style="color: #C76A40;
            font-weight: 800;">sql</span>$
              <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( t )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> %s ( <span style="color: #1f7199">$1</span> ) t;
          $<span style="color: #C76A40;
            font-weight: 800;">sql</span>$, <span style="color: #C76A40;
            font-weight: 800;">function</span> );

          <span style="color: #888">-- Mode DEV don&#x27;t try-catch error</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> mode = MODE_DEV <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">execute</span> _statement <span style="color: #C76A40;
            font-weight: 800;">using</span> args;


          <span style="color: #888">-- Mode PROD and TEST try-catch error</span>
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            <span style="color: #C76A40;
            font-weight: 800;">begin</span>
              <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">execute</span> _statement <span style="color: #C76A40;
            font-weight: 800;">using</span> args;

            <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span>
              <span style="color: #C76A40;
            font-weight: 800;">declare</span>
                e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
                _catch lib.res;
              <span style="color: #C76A40;
            font-weight: 800;">begin</span>
                <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
                _catch :=  lib.res_exception( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> mode <span style="color: #C76A40;
            font-weight: 800;">in</span>( MODE_PROD, MODE_PUB ) <span style="color: #C76A40;
            font-weight: 800;">then</span> format( <span style="color: #4d99bf">&#x27;Algo deu mal, tente novamente mais tarde ou proucure pelo suporte! Error Code: (%s)&#x27;</span>, _ex.e )
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> mode = MODE_TEST <span style="color: #C76A40;
            font-weight: 800;">then</span> _ex.m
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> _ex.m
                  <span style="color: #C76A40;
            font-weight: 800;">end</span>
                );
                <span style="color: #C76A40;
            font-weight: 800;">return next</span> to_jsonb( _catch );
              <span style="color: #C76A40;
            font-weight: 800;">end</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_load_caixa_auth {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_load_caixa_auth(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              arg_colaborador_id: UUID,
              arg_espaco_auth: UUID,
              arg_posto_id:UUID
              auth: BOOLEAN
            }
           \*\/</span>
          arg_posto_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_id&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _posto tweeks.posto;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _posto <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.posto;

          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span>
          __deposito <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                dep.deposito_caixa_id,
                dep.deposito_currency_id,
                cur.currency_id,
                cur.currency_name,
                cur.currency_code,
                sum( dep.deposito_montantefinal ) deposito_montantefinal,
                sum( dep.deposito_montante ) deposito_montante,
                sum( dep.deposito_montantemoeda ) deposito_montantemoeda,
                sum( dep.deposito_montantetroco ) deposito_montantetroco
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.deposito dep
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> geoinfo.currency cur <span style="color: #C76A40;
            font-weight: 800;">on</span> dep.deposito_currency_id = cur.currency_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> dep.deposito_estado = _const.maguita_deposito_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> dep._branch_uid = branch
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> dep.deposito_caixa_id,
                dep.deposito_currency_id,
                cur.currency_id,
                cur.currency_name,
                cur.currency_code
          ),__deposito_caixa <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  dep.deposito_caixa_id,
                  sum( dep.deposito_montantefinal ) <span style="color: #C76A40;
            font-weight: 800;">as</span> deposito_montantefinal,
                  jsonb_object_agg(
                      dep.currency_code, jsonb_build_object(
                          <span style="color: #4d99bf">&#x27;deposito_montantemoeda&#x27;</span>, deposito_montantemoeda,
                          <span style="color: #4d99bf">&#x27;deposito_montantefinal&#x27;</span>, deposito_montantefinal,
                          <span style="color: #4d99bf">&#x27;deposito_montante&#x27;</span>, deposito_montante,
                          <span style="color: #4d99bf">&#x27;deposito_montantetroco&#x27;</span>, deposito_montantetroco
                      )
                  ) <span style="color: #C76A40;
            font-weight: 800;">as</span> deposito_montantemoeda,
                  sum( dep.deposito_montante ) <span style="color: #C76A40;
            font-weight: 800;">as</span> deposito_montante,
                  sum( dep.deposito_montantefinal ) <span style="color: #C76A40;
            font-weight: 800;">as</span> deposito_montantefinal,
                  sum( dep.deposito_montantetroco ) <span style="color: #C76A40;
            font-weight: 800;">as</span> deposito_montantetroco
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __deposito dep
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                  dep.deposito_caixa_id
          ),__posto <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                c.caixa_id,
                c.caixa_estado,
                c.caixa_montanteinicial,
                c.caixa_montanteinicialposto,
                p.posto_caixamode,
                dep.*
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.posto p
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.caixa c <span style="color: #C76A40;
            font-weight: 800;">on</span> p.posto_id = c.caixa_posto_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> c.caixa_estado = _const.maguita_caixa_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">case</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> p.posto_caixamode = _const.maguita_posto_caixamodo_pessoal <span style="color: #C76A40;
            font-weight: 800;">then</span> c.caixa_colaborador_id = arg_colaborador_id
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> p.posto_caixamode = _const.maguita_posto_caixamodo_espaco  <span style="color: #C76A40;
            font-weight: 800;">then</span> c.caixa_espaco_auth    = arg_espaco_auth
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> p.posto_caixamode = _const.maguita_posto_caixamodo_posto   <span style="color: #C76A40;
            font-weight: 800;">then</span> c.caixa_posto_id       = arg_posto_id
                    <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40;
            font-weight: 800;">false</span>
                  <span style="color: #C76A40;
            font-weight: 800;">end</span>
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> __deposito_caixa dep <span style="color: #C76A40;
            font-weight: 800;">on</span> c.caixa_id = dep.deposito_caixa_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> p.posto_id = arg_posto_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> p._branch_uid = branch
                <span style="color: #C76A40;
            font-weight: 800;">and</span> c._branch_uid = branch
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( p )
            <span style="color: #C76A40;
            font-weight: 800;">from</span> __posto p;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __branch_uid {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__branch_uid(_colaborador_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>, _espaco_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">uuid</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">select</span> b.branch_uid
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.branch b
              <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> b.branch_uid = e.espaco_branch_uid
                <span style="color: #C76A40;
            font-weight: 800;">and</span> e.espaco_id = _espaco_uid
              <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.colaborador c <span style="color: #C76A40;
            font-weight: 800;">on</span> b.branch_uid = c.colaborador_branch_uid
                <span style="color: #C76A40;
            font-weight: 800;">and</span> c.colaborador_id = _colaborador_uid
            <span style="color: #C76A40;
            font-weight: 800;">where</span> coalesce ( _colaborador_uid, _espaco_uid ) <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
              <span style="color: #C76A40;
            font-weight: 800;">and</span> ( e.espaco_branch_uid = c.colaborador_branch_uid
                <span style="color: #C76A40;
            font-weight: 800;">or</span>( _colaborador_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> e.espaco_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> )
                <span style="color: #C76A40;
            font-weight: 800;">or</span>( _espaco_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> c.colaborador_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> )
              )
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_report_estatistica_posto {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_report_estatistica_posto(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função devolve os relatorio do posto todos
            -- columns
              Data,
              Posta,
              Espaço,
              Caixa,
              Montante, -- Montante geradao
              Pagos,    -- Montante pago
              Contas    -- Total de contas abertas


            filter := {
              arg_data_registro: { start: DATE, end: DATE }
              arg_posto_id: ID,
              arg_colaborador_vendedor: ID,
              arg_espaco_venda: ID,
              arg_periodo_required:  { &quot;key&quot;: &quot;dd-mm-yyyy&quot;, &quot;label&quot;: &quot;dd&quot;, &quot;title&quot;: &quot;dia dd &#x27;de&#x27; Mon &#x27;de&#x27; YYYY&quot;, &quot;interval&quot;: INTERVAL }



            }
          \*\/</span>

          arg_data_registro_start <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_registro&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;start&#x27;</span>;
          arg_data_registro_end <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_registro&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;end&#x27;</span>;

          arg_periodo_required_key <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> := <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_periodo_required&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;key&#x27;</span>;
          arg_periodo_required_label <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> := <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_periodo_required&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;label&#x27;</span>;
          arg_periodo_required_title <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> := <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_periodo_required&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;title&#x27;</span>;
          arg_periodo_required_interval <span style="color: #C76A40">interval</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> := <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_periodo_required&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;interval&#x27;</span>;


          arg_posto_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_id&#x27;</span>;
          arg_espaco_venda <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_venda&#x27;</span>;
          arg_colaborador_vendedor <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_vendedor&#x27;</span>;

          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );

          _data <span style="color: #C76A40">record</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">select</span> min( cx.caixa_dataregistro::<span style="color: #C76A40">date</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> absolut_start, max( cx.caixa_dataregistro::<span style="color: #C76A40">date</span>) <span style="color: #C76A40;
            font-weight: 800;">as</span> max_date    <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.caixa cx
          ;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_data_registro_start <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> arg_data_registro_start &gt; _data.absolut_start <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _data.absolut_start := arg_data_registro_start;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _data.absolut_start &gt; <span style="color: #397300">current_date</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _data.absolut_start := <span style="color: #397300">current_date</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _data.max_date := <span style="color: #397300">current_date</span>;
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_data_registro_end <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> arg_data_registro_end &lt; <span style="color: #397300">current_date</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> arg_data_registro_end &gt;= _data.absolut_start <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _data.max_date := arg_data_registro_end;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;


          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
              <span style="color: #C76A40;
            font-weight: 800;">with</span> <span style="color: #C76A40;
            font-weight: 800;">recursive</span> dates( data ) <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                  <span style="color: #C76A40;
            font-weight: 800;">values</span> ( _data.absolut_start )
                <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
                  <span style="color: #C76A40;
            font-weight: 800;">select</span> d.data + arg_periodo_required_interval
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> dates d
                    <span style="color: #C76A40;
            font-weight: 800;">where</span> d.data + arg_periodo_required_interval &lt;= _data.max_date
              )
              <span style="color: #C76A40;
            font-weight: 800;">select</span> lib.jsonb_values( to_jsonb( pos ) || to_jsonb( cx )|| to_jsonb( co ) || to_jsonb( pos ),
                <span style="color: #4d99bf">&#x27;caixa_id&#x27;</span>,
                <span style="color: #4d99bf">&#x27;caixa_montanteinicial&#x27;</span>,
                <span style="color: #4d99bf">&#x27;caixa_montantefecho&#x27;</span>,
                <span style="color: #4d99bf">&#x27;caixa_quantidadecheque&#x27;</span>,
                <span style="color: #4d99bf">&#x27;caixa_observacao&#x27;</span>,
                <span style="color: #4d99bf">&#x27;caixa_dataregistro&#x27;</span>,
                <span style="color: #4d99bf">&#x27;posto_designacao&#x27;</span>,
                <span style="color: #4d99bf">&#x27;espaco_nome&#x27;</span>,
                <span style="color: #4d99bf">&#x27;posto_designacao&#x27;</span>,
                <span style="color: #4d99bf">&#x27;espaco_descricao&#x27;</span>,
                <span style="color: #4d99bf">&#x27;colaborador_nome&#x27;</span>
              ) || jsonb_build_object(
                <span style="color: #4d99bf">&#x27;colaborador_nomecompleto&#x27;</span>, format( <span style="color: #4d99bf">&#x27;%s %s&#x27;</span>, co.colaborador_nome, co.colaborador_apelido ),
                <span style="color: #4d99bf">&#x27;caixa_datafecho&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">case</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> cx.caixa_estado = _const.caixa_estado_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span> cx.caixa_dataatualizacao <span style="color: #C76A40;
            font-weight: 800;">end</span>,
                <span style="color: #4d99bf">&#x27;caixa_totalcobrado&#x27;</span>, cxa.caixa_totalcobrado,
                <span style="color: #4d99bf">&#x27;caixa_montantepagamento&#x27;</span>, coalesce( cxa.caixa_montantepagamento, <span style="color: #C76A40">0</span> ),
                <span style="color: #4d99bf">&#x27;caixa_contasaberta&#x27;</span>, coalesce( cxc.caixa_contasaberta, <span style="color: #C76A40">0</span> ),
                <span style="color: #4d99bf">&#x27;caixa_contafechada&#x27;</span>, coalesce( cxcf.caixa_contafechada, <span style="color: #C76A40">0</span> ),
                <span style="color: #4d99bf">&#x27;caixa_estado&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">case</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> cx.caixa_estado = _const.cambio_estado_ativo <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #4d99bf">&#x27;Ativo&#x27;</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> cx.caixa_estado = _const.cambio_estado_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #4d99bf">&#x27;Fechado&#x27;</span>
                  <span style="color: #C76A40;
            font-weight: 800;">end</span>
              )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> dates dt
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.posto post <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> post.posto_espaco_destino = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.caixa cx <span style="color: #C76A40;
            font-weight: 800;">on</span> post.posto_id = cx.caixa_posto_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> cx.caixa_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.amortizacao amort <span style="color: #C76A40;
            font-weight: 800;">on</span> cx.caixa_id = amort.amortizacao_caixa_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> amort.amortizacao_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.conta ct <span style="color: #C76A40;
            font-weight: 800;">on</span> cx.caixa_id = ct.conta_caixa_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.conta ctclose <span style="color: #C76A40;
            font-weight: 800;">on</span> cx.caixa_id = ct.conta_caixa_fechopagamento
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
            ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_taxa {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_taxa(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              arg_espaco_auth: ID,
              arg_colaborador_id: ID,
              arg_tipoimposto_id: ID,
              arg_taxa_percentagem: ID,
              arg_taxa_taxa: VALOR
            }
           \*\/</span>

          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_tipoimposto_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_tipoimposto_id&#x27;</span>;
          arg_taxa_percentagem <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_taxa_percentagem&#x27;</span>;
          arg_taxa_taxa <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_taxa_taxa&#x27;</span>;

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _taxa tweeks.taxa;
          ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #888">-- Desativar todas as taxas atual</span>
          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.taxa
            <span style="color: #C76A40;
            font-weight: 800;">set</span> taxa_estado = _const.taxa_estado_fechado,
                taxa_dataatualizacao = <span style="color: #397300">current_timestamp</span>,
                taxa_colaborador_atualizacao = arg_colaborador_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span> taxa_espaco_auth = arg_espaco_auth
              <span style="color: #C76A40;
            font-weight: 800;">and</span> taxa_tipoimposto_id = arg_tipoimposto_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> taxa_estado = _const.taxa_estado_ativo
              <span style="color: #C76A40;
            font-weight: 800;">and</span> _branch_uid = ___branch
          ;

          <span style="color: #888">-- Criar o novo imposto</span>
          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.taxa (
            taxa_tipoimposto_id,
            taxa_colaborador_id,
            taxa_percentagem,
            taxa_taxa,
            taxa_espaco_auth
          ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
            arg_tipoimposto_id,
            arg_colaborador_id,
            arg_taxa_percentagem,
            arg_taxa_taxa,
            arg_espaco_auth
          ) <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _taxa;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;taxa&#x27;</span>, _taxa
          );

        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __get_branch {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__get_branch(<span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.branch
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$<span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.branch b <span style="color: #C76A40;
            font-weight: 800;">where</span> b.branch_uid = <span style="color: #1f7199">$1</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_load_conta_dia {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_load_conta_dia(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\** Essa função serve para devolver as compras do dia em uma data especifica
              filter := {
                arg_conta_data: DATE
                arg_posto_id: DATE
              }
             \*\/</span>
            _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
            arg_conta_data <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_conta_data&#x27;</span>;
            arg_posto_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_id&#x27;</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

            _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
            arg_conta_data := coalesce( arg_conta_data, <span style="color: #397300">current_date</span> );

            <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_conta_data &lt; <span style="color: #397300">current_date</span> - make_interval( days := <span style="color: #C76A40">7</span> ) <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">return</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">return query</span>
                <span style="color: #C76A40;
            font-weight: 800;">with</span> __conta <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                    <span style="color: #C76A40;
            font-weight: 800;">select</span>
                        ct.conta_id,
                        ct.conta_data,
                        ct.conta_dataregistro,
                        ct.conta_titular,
                        ct.conta_titularnif,
                        ct.conta_montante,
                        ct.conta_numerofatura,
                        ct.conta_numero,
                        p.posto_designacao,
                        p.posto_matricula,
                        de.deposito_montante,
                        de.deposito_montantemoeda,
                        de.deposito_montantetroco,
                        de.deposito_montantefinal,
                        de.deposito_taxacambio,
                        cu.currency_id,
                        cu.currency_code,
                        cu.currency_name,
                        co.colaborador_id,
                        co.colaborador_nome
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
                        <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.posto p <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_posto_fecho = p.posto_id
                        <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.deposito de <span style="color: #C76A40;
            font-weight: 800;">on</span> ( de.deposito_referencia-&gt;&gt;<span style="color: #4d99bf">&#x27;conta_id&#x27;</span> )::<span style="color: #C76A40">uuid</span> = ct.conta_id
                        <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> geoinfo.currency cu <span style="color: #C76A40;
            font-weight: 800;">on</span> de.deposito_currency_id = cu.currency_id
                        <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.colaborador co <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_colaborador_fecho = co.colaborador_id
                    <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_posto_fecho = arg_posto_id
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_estado = _const.maguita_conta_estado_fechado
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> ct._tgrupo_id = _const.maguita_tgrupo_cnormal
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_datafecho::<span style="color: #C76A40">date</span> = arg_conta_data
                ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _ct )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __conta _ct
            ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_colaborador {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_colaborador(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\**
              Essa função sere para carregar os colaborador apartir dos filtros expecificados
              filetr := {
                arg_espaco_auth: ID
              }
             \*\/</span>
            arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
            arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
            _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            _const :=  map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

            <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span>
                __espacos <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                    <span style="color: #C76A40;
            font-weight: 800;">select</span>
                           e.espaco_id,
                           e.espaco_nivel,
                           e.espaco_nome,
                           tr.trabalha_colaborador_proprietario
                       <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.espaco e
                          <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.trabalha tr <span style="color: #C76A40;
            font-weight: 800;">on</span> e.espaco_id = tr.trabalha_espaco_destino
                            <span style="color: #C76A40;
            font-weight: 800;">and</span> tr.trabalha_estado = _const.maguita_trabalha_estado_ativo
                        <span style="color: #C76A40;
            font-weight: 800;">where</span> e.espaco_estado = _const.maguita_espaco_estado_ativo
                ), __colaborador <span style="color: #C76A40;
            font-weight: 800;">as</span>(
                    <span style="color: #C76A40;
            font-weight: 800;">select</span>
                        co.colaborador_id,
                        co.colaborador_nome,
                        co.colaborador_apelido,
                        co.colaborador_email,
                        co.colaborador_estado,
                        co.colaborador_tipo,
                        auth._colaborador_estado_desc( co.colaborador_estado ) <span style="color: #C76A40;
            font-weight: 800;">as</span> colaborador_estado_desc,
                        co.colaborador_accesso,
                        auth._colaborador_accesso_desc( co.colaborador_accesso ) <span style="color: #C76A40;
            font-weight: 800;">as</span> colaborador_accesso_desc,
                        co.colaborador_foto,
                        s2.tsexo_id,
                        s2.tsexo_nome,
                        s2.tsexo_codigo,
                        co.colaborador_datanascimento,
                        co.colaborador_nif,
                        co.colaborador_dataregisto,
                        co.colaborador_espaco_auth,
                        min( e.espaco_nivel ) <span style="color: #C76A40;
            font-weight: 800;">as</span> espaco_minnivel,
                        max( e.espaco_nivel ) <span style="color: #C76A40;
            font-weight: 800;">as</span> espaco_maxnivel,
                        jsonb_agg( to_jsonb( e ) ) <span style="color: #C76A40;
            font-weight: 800;">as</span> colaborador_espacotrabalha,
                        array_agg( e.espaco_id )||co.colaborador_espaco_auth <span style="color: #C76A40;
            font-weight: 800;">as</span> espacos
                      <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.colaborador co
                        <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.tsexo s2 <span style="color: #C76A40;
            font-weight: 800;">ON</span> co.colaborador_tsexo_id = s2.tsexo_id
                        <span style="color: #C76A40;
            font-weight: 800;">left join</span> __espacos e <span style="color: #C76A40;
            font-weight: 800;">on</span> co.colaborador_id = e.trabalha_colaborador_proprietario
                      <span style="color: #C76A40;
            font-weight: 800;">where</span> co.colaborador_tipo <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.colaborador_tipo_user, _const.colaborador_tipo_user_master )
                        <span style="color: #C76A40;
            font-weight: 800;">and</span> ( co.colaborador_estado = _const.colaborador_estado_ativo <span style="color: #C76A40;
            font-weight: 800;">or</span> co.colaborador_tipo = _const.colaborador_tipo_user_master )
                      <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> co.colaborador_id,
                        s2.tsexo_id
                )  <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( co )
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __colaborador co
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> arg_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span> ( co.espacos )
                <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                    <span style="color: #C76A40;
            font-weight: 800;">case</span>
                      <span style="color: #C76A40;
            font-weight: 800;">when</span> co.colaborador_espaco_auth = arg_espaco_auth <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">1</span>
                      <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">2</span>
                    <span style="color: #C76A40;
            font-weight: 800;">end</span>,
                    espaco_minnivel,
                    <span style="color: #C76A40;
            font-weight: 800;">case</span>
                        <span style="color: #C76A40;
            font-weight: 800;">when</span> co.colaborador_accesso = _const.colaborador_accesso_ativo <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">1</span>
                        <span style="color: #C76A40;
            font-weight: 800;">when</span> co.colaborador_accesso = _const.colaborador_accesso_pendente <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">2</span>
                        <span style="color: #C76A40;
            font-weight: 800;">when</span> co.colaborador_accesso = _const.colaborador_accesso_fechado <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">3</span>
                    <span style="color: #C76A40;
            font-weight: 800;">end</span>,
                    co.colaborador_nome,
                    co.colaborador_apelido

            ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __conta_adjust {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__conta_adjust(arg_cliente_id <span style="color: #C76A40">uuid</span>, arg_conta_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>, _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>())
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(conta_id <span style="color: #C76A40">uuid</span>, conta_montante <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, conta_montanteamortizado <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, conta_montantependente <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, conta_pago <span style="color: #C76A40">boolean</span>, conta_pagamento <span style="color: #C76A40">smallint</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _balanco <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span>
              coalesce( sum( d.deposito_montantefinal ), <span style="color: #C76A40">0.0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> deposito_montantefinal
              <span style="color: #C76A40;
            font-weight: 800;">into</span> _balanco
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.deposito d
            <span style="color: #C76A40;
            font-weight: 800;">where</span> d.deposito_cliente_id = arg_cliente_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> d.deposito_estado = _const.maguita_deposito_estado_ativo
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
          <span style="color: #C76A40;
            font-weight: 800;">with</span> <span style="color: #C76A40;
            font-weight: 800;">recursive</span> __conta <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                row_number() <span style="color: #C76A40;
            font-weight: 800;">over</span> () <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_posicao,
                ct.conta_id,
                ct.conta_montante,
                ct.conta_datafecho,
                ct.conta_dataregistro
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_cliente_id = arg_cliente_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_estado <span style="color: #C76A40;
            font-weight: 800;">in</span> (
                  _const.maguita_conta_estado_fechado
                )
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ct.conta_datafecho,
                ct.conta_numero,
                ct.conta_dataregistro
          ), __ajuste <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
              _ct.*,
                _balanco.deposito_montantefinal <span style="color: #C76A40;
            font-weight: 800;">as</span> deposito_montante,
                arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> _ct.conta_id = arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_find,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> _balanco.deposito_montantefinal &gt;= _ct.conta_montante <span style="color: #C76A40;
            font-weight: 800;">then</span> _ct.conta_montante
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> _balanco.deposito_montantefinal &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> _balanco.deposito_montantefinal
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">0</span>
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_montanteamortizado,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> _balanco.deposito_montantefinal &gt;= _ct.conta_montante <span style="color: #C76A40;
            font-weight: 800;">then</span> _balanco.deposito_montantefinal - _ct.conta_montante
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">0</span>
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> deposito_restante
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __conta _ct
              <span style="color: #C76A40;
            font-weight: 800;">where</span> _ct.conta_posicao = <span style="color: #C76A40">1</span>
            <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  _ct.*,
                  _balanco.deposito_montantefinal <span style="color: #C76A40;
            font-weight: 800;">as</span> deposito_montante,
                  arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> _ct.conta_id = arg_conta_id <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_find,
                  <span style="color: #C76A40;
            font-weight: 800;">case</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> _aj.deposito_restante &gt;= _ct.conta_montante <span style="color: #C76A40;
            font-weight: 800;">then</span> _ct.conta_montante
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> _aj.deposito_restante &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> _aj.deposito_restante
                    <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">0</span>
                  <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_montanteamortizado,
                  <span style="color: #C76A40;
            font-weight: 800;">case</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> _aj.deposito_restante &gt;= _ct.conta_montante <span style="color: #C76A40;
            font-weight: 800;">then</span> _aj.deposito_restante - _ct.conta_montante
                    <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">0</span>
                  <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> deposito_restante
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __conta _ct
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __ajuste _aj <span style="color: #C76A40;
            font-weight: 800;">on</span> _ct.conta_posicao + <span style="color: #C76A40">1</span> = _aj.conta_posicao
                <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _aj.conta_find
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
                _aj.conta_id,
                _aj.conta_montante,
                _aj.conta_montanteamortizado,
                _aj.conta_montante - _aj.conta_montanteamortizado,
                _aj.conta_montante = _aj.conta_montanteamortizado,
                <span style="color: #C76A40;
            font-weight: 800;">case</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> _aj.conta_montanteamortizado = <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">2</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> _aj.conta_montanteamortizado &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> _aj.conta_montanteamortizado &lt; _aj.conta_montante <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">1</span>
                  <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">0</span>
                <span style="color: #C76A40;
            font-weight: 800;">end</span>::<span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_pagamento
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __ajuste _aj
              <span style="color: #C76A40;
            font-weight: 800;">where</span> _aj.conta_id = coalesce( arg_conta_id, _aj.conta_id )
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_espaco {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_espaco(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para registar os espaços
            args = {
              arg_espaco_auth: ID
              arg_colaborador_id: ID,
              arg_espaco_vender: BOOLEAN,
              arg_espaco_posto_admin: UUID
              arg_espaco_nome: NOME,
              arg_espaco_descricao: NOME,
              arg_espaco_gerarfatura: BOOLEAN,
              arg_espaco_configurar: BOOLEAN,
              arg_branch_uid: UID
            }
           \*\/</span>

          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_vender <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_vender&#x27;</span>;
          arg_espaco_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lib.str_normalize( args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_nome&#x27;</span> );
          arg_espaco_gerarfatura <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lib.str_normalize( args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_gerarfatura&#x27;</span> );
          arg_espaco_configurar <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lib.str_normalize( args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_configurar&#x27;</span> );
          arg_espaco_descricao <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lib.str_normalize( args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_descricao&#x27;</span> );
          arg_branch_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_branch_uid&#x27;</span>;
          arg_espaco_posto_admin <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_posto_admin&#x27;</span>;

          _espaco tweeks.espaco;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">if</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * ) &gt; <span style="color: #C76A40">0</span>
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.espaco esp
              <span style="color: #C76A40;
            font-weight: 800;">where</span> lib.str_normalize( lower( esp.espaco_nome ) ) = lib.str_normalize( lower( arg_espaco_nome ) )
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;@espaco.nome.already-exist&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _espaco.espaco_codigo := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.next( <span style="color: #4d99bf">&#x27;espaco.codigo/seq&#x27;</span>,
              sub := arg_branch_uid::<span style="color: #C76A40">text</span>,
              lpad := <span style="color: #C76A40">2</span>,
              lpad_char := <span style="color: #4d99bf">&#x27;0&#x27;</span>,
              <span style="color: #888">--language=PostgreSQL</span>
              exist := format( <span style="color: #4d99bf">&#x27;select * from tweeks.espaco where espaco_codigo = $1 and coalesce( _branch_uid, espaco_branch_uid ) = (%L)::uuid&#x27;</span>, arg_branch_uid ),
              exist_limit := <span style="color: #C76A40">1000</span>
            );

          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.espaco (
            espaco_branch_uid,
            espaco_espaco_id,
            espaco_espaco_auth,
            espaco_colaborador_id,
            espaco_nome,
            espaco_descricao,
            espaco_gerarfatura,
            espaco_configurar,
            espaco_vender,
            espaco_codigo,
            espaco_posto_admin
          ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
            arg_branch_uid,
            arg_espaco_auth,
            arg_espaco_auth,
            arg_colaborador_id,
            arg_espaco_nome,
            arg_espaco_descricao,
            arg_espaco_gerarfatura,
            arg_espaco_configurar,
            arg_espaco_vender,
            _espaco.espaco_codigo,
            arg_espaco_posto_admin
          ) <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _espaco;

          <span style="color: #C76A40;
            font-weight: 800;">perform</span> tweeks.funct_reg_cambio(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, _espaco.espaco_id,
              <span style="color: #4d99bf">&#x27;arg_branch_uid&#x27;</span>, arg_branch_uid,
              <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
              <span style="color: #4d99bf">&#x27;arg_currency_id&#x27;</span>, _const.currency_std,
              <span style="color: #4d99bf">&#x27;arg_cambio_taxa&#x27;</span>, <span style="color: #C76A40">1</span>,
              <span style="color: #4d99bf">&#x27;arg_cambio_data&#x27;</span>, make_date( <span style="color: #C76A40">2000</span>, <span style="color: #C76A40">01</span>, <span style="color: #C76A40">01</span> )
          ));

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;espaco&#x27;</span>, _espaco
          );

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_mesa {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_mesa(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\** Essa função serve para deveolver todas as mesas registradas na base de dados\*\/</span>
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">return query</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span> lib.jsonb_values( m,
                  <span style="color: #4d99bf">&#x27;mesa_id&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;mesa_numero&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;mesa_designacao&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;mesa_lotacao&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;mesa_estado&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;mesa_dataregistro&#x27;</span>,
                  <span style="color: #4d99bf">&#x27;mesa_dataatualizacao&#x27;</span>
                )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.mesa m
                <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> m.mesa_numero <span style="color: #C76A40;
            font-weight: 800;">asc</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __generate_guia_code {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__generate_guia_code(_branch <span style="color: #C76A40">uuid</span>, toperacao_id <span style="color: #C76A40">integer</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">text</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          __guia_code <span style="color: #C76A40">text</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">while</span> __guia_code <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>
                __guia_code := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.next( format( <span style="color: #4d99bf">&#x27;guia|%s&#x27;</span>, toperacao_id ), sub := _branch::<span style="color: #C76A40">text</span>, lpad := <span style="color: #C76A40">4</span>, lpad_char := <span style="color: #4d99bf">&#x27;0&#x27;</span> );
                <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
                    <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.guia g
                    <span style="color: #C76A40;
            font-weight: 800;">where</span> g.guia_numero = __guia_code
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> g.guia_toperacao_id = toperacao_id
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> g._braunc_uid = _branch
                  ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
                  __guia_code := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
            <span style="color: #C76A40;
            font-weight: 800;">return</span>  __guia_code;
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface ___override_auth_funct_load_menu {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.___override_auth_funct_load_menu(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              arg_branch_uid: UID
            }
           \*\/</span>
          arg_branch_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_branch_uid&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_id&#x27;</span>;
          _branch tweeks.branch;
          _menus <span style="color: #C76A40">int2</span>[];
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _branch := tweeks.__get_branch( arg_branch_uid );
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _branch.branch_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> arg_colaborador_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _branch := tweeks._get_branch_by_colaborador( arg_colaborador_id );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _branch.branch_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> arg_espaco_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _branch := tweeks._get_branch_by_colaborador( arg_espaco_id );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _menus := <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> e.text <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements_text( _branch.branch_grants-&gt;<span style="color: #4d99bf">&#x27;menu&#x27;</span>) e( <span style="color: #C76A40">text</span> ) );

        <span style="color: #888">--   raise exception &#x27;%&#x27;, args;</span>

          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span>
                         __menu <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                           <span style="color: #C76A40;
            font-weight: 800;">select</span> m.*
                           <span style="color: #C76A40;
            font-weight: 800;">from</span> auth.funct_load_menu( args ) <span style="color: #C76A40;
            font-weight: 800;">as</span> m
                           <span style="color: #C76A40;
            font-weight: 800;">where</span> menu_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _menus )
                              <span style="color: #C76A40;
            font-weight: 800;">or</span> _branch.branch_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                         ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _m )
                       <span style="color: #C76A40;
            font-weight: 800;">from</span> __menu _m;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __generate_retalho_code {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__generate_retalho_code(brc <span style="color: #C76A40">uuid</span>, user_brc <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>, space_brc <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          _code <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;
          _len <span style="color: #C76A40">int</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40">6</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _cluster := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local();
          brc := coalesce( brc, tweeks.__branch_uid( user_brc, space_brc ));

          <span style="color: #C76A40;
            font-weight: 800;">while</span> _code <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>
              _code := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.next( <span style="color: #4d99bf">&#x27;retalho.code/seq&#x27;</span>, sub := brc::<span style="color: #C76A40">text</span>, lpad := _len, lpad_char := <span style="color: #4d99bf">&#x27;0&#x27;</span> );
              <span style="color: #C76A40;
            font-weight: 800;">if</span>( <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
                  <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.retalho c
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> c.retalho_codigo = _code
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> c._branch_uid = coalesce( brc, c._branch_uid )
                )) <span style="color: #C76A40;
            font-weight: 800;">then</span>
                _code := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
          <span style="color: #C76A40;
            font-weight: 800;">return</span> _code;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __sets_generate_documento {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__sets_generate_documento(arg_espaco_auth <span style="color: #C76A40">uuid</span>, arg_tserie <span style="color: #C76A40">integer</span>, arg_serie_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(document <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, serie_id <span style="color: #C76A40">uuid</span>, serie_numero <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, serie_numatorizacao <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, serie_numcertificacao <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, serie_sequencia <span style="color: #C76A40">bigint</span>, serie_quantidade <span style="color: #C76A40">bigint</span>, autorizacao_uid <span style="color: #C76A40">uuid</span>, autorizacao_ano <span style="color: #C76A40">integer</span>, autorizacao_numero <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _serie tweeks.serie;
          _numero_documento <span style="color: #C76A40">varchar</span>;
          ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( <span style="color: #C76A40;
            font-weight: 800;">null</span>, arg_espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _espaco tweeks.espaco;
          _tserie tweeks.tserie;
          _iterate <span style="color: #C76A40">int</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40">0</span>;
          _autorizacao tweeks.autorizacao;
          _data <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">lock</span> <span style="color: #C76A40;
            font-weight: 800;">table</span> tweeks.serie;
            
            _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
            
            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _tserie
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.tserie ts
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ts.tserie_id = arg_tserie
            ;

            <span style="color: #888">-- Obter o espaço superior que pode gerar numero de seire</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> <span style="color: #C76A40;
            font-weight: 800;">recursive</span> __espaco <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> e.*, e.espaco_gerarfatura <span style="color: #C76A40;
            font-weight: 800;">as</span> __generate_serie
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.espaco e
              <span style="color: #C76A40;
            font-weight: 800;">where</span> e.espaco_id =arg_espaco_auth
              <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span> w.*, w.espaco_gerarfatura
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __espaco _e
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco w <span style="color: #C76A40;
            font-weight: 800;">on</span> _e.espaco_espaco_id = w.espaco_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _e.__generate_serie
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _espaco <span style="color: #C76A40;
            font-weight: 800;">from</span> __espaco __e
              <span style="color: #C76A40;
            font-weight: 800;">where</span> __e.__generate_serie
            ;
            
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                count( * ) <span style="color: #C76A40;
            font-weight: 800;">as</span> total_serie
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.serie s
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.autorizacao a <span style="color: #C76A40;
            font-weight: 800;">on</span> s.serie_autorizacao_uid = a.autorizacao_uid
              <span style="color: #C76A40;
            font-weight: 800;">where</span> s.serie_autorizacao_uid = a.autorizacao_uid
                <span style="color: #C76A40;
            font-weight: 800;">and</span> s._branch_uid = ___branch
                <span style="color: #C76A40;
            font-weight: 800;">and</span> a._branch_uid = ___branch
                <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_espaco_id = _espaco.espaco_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_tserie_id = arg_tserie
                <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_estado = _const.maguita_serie_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> a.autorizacao_estado = _const.maguita_autorizacao_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> a.autorizacao_ano = extract( years <span style="color: #C76A40;
            font-weight: 800;">from</span> now() )::<span style="color: #C76A40">int</span>
                <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_id = coalesce( arg_serie_id, s.serie_id )
              <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
            ;
            
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _data.total_serie &gt; <span style="color: #C76A40">1</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;%&#x27;</span>, format( <span style="color: #4d99bf">&#x27;Existe varias series do tipo %I! É necessario especificar qual delas devem ser utilizadas!&#x27;</span>, _tserie.tserie_desc );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">while</span> _numero_documento <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>
              <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.serie s
                <span style="color: #C76A40;
            font-weight: 800;">set</span> serie_sequencia = s.serie_sequencia +<span style="color: #C76A40">1</span>
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.autorizacao a
                <span style="color: #C76A40;
            font-weight: 800;">where</span> s.serie_autorizacao_uid = a.autorizacao_uid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> s._branch_uid = ___branch
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> a._branch_uid = ___branch
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_espaco_id = _espaco.espaco_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_tserie_id = arg_tserie
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_estado = _const.maguita_serie_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> a.autorizacao_estado = _const.maguita_autorizacao_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> a.autorizacao_ano = extract( years <span style="color: #C76A40;
            font-weight: 800;">from</span> now() )::<span style="color: #C76A40">int</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_id = coalesce( arg_serie_id, s.serie_id )
              <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _serie;

              <span style="color: #C76A40;
            font-weight: 800;">if</span> _serie.serie_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;%&#x27;</span>, format( <span style="color: #4d99bf">&#x27;Nenhuma serie de %I disponivel para o ano %I!&#x27;</span>, _tserie.tserie_desc, to_char( <span style="color: #397300">current_date</span>, <span style="color: #4d99bf">&#x27;yyyy&#x27;</span>) );
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

              <span style="color: #C76A40;
            font-weight: 800;">if</span> length( _serie.serie_sequencia::<span style="color: #C76A40">text</span> ) &gt; _tserie.tserie_seqlimit::<span style="color: #C76A40">int</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;%&#x27;</span>, format( <span style="color: #4d99bf">&#x27;O numero de sequencia excede o tamanho maximo definido para e seire&#x27;</span> );
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

              <span style="color: #C76A40;
            font-weight: 800;">if</span> _serie.serie_sequencia &gt; _serie.serie_quantidade <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;%&#x27;</span>, format( <span style="color: #4d99bf">&#x27;Esgotaram todas as series emetidas para a %I! Total de series é de %I.&#x27;</span>, _tserie.tserie_desc, _serie.serie_quantidade );
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

              _autorizacao := tweeks.__get_autorizacao( _serie.serie_autorizacao_uid );

              <span style="color: #888">-- ex: FT0000119000001</span>
              <span style="color: #888">-- TIPO|FIXA|ANO|SEQUENCIA</span>
              _numero_documento := format(
                <span style="color: #4d99bf">&#x27;%s%s%s%s&#x27;</span>,
                _tserie.tserie_code, <span style="color: #888">--TYPE</span>
                lpad( &quot;left&quot;( _serie.serie_numero, _tserie.tserie_numlimit<span style="color: #C76A40">-2</span>), _tserie.tserie_numlimit<span style="color: #C76A40">-2</span>, <span style="color: #4d99bf">&#x27;0&#x27;</span>), <span style="color: #888">--FIXA</span>
                to_char( make_date( _autorizacao.autorizacao_ano, <span style="color: #C76A40">1</span>, <span style="color: #C76A40">1</span> ), <span style="color: #4d99bf">&#x27;yy&#x27;</span> ), <span style="color: #888">--YEAR</span>
                lpad( _serie.serie_sequencia::<span style="color: #C76A40">text</span>, _tserie.tserie_seqlimit::<span style="color: #C76A40">int</span>,  <span style="color: #4d99bf">&#x27;0&#x27;</span> ) <span style="color: #888">--SEQUENCE</span>
              );

              <span style="color: #C76A40;
            font-weight: 800;">if</span> _tserie.tserie_id <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.maguita_tserie_fatura, _const.maguita_tserie_faturarecibo )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
                  <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta c
                    <span style="color: #C76A40;
            font-weight: 800;">where</span> c.conta_numerofatura = _numero_documento
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> c._branch_uid = ___branch
              ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
                _numero_documento := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

              <span style="color: #C76A40;
            font-weight: 800;">if</span> _numero_documento <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                <span style="color: #C76A40;
            font-weight: 800;">and</span> _tserie.tserie_id <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.maguita_tserie_recibo, _const.maguita_tserie_faturarecibo )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
                  <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.deposito de
                    <span style="color: #C76A40;
            font-weight: 800;">where</span> de.deposito_documento = _numero_documento
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> de._branch_uid = ___branch
              ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
                _numero_documento := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
              _iterate := _iterate +<span style="color: #C76A40">1</span>;

              <span style="color: #C76A40;
            font-weight: 800;">if</span> _iterate = <span style="color: #C76A40">1000</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
                <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;Exedeu o limite de tentativa para geração de numero de serie, por favor proucure pelo suporte.&#x27;</span>;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

            __sets_generate_documento.document := _numero_documento;
            __sets_generate_documento.serie_id := _serie.serie_id;
            __sets_generate_documento.serie_sequencia := _serie.serie_sequencia;
            __sets_generate_documento.serie_numero := _serie.serie_numero;
            __sets_generate_documento.serie_quantidade := _serie.serie_quantidade;
            __sets_generate_documento.serie_numatorizacao := _serie.serie_numatorizacao;
            __sets_generate_documento.serie_numcertificacao := _serie.serie_numcertificacao;
            __sets_generate_documento.autorizacao_uid := _autorizacao.autorizacao_uid;
            __sets_generate_documento.autorizacao_ano := _autorizacao.autorizacao_ano;
            __sets_generate_documento.autorizacao_numero := _autorizacao.autorizacao_numero;

            <span style="color: #C76A40;
            font-weight: 800;">return next</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_branch_by_espaco {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks._get_branch_by_espaco(<span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.branch
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">select</span> b.*
        <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.branch b
               <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> b.branch_uid = e.espaco_branch_uid
        <span style="color: #C76A40;
            font-weight: 800;">where</span> e.espaco_id = <span style="color: #1f7199">$1</span>

        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_report_venda_conta {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_report_venda_conta(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Relatorio de vendas
            filter := {
              arg_data_operacao:{ start: DATE, end: DATE },
              arg_data_registro:{ start: DATE, end: DATE },
              arg_artigo_id: ID
              arg_posto_id: ID,
              arg_colaborador_vendedor: ID,
              arg_currency_pagamento: ID,
              arg_colaborador_vendedor: ID,
              arg_tpaga_id: ID,
              arg_classe_id: ID,
              arg_conta_montante: {start: START, end: END },
              arg_conta_fatura: FATURA
            }
           \*\/</span>

          arg_data_operacao_start <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_operacao&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;start&#x27;</span>;
          arg_data_operacao_end <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_operacao&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;end&#x27;</span>;

          arg_data_registro_start <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_registro&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;start&#x27;</span>;
          arg_data_registro_end <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_registro&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;end&#x27;</span>;

          arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span>;
          arg_posto_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_id&#x27;</span>;
          arg_colaborador_vendedor <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_vendedor&#x27;</span>;
          arg_classe_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_classe_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );

          arg_currency_pagamento <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_currency_pagamento&#x27;</span>;
          arg_tpaga_id <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_tpaga_id&#x27;</span>;

          arg_conta_montante_start <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_conta_montante&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;start&#x27;</span>;
          arg_conta_montante_end <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_conta_montante&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;end&#x27;</span>;
          arg_conta_fatura <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_conta_fatura&#x27;</span>;


          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> report <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                ct.*,
                cx.*,
                pos.*,
                col.*,
                cu.*,
                tp.*,
                trim( format( <span style="color: #4d99bf">&#x27;%s %s&#x27;</span>, col.colaborador_nome, col.colaborador_apelido ) ) <span style="color: #C76A40;
            font-weight: 800;">as</span> colaborador_nomecompleto,
                sum( ve.venda_montanteagregado ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_montanteagregado,
                sum( ve.venda_montente ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_montente,
                sum( ve.venda_montantetotal ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_montantetotal,
                string_agg( <span style="color: #C76A40;
            font-weight: 800;">distinct</span> art.artigo_nome, <span style="color: #4d99bf">&#x27;, &#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venta_artigos

              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.caixa cx <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_caixa_fechopagamento = cx.caixa_id
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.posto pos <span style="color: #C76A40;
            font-weight: 800;">on</span> cx.caixa_posto_id = pos.posto_id
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.colaborador col <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_colaborador_id = col.colaborador_id
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.tpaga tp <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_tpaga_id = tp.tpaga_id
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> geoinfo.currency cu <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_currency_id = cu.currency_id
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.venda ve <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_id = ve.venda_conta_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_estado <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.venda_estado_fechado )
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> ve.venda_artigo_id = art.artigo_id

              <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_estado <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.conta_estado_pago, _const.conta_estado_fechado )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_id = coalesce( arg_artigo_id, art.artigo_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_classe_id = coalesce( arg_classe_id, art.artigo_classe_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_data <span style="color: #C76A40;
            font-weight: 800;">between</span> coalesce( arg_data_operacao_start, ct.conta_data ) <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( arg_data_operacao_end, ct.conta_data )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_dataregistro::<span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">between</span> coalesce( arg_data_registro_start, ct.conta_dataregistro::<span style="color: #C76A40">date</span> ) <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( arg_data_registro_end, ct.conta_dataregistro::<span style="color: #C76A40">date</span> )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> cx.caixa_posto_id = coalesce( arg_posto_id, cx.caixa_posto_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> cx.caixa_colaborador_id = coalesce( arg_colaborador_vendedor, cx.caixa_colaborador_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_currency_id = coalesce( arg_currency_pagamento, ct.conta_currency_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_tpaga_id = coalesce( arg_tpaga_id, ct.conta_tpaga_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_montente <span style="color: #C76A40;
            font-weight: 800;">between</span> coalesce( arg_conta_montante_start, ve.venda_montente ) <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( arg_conta_montante_end, ve.venda_montente )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> lower( ct.conta_numerofatura ) <span style="color: #C76A40;
            font-weight: 800;">like</span> <span style="color: #4d99bf">&#x27;%&#x27;</span> || lower( coalesce( arg_conta_fatura, ct.conta_numerofatura ) ) || <span style="color: #4d99bf">&#x27;%&#x27;</span>
                <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                ct.conta_id,
                cx.caixa_id,
                pos.posto_id,
                col.colaborador_id,
                cu.currency_id,
                tp.tpaga_id
            )
            <span style="color: #C76A40;
            font-weight: 800;">select</span> jsonb_build_object(
                       <span style="color: #4d99bf">&#x27;header&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">array</span>(
                    <span style="color: #C76A40;
            font-weight: 800;">select</span> jsonb_build_object(
                               <span style="color: #4d99bf">&#x27;key&#x27;</span>, r.currency_code,
                               <span style="color: #4d99bf">&#x27;label&#x27;</span>, r.currency_code,
                               <span style="color: #4d99bf">&#x27;class&#x27;</span>, <span style="color: #4d99bf">&#x27;Money&#x27;</span>,
                               <span style="color: #4d99bf">&#x27;key&#x27;</span>, r.currency_code,
                               <span style="color: #4d99bf">&#x27;sumRow&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">true</span>
                             )
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> report r
                    <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> r.currency_code,
                             r.currency_name
                  )
                     )
            <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                lib.jsonb_values(
                    to_jsonb( rp ),
                    <span style="color: #4d99bf">&#x27;conta_id&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;conta_numerofatura&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;conta_titular&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;conta_data&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;conta_montante&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;conta_montanteamortizado&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;conta_montantetroco&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;conta_imprensa&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;conta_dataregistro&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;posto_id&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;posto_designacao&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;colaborador_nome&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;caixa_id&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;currency_code&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;currency_code&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;tpaga_designacao&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;colaborador_nomecompleto&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;venda_montanteagregado&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;venda_montente&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;venda_montantetotal&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;venta_artigos&#x27;</span>
                  ) || jsonb_build_object (
                    rp.currency_code, rp.conta_montantemoeda
                  )
            <span style="color: #C76A40;
            font-weight: 800;">from</span> report rp
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface viewargs_show {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.viewargs_show(<span style="color: #C76A40;
            font-weight: 800;">OUT</span> param <span style="color: #C76A40">text</span>, <span style="color: #C76A40;
            font-weight: 800;">OUT</span> key <span style="color: #C76A40">text</span>, <span style="color: #C76A40;
            font-weight: 800;">OUT</span> <span style="color: #C76A40;
            font-weight: 800;">value</span> <span style="color: #C76A40">jsonb</span>, <span style="color: #C76A40;
            font-weight: 800;">OUT</span> <span style="color: #C76A40">text</span> <span style="color: #C76A40">text</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">record</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">PARALLEL SAFE</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #C76A40;
            font-weight: 800;">select</span>
              e.param,
              substr(e.param, length(<span style="color: #4d99bf">&#x27;viewargs.*&#x27;</span>), length( e.param )),
              current_setting( e.param, <span style="color: #C76A40;
            font-weight: 800;">true</span> )::<span style="color: #C76A40">jsonb</span>,
              jsonb_build_object( <span style="color: #4d99bf">&#x27;value&#x27;</span>, current_setting( e.param, <span style="color: #C76A40;
            font-weight: 800;">true</span> )::<span style="color: #C76A40">jsonb</span> )-&gt;&gt;<span style="color: #4d99bf">&#x27;value&#x27;</span>
            <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements_text( current_setting( <span style="color: #4d99bf">&#x27;viewargs.*&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">true</span> )::<span style="color: #C76A40">jsonb</span> ) e( param)
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_reg_retalho {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_reg_retalho(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\*
           args := {
              arg_colaborador_id,
              arg_espaco_auth,

              retalho_artigo_composto
              retalho_artigo_base
              retalho_composicao
              retalho_quantidade
           }
           \*\/</span>
            arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
            arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
            
            _artigo_base tweeks.artigo;
            _artigo_composto tweeks.artigo;
            _retalho tweeks.retalho;
            ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
            __stock <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            _retalho := jsonb_populate_record( _retalho, args );
            _artigo_base := tweeks._get_artigo( _retalho.retalho_artigo_base );
            _artigo_composto := tweeks._get_artigo( _retalho.retalho_artigo_composto );
            
            <span style="color: #C76A40;
            font-weight: 800;">if</span> _artigo_composto.artigo_artigo_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> _artigo_composto.artigo_compostoquantidade <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;O artigo selecionano para retalhar não é um artigo composto!&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            
            __stock := tweeks._get_stock( _retalho.retalho_artigo_composto, arg_espaco_auth );
            
            <span style="color: #C76A40;
            font-weight: 800;">if</span> __stock.stock_quantidade &lt; _retalho.retalho_quantidade
                <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _artigo_composto.artigo_stocknegativo
            <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Quantidade do artigo composto no armazem atual não é suficiente para retalhar!&#x27;</span>);
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            
            _retalho.retalho_codigo = tweeks.__generate_retalho_code( ___branch );
            _retalho.retalho_colaborador_id := arg_colaborador_id;
            _retalho.retalho_espaco_auth := arg_espaco_auth;
            
            <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _retalho
              <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets( _retalho );
            
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true(jsonb_build_object(
                <span style="color: #4d99bf">&#x27;retalho&#x27;</span>, _retalho
            ));
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_imposto {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_imposto(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              arg_artigo_id: ID,
              arg_colaborador_id: ID,
              arg_espaco_auth: ID,
              arg_imposto: [
                { arg_tipoimposto_id: ID,
                  arg_taplicar_id: ID,
                  arg_imposto_valor: VALOR, # Por equanto envie null
                  arg_imposto_percentagem: PERCENTAGEM, # Por enquanto envie null
                }
              ]
            }
           \*\/</span>
          arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_imposto <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_imposto&#x27;</span>;
          arg_tipoimposto_id <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> ( ele.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_tipoimposto_id&#x27;</span>)::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( arg_imposto ) ele( doc ) );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #888">-- Primeiro desativar as associação dos impostos atual</span>
          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.imposto
            <span style="color: #C76A40;
            font-weight: 800;">set</span> imposto_estado = _const.maguita_imposto_estado_fechado,
                imposto_dataregistro = <span style="color: #397300">current_timestamp</span>,
                imposto_colaborador_atualizacao = arg_colaborador_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span> imposto_artigo_id = arg_artigo_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> imposto_estado = _const.maguita_imposto_estado_ativo
          ;

          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.imposto(
            imposto_tipoimposto_id,
            imposto_artigo_id,
            imposto_taplicar_id,
            imposto_espaco_auth,
            imposto_colaborador_id,
            imposto_percentagem,
            imposto_valor
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
              ( el.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_tipoimposto_id&#x27;</span> )::<span style="color: #C76A40">uuid</span>,
              arg_artigo_id,
              ( el.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_taplicar_id&#x27;</span> )::<span style="color: #C76A40">int2</span>,
              arg_espaco_auth,
              arg_colaborador_id,
              ( el.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_imposto_percentagem&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>,
              ( el.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_imposto_valor&#x27;</span> )::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>
            <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( arg_imposto ) el( doc )
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;imposto&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">array</span>(
              <span style="color: #C76A40;
            font-weight: 800;">select</span> ip
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.imposto ip
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ip.imposto_artigo_id = arg_artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ip.imposto_estado = _const.maguita_imposto_estado_ativo
            )
          );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __tg_fluxo_on_entrada {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__tg_fluxo_on_entrada()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _new tweeks.entrada;
          _fluxo tweeks.fluxo;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _guia <span style="color: #C76A40">record</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_replication() <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _new := <span style="color: #397300">new</span>;

          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _guia
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.guia g
            <span style="color: #C76A40;
            font-weight: 800;">where</span> g.guia_uid = _new.entrada_guia_id
          ;

          _fluxo.fluxo_toperacao_id := _const.maguita_toperacao_entrada;
          _fluxo.fluxo_documento := _guia.guia_documentoperacao ;
          _fluxo.fluxo_data := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          _fluxo.fluxo_referencia := lib.sets_ref(<span style="color: #397300">new</span> );
          _fluxo.fluxo_regclass := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( pg_typeof( <span style="color: #397300">new</span> )::<span style="color: #C76A40">text</span>::<span style="color: #C76A40">regclass</span> );

          _fluxo.fluxo_refuid := _new.entrada_id;
          _fluxo.fluxo_quantidadein := _new.entrada_quantidade;
        <span style="color: #888">--   _fluxo.fluxo_quantidadeout :=;</span>

          _fluxo.fluxo_artigo_in := _new.entrada_artigo_id;
        <span style="color: #888">--   _fluxo.fluxo_artigo_out := ;</span>

        <span style="color: #888">--   _fluxo.fluxo_espaco_out := ;</span>
          _fluxo.fluxo_espaco_in := _new.entrada_espaco_destino;

          _fluxo.fluxo_espaco_auth := _new.entrada_espaco_auth;
          _fluxo.fluxo_colaborador_id := _new.entrada_colaborador_id;

          <span style="color: #C76A40;
            font-weight: 800;">perform</span> lib.sets_in( _fluxo );
          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __tg_fluxo_on_acerto {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__tg_fluxo_on_acerto()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _new tweeks.acerto;
          _fluxo tweeks.fluxo;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _diferenca <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>;
          
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_replication() <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _new := <span style="color: #397300">new</span>::tweeks.acerto;


          _fluxo.fluxo_toperacao_id := _const.maguita_toperacao_acerto;
          _fluxo.fluxo_documento := _new.acerto_codigo;
          _fluxo.fluxo_data := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          _fluxo.fluxo_referencia := lib.sets_ref(<span style="color: #397300">new</span> );
          _fluxo.fluxo_regclass := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( pg_typeof( <span style="color: #397300">new</span> )::<span style="color: #C76A40">text</span>::<span style="color: #C76A40">regclass</span> );
          _fluxo.fluxo_refuid := _new.acerto_id;
          
          _diferenca := _new.acerto_quantidade - _new.acerto_quantidadeinicial;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _diferenca &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> 
            _fluxo.fluxo_artigo_in := _new.acerto_artigo_id;
            _fluxo.fluxo_espaco_in := _new.acerto_espaco_id;
            _fluxo.fluxo_quantidadein := abs( _diferenca );
            _fluxo.fluxo_quantidadefinal := _new.acerto_quantidade;
          elseif _diferenca &lt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _fluxo.fluxo_artigo_out := _new.acerto_artigo_id;
            _fluxo.fluxo_espaco_out := _new.acerto_espaco_id;
            _fluxo.fluxo_quantidadeout := abs( _diferenca );
            _fluxo.fluxo_quantidadefinal := _new.acerto_quantidade;
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          _fluxo.fluxo_espaco_auth := _new.acerto_espaco_auth;
          _fluxo.fluxo_colaborador_id := _new.acerto_colaborador_id;
          _fluxo.fluxo_checkpoint := <span style="color: #C76A40">0</span>;

          <span style="color: #C76A40;
            font-weight: 800;">perform</span> lib.sets_in( _fluxo );
          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_transacao_movimentacao_posto {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_transacao_movimentacao_posto(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para transacionar o valor de um posto
            args := {
              arg_espaco_auth: ID
              arg_posto_id: ID,
              arg_tmovimento_id: ID,
              arg_colaborador_id: ID,
              arg_transacao_zerar: BOOLEAN,
              arg_transacao_montante: float,

              arg_transacao_documento: NULL,
              arg_transacao_observacao: NULL
            }
           \*\/</span>
          arg_posto_id <span style="color: #C76A40">uuid</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_tmovimento_id <span style="color: #C76A40">int2</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_tmovimento_id&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_transacao_zerar <span style="color: #C76A40">boolean</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_transacao_zerar&#x27;</span>;
          arg_transacao_montante <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_transacao_montante&#x27;</span>;
          arg_transacao_documento <span style="color: #C76A40">varchar</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_transacao_documento&#x27;</span>;
          arg_transacao_observacao <span style="color: #C76A40">varchar</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_transacao_observacao&#x27;</span>;

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _posto tweeks.posto;
          _transacao tweeks.transacao;
          _caixa tweeks.caixa;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _posto := tweeks._get_posto( arg_posto_id );

          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _caixa
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.caixa cx
            <span style="color: #C76A40;
            font-weight: 800;">where</span> cx.caixa_posto_id = _posto.posto_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> cx.caixa_estado = _const.caixa_estado_ativo
          ;

          arg_transacao_zerar := coalesce( arg_transacao_zerar, <span style="color: #C76A40;
            font-weight: 800;">false</span> );

          <span style="color: #888">-- Quando for para zerar a conta então montate aqui sera de zero</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_transacao_zerar <span style="color: #C76A40;
            font-weight: 800;">then</span>
            arg_transacao_montante := <span style="color: #C76A40">0</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- Quando houver documentos</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_transacao_documento <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> _caixa.caixa_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            arg_transacao_documento := lib.str_nospace( to_char( _caixa.caixa_id, <span style="color: #4d99bf">&#x27;&quot;CX#&quot;000-000&#x27;</span> ) );

          elseif arg_transacao_documento <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            arg_transacao_documento := lib.str_nospace( to_char( nextval( <span style="color: #4d99bf">&#x27;tweeks.seq_transacao_movimento&#x27;</span> ), <span style="color: #4d99bf">&#x27;&quot;MV#&quot;000-000&#x27;</span> ) );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- Garantir que quando for deito o montante a debitar menor igaul ao montante no posto</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_tmovimento_id = _const.tmovimento_debito <span style="color: #C76A40;
            font-weight: 800;">and</span> arg_transacao_montante &gt; _posto.posto_montante <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;@tweeks.transacao.montante-insuficient&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _transacao := <span style="color: #C76A40;
            font-weight: 800;">rule</span>.transacao_create(
              arg_espaco_auth,
              arg_posto_id,
              _const.toperacao_movimento,
              arg_tmovimento_id,
              arg_colaborador_id,
              arg_transacao_montante,
              arg_transacao_documento,
              <span style="color: #C76A40;
            font-weight: 800;">null</span>,
              arg_transacao_zerar,
              arg_transacao_observacao
            );

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;transacao&#x27;</span>, _transacao
          );

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_sets_autorizacao {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_sets_autorizacao(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            {
              arg_colaborador_id: UID
              arg_espaco_auth: UID
              arg_autorizacao_continue: AUTORIZACAO

              autorizacao_uid: UID
              autorizacao_espaco_uid: UID
              autorizacao_designacao:DESIG
              autorizacao_numero:NUMERO,
              series: [
                {
                  serie_id uuid not null,
                  serie_tserie_id int2 not null,
                  serie_espaco_id uuid not null,
                  serie_designacao character varying not null,
                  serie_numero character varying not null,
                  serie_quantidade int not null,
                  serie_numcertificacao,
                  serie_numatorizacao
                }
              ]
            }
           \*\/</span>
          _autorizacao tweeks.autorizacao;
          _autorizacao_continue tweeks.autorizacao;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_branch_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          _res_serie <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> jsonb_build_array();
          _next <span style="color: #C76A40">record</span>;
          _data <span style="color: #C76A40">record</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          __serie_aturizacao <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>(<span style="color: #C76A40;
            font-weight: 800;">select</span> (e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;serie_id&#x27;</span> )::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;series&#x27;</span>) e ( doc ));
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _autorizacao := jsonb_populate_record( _autorizacao, args );
          _autorizacao_continue := jsonb_populate_record( _autorizacao_continue, args-&gt;<span style="color: #4d99bf">&#x27;_autorizacao_continue&#x27;</span> );
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _autorizacao.autorizacao_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _autorizacao.autorizacao_colaborador_uid := arg_colaborador_id;
            _autorizacao.autorizacao_espaco_auth := arg_espaco_auth;
            _autorizacao._branch_uid := arg_branch_uid;
            _autorizacao.autorizacao_dataregistro := now();
            _autorizacao.autorizacao_ano := extract( years <span style="color: #C76A40;
            font-weight: 800;">from</span> now() );
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            _autorizacao.autorizacao_colaborador_atualizacao := arg_colaborador_id;
            _autorizacao.autorizacao_dataatualizacao := now();
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;serie&#x27;</span> ) e( doc )
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::tweeks.serie, e.doc ) s <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
              <span style="color: #C76A40;
            font-weight: 800;">where</span> right( s.serie_numero, <span style="color: #C76A40">2</span> ) = to_char( <span style="color: #397300">current_date</span>, <span style="color: #4d99bf">&#x27;yy&#x27;</span> )
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false(<span style="color: #4d99bf">&#x27;Numero de serie invalido para o ano em curso!&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _autorizacao_continue.autorizacao_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;series&#x27;</span> ) e ( doc )
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> jsonb_populate_record( <span style="color: #C76A40;
            font-weight: 800;">null</span>::tweeks.serie, e.doc ) sdoc <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.serie s <span style="color: #C76A40;
            font-weight: 800;">on</span> sdoc.serie_numero = s.serie_numero
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_tserie_id = sdoc.serie_tserie_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> s._branch_uid = arg_branch_uid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_espaco_auth = arg_espaco_auth
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.autorizacao a <span style="color: #C76A40;
            font-weight: 800;">on</span> s.serie_autorizacao_uid = a.autorizacao_uid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> a._branch_uid = arg_branch_uid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> a.autorizacao_ano = _autorizacao.autorizacao_ano
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> a.autorizacao_espaco_auth = arg_espaco_auth
              <span style="color: #C76A40;
            font-weight: 800;">where</span> a.autorizacao_uid != _autorizacao_continue.autorizacao_uid
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Já existe serie com essa numeração registrada&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _autorizacao
            <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets( _autorizacao )
          ;
          
          <span style="color: #888">-- Desativar todas as series que não fazem mais parte de autorizacao</span>
          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.serie
            <span style="color: #C76A40;
            font-weight: 800;">set</span> serie_estado = _const.maguita_serie_estado_anulado
            <span style="color: #C76A40;
            font-weight: 800;">where</span> serie_id != <span style="color: #C76A40;
            font-weight: 800;">all</span>( __serie_aturizacao )
              <span style="color: #C76A40;
            font-weight: 800;">and</span> serie_autorizacao_uid = _autorizacao.autorizacao_uid
              <span style="color: #C76A40;
            font-weight: 800;">and</span> serie_estado = _const.maguita_serie_estado_ativo
          ;
          
          <span style="color: #C76A40;
            font-weight: 800;">for</span> _data <span style="color: #C76A40;
            font-weight: 800;">in</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                e.document || jsonb_build_object(
                  <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
                  <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth,
                  <span style="color: #4d99bf">&#x27;serie_autorizacao_uid&#x27;</span>, _autorizacao.autorizacao_uid
                ) <span style="color: #C76A40;
            font-weight: 800;">as</span> document_serie
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;series&#x27;</span> ) e ( document )
          ) <span style="color: #C76A40;
            font-weight: 800;">loop</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _next
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.funct_sets_serie( _data.document_serie ) e;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _next.result <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #4d99bf">&#x27;%&#x27;</span>, _next.message;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            _res_serie := _res_serie || jsonb_build_object(
              <span style="color: #4d99bf">&#x27;serie&#x27;</span>, _data.document_serie,
              <span style="color: #4d99bf">&#x27;result&#x27;</span>, _next
            );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
          
          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true( jsonb_build_object(
            <span style="color: #4d99bf">&#x27;autorizacao&#x27;</span>, _autorizacao,
            <span style="color: #4d99bf">&#x27;series&#x27;</span>, _res_serie
          ));

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
            <span style="color: #C76A40;
            font-weight: 800;">begin</span>
                <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
                <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_exception( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
            <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_cambio {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_cambio(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para registar o valor cambio
            args := {
              arg_branch_uid: UID
              arg_espaco_auth: ID
              arg_colaborador_id: ID,
              arg_currency_id
              arg_cambio_taxa: VALOR_TAXA,
              arg_cambio_data: DATE
            }
          \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_branch_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_branch_uid&#x27;</span>;
          arg_currency_id <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_currency_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_cambio_taxa <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_cambio_taxa&#x27;</span>;
          arg_cambio_data <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_cambio_data&#x27;</span>;

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _cambio tweeks.cambio;
          arg_cambio_estado <span style="color: #C76A40">int2</span>;
          _data <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_branch_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> arg_branch_uid := tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth ); <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_branch_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> arg_branch_uid := tweeks.__branch_uid( <span style="color: #C76A40;
            font-weight: 800;">null</span>, arg_espaco_auth ); <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_branch_uid <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> arg_branch_uid := tweeks.__branch_uid( arg_colaborador_id, <span style="color: #C76A40;
            font-weight: 800;">null</span> ); <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          arg_cambio_data := <span style="color: #397300">current_date</span>;

          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
            <span style="color: #C76A40;
            font-weight: 800;">from</span>  tweeks.cambio cb
            <span style="color: #C76A40;
            font-weight: 800;">where</span> cb.cambio_currency_id = arg_currency_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> cb.cambio_estado = _const.cambio_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> cb.cambio_espaco_auth = arg_espaco_auth
            <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> cb.cambio_dataregistro <span style="color: #C76A40;
            font-weight: 800;">desc</span>
          ;

          <span style="color: #C76A40;
            font-weight: 800;">raise</span> <span style="color: #C76A40;
            font-weight: 800;">notice</span> <span style="color: #4d99bf">&#x27;%&#x27;</span>, to_jsonb( _data );



          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_currency_id = _const.currency_std
            <span style="color: #C76A40;
            font-weight: 800;">and</span> ( _data.cambio_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> arg_cambio_taxa != <span style="color: #C76A40">1</span> )
          <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;Câmbio de STN não pode ser atualizado!&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.cambio
            <span style="color: #C76A40;
            font-weight: 800;">set</span> cambio_estado = _const.cambio_estado_fechado,
                cambio_dataatualizacao = <span style="color: #397300">current_timestamp</span>,
                cambio_colaborador_atualizacao = arg_colaborador_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span> cambio_estado = _const.cambio_estado_ativo
              <span style="color: #C76A40;
            font-weight: 800;">and</span> cambio_currency_id = arg_currency_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> cambio_espaco_auth = arg_espaco_auth
          ;

          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.cambio (
            cambio_colaborador_id,
            cambio_currency_id,
            cambio_taxa,
            cambio_espaco_auth
          ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
            arg_colaborador_id,
            arg_currency_id,
            arg_cambio_taxa,
            arg_espaco_auth
          ) <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _cambio;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object( <span style="color: #4d99bf">&#x27;cambio&#x27;</span>, _cambio  );

        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface _get_posto {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks._get_posto(arg_posto_id <span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> posto
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
         <span style="color: #C76A40;
            font-weight: 800;">IMMUTABLE</span> <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
          <span style="color: #888">-- Essa função retorna uma instancia da posto</span>
        <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.posto cx <span style="color: #C76A40;
            font-weight: 800;">where</span> cx.posto_id = arg_posto_id;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_acerto {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_acerto(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(acerto_id <span style="color: #C76A40">uuid</span>, acerto_quantidade <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, acerto_diferenca <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, acerto_quantidadeinicial <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, acerto_observacao <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, acerto_estado <span style="color: #C76A40">smallint</span>, acerto_dataregistro <span style="color: #C76A40">timestamp</span> <span style="color: #C76A40">with time zone</span>, acerto_dataatualizacao <span style="color: #C76A40">timestamp</span> <span style="color: #C76A40">with time zone</span>, artigo_id <span style="color: #C76A40">uuid</span>, artigo_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, artigo_codigo <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, espaco_id <span style="color: #C76A40">uuid</span>, espaco_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para devolver a listagem dos acertos

          filter := {
            arg_artigo_id: ID,
            arg_espaco_id: ID
            arg_espaco_auth: ID
          }
          \*\/</span>

          arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_id&#x27;</span>;
          arg_espaco_loads <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                acc.acerto_id,
                acc.acerto_quantidade,
                acc.acerto_diferenca,
                acc.acerto_quantidadeinicial,
                acc.acerto_observacao,
                acc.acerto_estado,
                acc.acerto_dataregistro,
                acc.acerto_dataatualizacao,

                art.artigo_id,
                art.artigo_nome,
                art.artigo_codigo,

                esp.espaco_id,
                esp.espaco_nome
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.acerto acc
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.stock sto <span style="color: #C76A40;
            font-weight: 800;">on</span> acc.acerto_stock_id = sto.stock_id
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> sto.stock_artigo_id = art.artigo_id
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco esp <span style="color: #C76A40;
            font-weight: 800;">on</span> sto.stock_espacao_id = esp.espaco_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> art.artigo_id = coalesce( arg_artigo_id, art.artigo_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> esp.espaco_id = coalesce( arg_espaco_id, esp.espaco_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> esp.espaco_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_loads )
            ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __tg_venda_before_sets {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__tg_venda_before_sets()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _sets <span style="color: #C76A40">record</span>;
          _new tweeks.venda;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _new := <span style="color: #397300">new</span>;
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _new.venda_proforma <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span> * 
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct 
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_id = _new.venda_conta_id
                <span style="color: #C76A40;
            font-weight: 800;">into</span> _sets
              ;
              _new.venda_proforma := _sets.conta_proforma;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #888">--</span>
          _new.venda_codigoimposto := lib.str_normalize( _new.venda_codigoimposto );
          <span style="color: #C76A40;
            font-weight: 800;">return</span> _new;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __tg_create_lancamento {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__tg_create_lancamento()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">trigger</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _deposito tweeks.deposito;
          _conta tweeks.conta;
          _conta_old tweeks.conta;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _lancamento tweeks.lancamento;
          _data <span style="color: #C76A40">record</span>;
          _conta_data <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #888">--Abortar o trigger quando for conexão com utilizador de replicação</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_replication() <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">if</span> pg_typeof( <span style="color: #397300">new</span> ) = pg_typeof( _deposito ) <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #397300">tg_op</span> = <span style="color: #4d99bf">&#x27;INSERT&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _deposito :=  <span style="color: #397300">new</span>;
            <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _data <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.tpaga <span style="color: #C76A40;
            font-weight: 800;">where</span> tpaga_id = _deposito.deposito_tpaga_id;

            _lancamento.lancamento_tlancamento_id := _const.maguita_tlancamento_deposito;
            _lancamento._tgrupo_id := _deposito._tgrupo_id;
            _lancamento.lancamento_refid := _deposito.deposito_id;
            _lancamento.lancamento_regclass := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( pg_typeof( _deposito )::<span style="color: #C76A40">text</span>::<span style="color: #C76A40">regclass</span> );
            _lancamento.lancamento_valor := _deposito.deposito_montantefinal;
            _lancamento.lancamento_operacao := <span style="color: #C76A40">1</span>;
            _lancamento.lancamento_cliente_id := _deposito.deposito_cliente_id;
            _lancamento.lancamento_espaco_auth := _deposito.deposito_espaco_auth;
            _lancamento.lancamento_colaborador_id := _deposito.deposito_colaborador_id;
            _lancamento.lancamento_data := _deposito.deposito_data;
            _lancamento.lancamento_descricao := <span style="color: #C76A40;
            font-weight: 800;">case</span>
              <span style="color: #C76A40;
            font-weight: 800;">when</span> _deposito.deposito_docref <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> format( <span style="color: #4d99bf">&#x27;Lançamente de deposito na conta em modalidade %I usando documento nº %I em %I&#x27;</span>, _data.tpaga_designacao, _deposito.deposito_docref, _deposito.deposito_data )
              <span style="color: #C76A40;
            font-weight: 800;">else</span> format( <span style="color: #4d99bf">&#x27;Lançamente de deposito na conta em modalidade %I em %I&#x27;</span>, _data.tpaga_designacao, _deposito.deposito_data )
            <span style="color: #C76A40;
            font-weight: 800;">end</span>;
            _lancamento.lancamento_documento := _deposito.deposito_documento;
            _lancamento.lancamento_referencia := lib.sets_ref( _deposito );

          elseif pg_typeof( <span style="color: #397300">new</span> ) = pg_typeof( _conta ) <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #397300">tg_op</span> = <span style="color: #4d99bf">&#x27;UPDATE&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _conta := <span style="color: #397300">new</span>;
            _conta_old := <span style="color: #397300">old</span>;
            
            <span style="color: #C76A40;
            font-weight: 800;">select</span> * 
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct 
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.serie s <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_serie_id = s.serie_id
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.tserie ts <span style="color: #C76A40;
            font-weight: 800;">on</span> s.serie_tserie_id = ts.tserie_id
              <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_id = _conta.conta_id
              <span style="color: #C76A40;
            font-weight: 800;">into</span> _conta_data
            ;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta_old.conta_estado != _conta.conta_estado <span style="color: #C76A40;
            font-weight: 800;">and</span> _conta.conta_estado = _const.maguita_conta_estado_fechado <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
              <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.lancamento l
                <span style="color: #C76A40;
            font-weight: 800;">where</span> l.lancamento_regclass = <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( pg_typeof(_conta)::<span style="color: #C76A40">text</span>::<span style="color: #C76A40">regclass</span> )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> l.lancamento_refid = _conta.conta_id
            ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
              _lancamento.lancamento_tlancamento_id := _const.maguita_tlancamento_conta;
              _lancamento._tgrupo_id := _conta._tgrupo_id;
              _lancamento.lancamento_refid := _conta.conta_id;
              _lancamento.lancamento_regclass := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( pg_typeof( _conta )::<span style="color: #C76A40">text</span>::<span style="color: #C76A40">regclass</span> );
              _lancamento.lancamento_valor := _conta.conta_montante;
              _lancamento.lancamento_cliente_id := _conta.conta_cliente_id;
              _lancamento.lancamento_espaco_auth := _conta.conta_espaco_auth;
              _lancamento.lancamento_colaborador_id := coalesce( _conta.conta_colaborador_fecho, _conta.conta_colaborador_atualizacao, _conta.conta_colaborador_id );
              _lancamento.lancamento_data := _conta.conta_data;
              _lancamento.lancamento_descricao := format( <span style="color: #4d99bf">&#x27;Lançamento de divida na conta com fatura nº %s&#x27;</span>, _conta.conta_numerofatura );
              _lancamento.lancamento_operacao := <span style="color: #C76A40">-1</span>;
              
              <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta_data.tserie_id = _const.maguita_tserie_notacredito <span style="color: #C76A40;
            font-weight: 800;">then</span>
                _lancamento.lancamento_descricao := format( <span style="color: #4d99bf">&#x27;Lançamento de nota de credito na conta com fatura nº %s&#x27;</span>, _conta.conta_numerofatura );
                _lancamento.lancamento_operacao := <span style="color: #C76A40">1</span>;
                _lancamento.lancamento_valor := _conta.conta_montante * <span style="color: #C76A40">-1</span>;
              <span style="color: #C76A40;
            font-weight: 800;">elsif</span> _conta_data.tserie_id <span style="color: #C76A40;
            font-weight: 800;">in</span>(  _const.maguita_tserie_faturarecibo, _const.maguita_tserie_fatura ) <span style="color: #C76A40;
            font-weight: 800;">then</span> 
                _lancamento.lancamento_descricao := format( <span style="color: #4d99bf">&#x27;Lançamento de divida na conta com fatura nº %s&#x27;</span>, _conta.conta_numerofatura );
              <span style="color: #C76A40;
            font-weight: 800;">elsif</span> _conta_data.tserie_id = _const.maguita_tserie_guiasaida <span style="color: #C76A40;
            font-weight: 800;">then</span> 
                _lancamento.lancamento_descricao := format( <span style="color: #4d99bf">&#x27;Lançamento de guia de saida com fatura nº %s&#x27;</span>, _conta.conta_numerofatura );
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
              
              _lancamento.lancamento_documento := _conta.conta_numerofatura;
              _lancamento.lancamento_referencia := lib.sets_ref( _conta );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _lancamento.lancamento_tlancamento_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _lancamento.lancamento_estado := _const.maguita_lancamento_estado_ativo;
            <span style="color: #C76A40;
            font-weight: 800;">perform</span> lib.sets( _lancamento );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_report_parametrized_filter {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_report_parametrized_filter(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**doc
            args := {
              _branch:text
              _user_id: text
              _workspace: text
              _parametrized_uid
            }
           doc\*\/</span>
          _branch <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_branch&#x27;</span>;
          _user_id <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_user_id&#x27;</span>;
          _workspace <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_workspace&#x27;</span>;
          _parametrized_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;_parametrized_uid&#x27;</span>;

          _filter <span style="color: #C76A40">record</span>;
          _const libdom.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _is_date <span style="color: #C76A40">boolean</span>;
          _is_timestamp <span style="color: #C76A40">boolean</span>;
          _use_value <span style="color: #C76A40">text</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := libdom.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">for</span> _filter <span style="color: #C76A40;
            font-weight: 800;">in</span> 
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> report.<span style="color: #C76A40;
            font-weight: 800;">filter</span> f
              <span style="color: #C76A40;
            font-weight: 800;">where</span> f._branch_uid = _branch
                <span style="color: #C76A40;
            font-weight: 800;">and</span> f.filter_parametrized_uid = _parametrized_uid
          <span style="color: #C76A40;
            font-weight: 800;">loop</span>
            _use_value := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
              _is_date := _filter.filter_type::<span style="color: #C76A40">regtype</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> (
                <span style="color: #4d99bf">&#x27;date&#x27;</span>::<span style="color: #C76A40">regtype</span>
              );
            
              _is_timestamp := _filter.filter_type::<span style="color: #C76A40">regtype</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> (
                <span style="color: #4d99bf">&#x27;timestamp&#x27;</span>::<span style="color: #C76A40">regtype</span>,
                <span style="color: #4d99bf">&#x27;timestamptz&#x27;</span>::<span style="color: #C76A40">regtype</span>
              );
              
              <span style="color: #C76A40;
            font-weight: 800;">if</span> (_is_date <span style="color: #C76A40;
            font-weight: 800;">or</span> _is_timestamp) <span style="color: #C76A40;
            font-weight: 800;">and</span>  _filter.filter_valuemode = _const.report_filter_filter_valuemode_daterelative  <span style="color: #C76A40;
            font-weight: 800;">then</span>
                _use_value := now() - (_filter.filter_increment)::<span style="color: #C76A40">interval</span>;
              <span style="color: #C76A40;
            font-weight: 800;">elsif</span> ( _is_date <span style="color: #C76A40;
            font-weight: 800;">or</span> _is_timestamp ) <span style="color: #C76A40;
            font-weight: 800;">and</span> _filter.filter_valuemode = _const.report_filter_filter_valuemode_dateprocess <span style="color: #C76A40;
            font-weight: 800;">then</span>
                _use_value := now();
              <span style="color: #C76A40;
            font-weight: 800;">elsif</span> _filter.filter_valuemode = _const.report_filter_filter_valuemode_samevalue <span style="color: #C76A40;
            font-weight: 800;">then</span> 
                _use_value := _filter.filter_basevalue;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            
              <span style="color: #C76A40;
            font-weight: 800;">if</span> _use_value <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> _is_date <span style="color: #C76A40;
            font-weight: 800;">then</span> 
                  _use_value := _use_value::<span style="color: #C76A40">date</span>;
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
            
              <span style="color: #C76A40;
            font-weight: 800;">return next</span> to_jsonb( _filter )|| jsonb_build_object(
                <span style="color: #4d99bf">&#x27;filter_value&#x27;</span>, _use_value
              );
            
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_cliente {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_cliente(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">json</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              arg_espaco_auth: UUID,
              arg_colaborador_id: UUID,
              query: {
                any?: any
                code?: CODE,
                name?: NAME
                mail?: MAIL
                tel?: TEL
                nif?: NIF
              }
            }
           \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          __branch_uid <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;

          _query_any  <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lower( args-&gt;<span style="color: #4d99bf">&#x27;query&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;any&#x27;</span> );
          _query_code <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lower( args-&gt;<span style="color: #4d99bf">&#x27;query&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;code&#x27;</span> );
          _query_name <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lower( args-&gt;<span style="color: #4d99bf">&#x27;query&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;name&#x27;</span> );
          _query_mail <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lower( args-&gt;<span style="color: #4d99bf">&#x27;query&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;mail&#x27;</span> );
          _query_tel  <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lower( args-&gt;<span style="color: #4d99bf">&#x27;query&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;tel&#x27;</span> );
          _query_nif  <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> lower( args-&gt;<span style="color: #4d99bf">&#x27;query&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;nif&#x27;</span> );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span>
              __deposito <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    la.lancamento_cliente_id,
                    sum( la.lancamento_valor ) <span style="color: #C76A40;
            font-weight: 800;">as</span> balanco_credito,
                    sum( la.lancamento_valor ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> la._tgrupo_id = _const.maguita_tgrupo_cnormal ) <span style="color: #C76A40;
            font-weight: 800;">as</span>   balanco_creditonormal,
                    sum( la.lancamento_valor ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> la._tgrupo_id = _const.maguita_tgrupo_ccorrente ) <span style="color: #C76A40;
            font-weight: 800;">as</span> balanco_creditocorrente,
                    count( la.lancamento_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> depositos
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.lancamento la
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> la._branch_uid = __branch_uid
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> la.lancamento_operacao = <span style="color: #C76A40">1</span>
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> la.lancamento_estado =  _const.maguita_lancamento_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> la.lancamento_cliente_id

              ), __conta <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    la.lancamento_cliente_id,
                    sum( la.lancamento_valor ) <span style="color: #C76A40;
            font-weight: 800;">as</span> balanco_debito,
                    sum( la.lancamento_valor ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> la._tgrupo_id = _const.maguita_tgrupo_cnormal ) <span style="color: #C76A40;
            font-weight: 800;">as</span>   balanco_debitonormal,
                    sum( la.lancamento_valor ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> la._tgrupo_id = _const.maguita_tgrupo_ccorrente ) <span style="color: #C76A40;
            font-weight: 800;">as</span> balanco_debitocorrente
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.lancamento la
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> la._branch_uid = __branch_uid
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> la.lancamento_estado = _const.maguita_lancamento_estado_ativo
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> la.lancamento_operacao = <span style="color: #C76A40">-1</span>
                  <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> la.lancamento_cliente_id

              ), __cliente <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    c.cliente_id,
                    c.cliente_code,
                    c.cliente_titular,
                    c.cliente_nif,
                    c.cliente_contactos,
                    c.cliente_mail,
                    c.cliente_estado,
                    c.cliente_metadata,
                    c.cliente_dataregistro,
                    coalesce( _de.balanco_credito, <span style="color: #C76A40">0.0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> balanco_credito,
                    coalesce( _de.balanco_creditonormal, <span style="color: #C76A40">0.0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> balanco_creditonormal,
                    coalesce( _de.balanco_creditocorrente, <span style="color: #C76A40">0.0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> balanco_creditocorrente,
                    coalesce( _de.depositos, <span style="color: #C76A40">0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> depositos,
                    coalesce( _ct.balanco_debito, <span style="color: #C76A40">0.0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> balanco_debito,
                    coalesce( _ct.balanco_debitocorrente, <span style="color: #C76A40">0.0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> balanco_debitocorrente,
                    coalesce( _ct.balanco_debitonormal, <span style="color: #C76A40">0.0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> balanco_debitonormal
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.cliente c
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> __deposito _de <span style="color: #C76A40;
            font-weight: 800;">on</span> c.cliente_id = _de.lancamento_cliente_id
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> __conta _ct <span style="color: #C76A40;
            font-weight: 800;">on</span> c.cliente_id = _ct.lancamento_cliente_id
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> c._branch_uid = __branch_uid
              ), __cliente_saldo <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    _c.*,
                    _c.balanco_creditonormal - _c.balanco_debitonormal <span style="color: #C76A40;
            font-weight: 800;">as</span> balanco_normal,
                    _c.balanco_creditocorrente - _c.balanco_debitocorrente <span style="color: #C76A40;
            font-weight: 800;">as</span> balanco_corrente,
                    _c.balanco_credito - _c.balanco_debito <span style="color: #C76A40;
            font-weight: 800;">as</span> balanco_final
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __cliente _c
              ), __query <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __cliente_saldo _cl
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> _cl.cliente_code = coalesce( _query_code, _cl.cliente_code )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( _cl.cliente_nif, <span style="color: #4d99bf">&#x27;&#x27;</span>) = coalesce( _query_nif, _cl.cliente_nif, <span style="color: #4d99bf">&#x27;&#x27;</span> )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> lower( _cl.cliente_titular ) <span style="color: #C76A40;
            font-weight: 800;">like</span> lower( format( <span style="color: #4d99bf">&#x27;%%%s%%&#x27;</span>, coalesce( _query_name, _cl.cliente_titular ) ) )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> lower( coalesce( _cl.cliente_mail, <span style="color: #4d99bf">&#x27;&#x27;</span> ) ) <span style="color: #C76A40;
            font-weight: 800;">like</span> lower( format( <span style="color: #4d99bf">&#x27;%%%s%%&#x27;</span>, coalesce( _query_mail, _cl.cliente_mail, <span style="color: #4d99bf">&#x27;&#x27;</span> ) ) )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ( coalesce( _cl.cliente_contactos, jsonb_build_array()) || to_jsonb(<span style="color: #4d99bf">&#x27;&#x27;</span>::<span style="color: #C76A40">text</span>) ) @&gt; to_jsonb(coalesce( _query_tel, <span style="color: #4d99bf">&#x27;&#x27;</span> ) )
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> ( <span style="color: #C76A40;
            font-weight: 800;">false</span>
                        <span style="color: #C76A40;
            font-weight: 800;">or</span> _cl.cliente_code = coalesce( _query_any, _cl.cliente_code )
                        <span style="color: #C76A40;
            font-weight: 800;">or</span> coalesce( _cl.cliente_nif, <span style="color: #4d99bf">&#x27;&#x27;</span>) = coalesce( _query_any, _cl.cliente_nif, <span style="color: #4d99bf">&#x27;&#x27;</span> )
                        <span style="color: #C76A40;
            font-weight: 800;">or</span> lower( _cl.cliente_titular ) <span style="color: #C76A40;
            font-weight: 800;">like</span> lower( format( <span style="color: #4d99bf">&#x27;%%%s%%&#x27;</span>, coalesce( _query_any, _cl.cliente_titular ) ) )
                        <span style="color: #C76A40;
            font-weight: 800;">or</span> lower( coalesce( _cl.cliente_mail, <span style="color: #4d99bf">&#x27;&#x27;</span> ) ) <span style="color: #C76A40;
            font-weight: 800;">like</span> lower( format( <span style="color: #4d99bf">&#x27;%%%s%%&#x27;</span>, coalesce( _query_any, _cl.cliente_mail, <span style="color: #4d99bf">&#x27;&#x27;</span> ) ) )
                        <span style="color: #C76A40;
            font-weight: 800;">or</span> (_cl.cliente_contactos || to_jsonb(<span style="color: #4d99bf">&#x27;&#x27;</span>::<span style="color: #C76A40">text</span>) ) @&gt; to_jsonb(coalesce( _query_any, <span style="color: #4d99bf">&#x27;&#x27;</span> ) )
                    )
              ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_json( _q )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __query _q;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_cambio_ativo {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_cambio_ativo(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
         <span style="color: #C76A40;
            font-weight: 800;">STRICT</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _data <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
            <span style="color: #C76A40;
            font-weight: 800;">from</span> geoinfo.currency cu 
              <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.cambio cb <span style="color: #C76A40;
            font-weight: 800;">on</span> cb.cambio_currency_id = cu.currency_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> cb.cambio_estado = _const.cambio_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> cb.cambio_espaco_auth = arg_espaco_auth
                <span style="color: #C76A40;
            font-weight: 800;">and</span> cb._branch_uid = ___branch
            <span style="color: #C76A40;
            font-weight: 800;">where</span> upper( cu.currency_code )  = <span style="color: #4d99bf">&#x27;STN&#x27;</span>
          ;
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _data.cambio_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.cambio (
              cambio_currency_id,
              cambio_espaco_auth, 
              cambio_colaborador_id, 
              cambio_taxa, 
              _branch_uid
            ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
              _data.currency_id,
              arg_espaco_auth,
              _const.colaborador_system_data,
              <span style="color: #C76A40">1</span>,
              ___branch
            );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __cambio <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  cb.cambio_id,
                  cb.cambio_data,
                  cb.cambio_taxa,
                  cb.cambio_dataregistro,
                  cu.currency_id,
                  cu.currency_name,
                  cu.currency_code,
                  cu.currency_symbol,
                  rank() <span style="color: #C76A40;
            font-weight: 800;">over</span> ( <span style="color: #C76A40;
            font-weight: 800;">partition</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> cb.cambio_currency_id <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                    <span style="color: #C76A40;
            font-weight: 800;">case</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> cambio_espaco_auth = arg_espaco_auth <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">1</span> <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">2</span> <span style="color: #C76A40;
            font-weight: 800;">end</span>,
                    cb.cambio_dataregistro <span style="color: #C76A40;
            font-weight: 800;">desc</span> )  <span style="color: #C76A40;
            font-weight: 800;">as</span> cambio_rank
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.cambio cb
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> geoinfo.currency cu <span style="color: #C76A40;
            font-weight: 800;">on</span> cb.cambio_currency_id = cu.currency_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> cb.cambio_estado = _const.cambio_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> cb.cambio_espaco_auth = arg_espaco_auth
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> cb._branch_uid = ___branch
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
                to_jsonb( cb )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __cambio cb
              <span style="color: #C76A40;
            font-weight: 800;">where</span> cb.cambio_rank = <span style="color: #C76A40">1</span>
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __lote {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__lote(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(espaco_id <span style="color: #C76A40">uuid</span>, artigo_id <span style="color: #C76A40">uuid</span>, lote_numero <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, lote_validade <span style="color: #C76A40">date</span>, lote_ref <span style="color: #C76A40">jsonb</span>, lote_refuid <span style="color: #C76A40">uuid</span>, lote_refclass <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, lote_entrada <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, lote_saida <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;espaco_auth&#x27;</span>;
          arg_espaco_armazem <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;espaco_armazem&#x27;</span>;
          arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_id&#x27;</span>;
          arg_with_reference <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;withRef&#x27;</span>;
          _branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          arg_with_reference := coalesce( arg_with_reference, <span style="color: #C76A40;
            font-weight: 800;">false</span> );
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span> __lote_entrada <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                e.entrada_espaco_destino <span style="color: #C76A40;
            font-weight: 800;">as</span> espaco_id,
                e.entrada_artigo_id <span style="color: #C76A40;
            font-weight: 800;">as</span> artigo_id,
                e.entrada_lote <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_numero,
                e.entrada_validade <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_validade,
                e.entrada_quantidade <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_entrada,
                <span style="color: #C76A40">0</span>::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_saida,
                <span style="color: #C76A40;
            font-weight: 800;">case</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_with_reference <span style="color: #C76A40;
            font-weight: 800;">then</span> lib.sets_ref( e ) <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_ref,
                <span style="color: #C76A40;
            font-weight: 800;">case</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_with_reference <span style="color: #C76A40;
            font-weight: 800;">then</span> e.entrada_id <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_refuid,
                <span style="color: #C76A40;
            font-weight: 800;">case</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_with_reference <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( e.TABLEOID ) <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_refclass
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.entrada e
              <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
        <span style="color: #888">--         and e.entrada_lote is not null</span>
        <span style="color: #888">--         and e.entrada_validade is not null</span>
                <span style="color: #C76A40;
            font-weight: 800;">and</span> e._branch_uid = _branch

                <span style="color: #C76A40;
            font-weight: 800;">and</span> e.entrada_estado = _const.entrada_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">and</span> e.entrada_espaco_destino = coalesce( arg_espaco_armazem, e.entrada_espaco_destino )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> e.entrada_artigo_id = coalesce( arg_artigo_id, e.entrada_artigo_id )
            <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  e.transferencia_espaco_destino,
                  e.transferencia_artigo_id,
                  e.transferencia_lote,
                  e.transferencia_validade,
                  <span style="color: #C76A40">0</span>::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> lote_entrada,
                  e.transferencia_quantidade <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_saida,
                  <span style="color: #C76A40;
            font-weight: 800;">case</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_with_reference <span style="color: #C76A40;
            font-weight: 800;">then</span> lib.sets_ref( e ) <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_ref,
                  <span style="color: #C76A40;
            font-weight: 800;">case</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_with_reference <span style="color: #C76A40;
            font-weight: 800;">then</span> e.transferencia_id <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_refuid,
                  <span style="color: #C76A40;
            font-weight: 800;">case</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_with_reference <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( e.TABLEOID ) <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_refclass
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.transferencia e
                <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
        <span style="color: #888">--           and e.transferencia_lote is not null</span>
        <span style="color: #888">--           and e.transferencia_validade is not null</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> e._branch_uid = _branch

                  <span style="color: #C76A40;
            font-weight: 800;">and</span> e.transferencia_estado = _const.transferencia_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> e.transferencia_espaco_destino = coalesce( arg_espaco_armazem, e.transferencia_espaco_destino )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> e.transferencia_artigo_id = coalesce( arg_artigo_id, e.transferencia_artigo_id )

          ), __lote_saida <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                e.venda_espaco_auth <span style="color: #C76A40;
            font-weight: 800;">as</span> espaco_id,
                e.venda_artigo_id <span style="color: #C76A40;
            font-weight: 800;">as</span> artigo_id,
                e.venda_lote <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_numero,
                e.venda_validade <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_validade,
                e.venda_quantidade <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_entrada,
                <span style="color: #C76A40">0</span>::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_saida,
                <span style="color: #C76A40;
            font-weight: 800;">case</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_with_reference <span style="color: #C76A40;
            font-weight: 800;">then</span> lib.sets_ref( e ) <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_ref,
                <span style="color: #C76A40;
            font-weight: 800;">case</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_with_reference <span style="color: #C76A40;
            font-weight: 800;">then</span> e.venda_id <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_refuid,
                <span style="color: #C76A40;
            font-weight: 800;">case</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_with_reference <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( e.TABLEOID ) <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_refclass
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.venda e
              <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
        <span style="color: #888">--         and e.venda_lote is not null</span>
        <span style="color: #888">--         and e.venda_validade is not null</span>
                <span style="color: #C76A40;
            font-weight: 800;">and</span> e._branch_uid = _branch

                <span style="color: #C76A40;
            font-weight: 800;">and</span> e.venda_estado <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.maguita_venda_estado_anulado, _const.maguita_venda_estado_canselado )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> e.venda_espaco_auth = coalesce( arg_espaco_armazem, e.venda_artigo_id )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> e.venda_artigo_id = coalesce( arg_artigo_id, e.venda_artigo_id )
            <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  e.transferencia_espaco_origem,
                  e.transferencia_artigo_id,
                  e.transferencia_lote,
                  e.transferencia_validade,
                  <span style="color: #C76A40">0</span>::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> lote_entrada,
                  e.transferencia_quantidade <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_saida,
                  <span style="color: #C76A40;
            font-weight: 800;">case</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_with_reference <span style="color: #C76A40;
            font-weight: 800;">then</span> lib.sets_ref( e ) <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_ref,
                  <span style="color: #C76A40;
            font-weight: 800;">case</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_with_reference <span style="color: #C76A40;
            font-weight: 800;">then</span> e.transferencia_id <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_refuid,
                  <span style="color: #C76A40;
            font-weight: 800;">case</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> arg_with_reference <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__format( e.TABLEOID ) <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_refclass
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.transferencia e
                <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
        <span style="color: #888">--           and e.transferencia_lote is not null</span>
        <span style="color: #888">--           and e.transferencia_validade is not null</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> e._branch_uid = _branch

                  <span style="color: #C76A40;
            font-weight: 800;">and</span> e.transferencia_estado = _const.transferencia_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> e.transferencia_espaco_origem = coalesce( arg_espaco_armazem, e.transferencia_espaco_origem )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> e.transferencia_artigo_id = coalesce( arg_artigo_id, e.transferencia_artigo_id )
          ), __lote <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                coalesce( le.espaco_id, ls.espaco_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> espaco_id,
                coalesce( le.artigo_id, ls.artigo_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> atrigo_id,
                coalesce( le.lote_numero, ls.lote_numero ) <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_numero,
                coalesce( le.lote_validade, ls.lote_validade ) <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_validade,
                coalesce( le.lote_entrada, ls.lote_entrada, <span style="color: #C76A40">0.0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_entrada,
                coalesce( le.lote_saida, ls.lote_saida, <span style="color: #C76A40">0.0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_saida,
                coalesce( le.lote_ref, ls.lote_ref ) <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_ref,
                coalesce( le.lote_refuid, ls.lote_refuid ) <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_refuid,
                coalesce( le.lote_refclass, ls.lote_refclass ) <span style="color: #C76A40;
            font-weight: 800;">as</span> lote_refclass
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __lote_entrada le
                <span style="color: #C76A40;
            font-weight: 800;">full</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __lote_saida ls <span style="color: #C76A40;
            font-weight: 800;">on</span> le.artigo_id = ls.artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> le.espaco_id = ls.espaco_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> le.lote_numero = ls.lote_numero
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> le.lote_validade = ls.lote_validade
          ), __filter <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                _l.espaco_id,
                _l.atrigo_id,
                _l.lote_numero,
                _l.lote_validade,
                _l.lote_ref,
                _l.lote_refuid,
                _l.lote_refclass,
                sum( _l.lote_entrada ) lote_entrada,
                sum( _l.lote_saida ) lote_saida
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __lote _l
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> _l.espaco_id,
                _l.atrigo_id,
                _l.lote_numero,
                _l.lote_validade,
                _l.lote_ref,
                _l.lote_refuid,
                _l.lote_refclass
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> _l.*
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __filter _l;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_change_conta_proforma {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_change_conta_proforma(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              arg_colaborador_id: UUID,
              arg_espaco_auth: UUID,

              conta_id UUID,
              conta_cliente_id: UID,
              conta_proformavencimento: DATE
              conta_proformaextras
            }
           \*\/</span>
          arg_conta_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;conta_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;

          _conta tweeks.conta;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _invalid_date_message <span style="color: #C76A40">text</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _conta := tweeks._get_conta( arg_conta_id );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _conta.conta_estado != _const.maguita_conta_estado_aberto <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Não pode colocar uma conta em modo proforma para as conta já fechada!&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          _invalid_date_message :=  tweeks.__check_conta_data(
            _tserie_id := _const.maguita_tserie_fatura,
            _conta_data := _conta.conta_data,
            _raise := <span style="color: #C76A40;
            font-weight: 800;">true</span>
          );
          
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _invalid_date_message <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> 
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( _invalid_date_message );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          
          _conta.conta_proforma := <span style="color: #C76A40;
            font-weight: 800;">true</span>;

          <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _conta
            <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets( _conta, args  );
          
          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.venda
            <span style="color: #C76A40;
            font-weight: 800;">set</span> venda_proforma = <span style="color: #C76A40;
            font-weight: 800;">true</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> venda_conta_id = _conta.conta_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> venda_estado <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> (
                _const.maguita_venda_estado_anulado,  
                _const.maguita_venda_estado_canselado  
              )
              <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> venda_proforma
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true( jsonb_build_object(
            <span style="color: #4d99bf">&#x27;conta&#x27;</span>, _conta
          ));
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_espaco_migrate {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_espaco_migrate(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\**
              args := {
                arg_espaco_auth: uuid
                arg_colaborador_id: uuid
                espaco_id: uuid
                espaco_espaco_id uuid
              }
             \*\/</span>
            _espaco tweeks.espaco;
            _loop <span style="color: #C76A40">jsonb</span>;
            _data <span style="color: #C76A40">record</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            _espaco := jsonb_populate_record( _espaco, args );
            _loop := tweeks.__infinity_loop( _espaco );

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _espaco.espaco_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> _espaco.espaco_espaco_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Necessario informar qual espaco e para onde sera alocado!&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _espaco.espaco_id = _espaco.espaco_espaco_id <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Não pode migrar um espaco para ele proprio&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;


            <span style="color: #C76A40;
            font-weight: 800;">if</span> _loop <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Não pode alocar em um sub-espaço!&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            <span style="color: #C76A40;
            font-weight: 800;">select</span>
              tweeks.__branch_uid( <span style="color: #C76A40;
            font-weight: 800;">null</span>, _espaco.espaco_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> local_branch,
              tweeks.__branch_uid( <span style="color: #C76A40;
            font-weight: 800;">null</span>, _espaco.espaco_espaco_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> master_branc
              <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
            ;

            <span style="color: #C76A40;
            font-weight: 800;">if</span> _data.local_branch != _data.master_branc <span style="color: #C76A40;
            font-weight: 800;">then</span>
              <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false(<span style="color: #4d99bf">&#x27;Não pode migra armazem de branchs diferentes&#x27;</span> );
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

            _espaco.espaco_colaborador_atualizaco := args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
            _espaco.espaco_dataatualizacao := <span style="color: #397300">current_timestamp</span>;

            <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _espaco
              <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets_up( _espaco, defaults := <span style="color: #C76A40;
            font-weight: 800;">array</span>[ <span style="color: #4d99bf">&#x27;espaco_nivel&#x27;</span>]::<span style="color: #C76A40">text</span>[] )
            ;

            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true( jsonb_build_object(
              <span style="color: #4d99bf">&#x27;esapco&#x27;</span>, _espaco
            ));
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_conta_notacredito {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_conta_notacredito(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              arg_colaborador_id: UID
              arg_espaco_auth: UID
              conta_fatura
            }
           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          _conta_fatura <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> := args-&gt;&gt;<span style="color: #4d99bf">&#x27;conta_fatura&#x27;</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __venda <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  ve.*,
                  art.*,
                  sum( tx.taxa_taxa ) <span style="color: #C76A40;
            font-weight: 800;">as</span> taxa_taxa,
                  sum( tx.taxa_percentagem ) <span style="color: #C76A40;
            font-weight: 800;">as</span> taxa_percentagem
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.venda ve
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> ve.venda_artigo_id = art.artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.taxa tx <span style="color: #C76A40;
            font-weight: 800;">on</span> tx.taxa_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( venda_taxas )
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ve._branch_uid  = arg_branch
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_estado = _const.maguita_venda_estado_fechado
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ve.venda_id,
                  art.artigo_id
            ), __venda_group <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  _ve.venda_id,
                  _ve.venda_conta_id,
                  array_agg( to_jsonb( _vei ) ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_itens
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __venda _ve
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> __venda _vei <span style="color: #C76A40;
            font-weight: 800;">on</span> _ve.venda_id = _vei.venda_venda_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> _ve.venda_venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> _ve.venda_id,
                  _ve.venda_conta_id

            ), __conta <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                ct.*,
                array_agg( to_jsonb( _veg ) || to_jsonb( _ved ) ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_vendas
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __venda_group _veg <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_id = _veg.venda_conta_id
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __venda _ved <span style="color: #C76A40;
            font-weight: 800;">on</span> _veg.venda_id = _ved.venda_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.venda venda_ncred <span style="color: #C76A40;
            font-weight: 800;">on</span> _veg.venda_id = venda_ncred.venda_venda_docorign
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> venda_ncred.venda_estado = _const.maguita_venda_estado_fechado
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ct._branch_uid = arg_branch
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_estado = _const.maguita_conta_estado_fechado
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> venda_ncred.venda_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_numerofatura = _conta_fatura
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> ct.conta_id
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _ct )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __conta _ct
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_stoks {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_stoks(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para carragar a quantidade em stock dos diferentes espaços
            args := {
              arg_colaborador_id: UUID
              arg_espaco_auth: UUID
              espaco_destino: UUID,
              artigos:[ UUID, UUID, UUID ]
            }
           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;

          arg_espaco_destino <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;espaco_destino&#x27;</span>;
          arg_artigos <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> jsonb_array_elements_text( args-&gt;<span style="color: #4d99bf">&#x27;artigos&#x27;</span> )::<span style="color: #C76A40">uuid</span>);
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> jsonb_array_length( args-&gt;<span style="color: #4d99bf">&#x27;artigos&#x27;</span> )  = <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            arg_artigos := <span style="color: #C76A40;
            font-weight: 800;">null</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __stoks <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    art.artigo_id,
                    art.artigo_nome,
                    e.espaco_id,
                    e.espaco_nome,
                    coalesce( s.stock_quantidade, <span style="color: #C76A40">0</span> ),
                    n.<span style="color: #C76A40;
            font-weight: 800;">index</span>
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo art
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> e.espaco_id = coalesce( arg_espaco_destino, e.espaco_id )
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks._get_stock( art.artigo_id, arg_espaco_destino ) s <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_id = s.stock_artigo_id
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> unnest( arg_artigos ) <span style="color: #C76A40;
            font-weight: 800;">with ordinality</span> n( id, <span style="color: #C76A40;
            font-weight: 800;">index</span> ) <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_id = n.id
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> art.artigo_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( coalesce( arg_artigos, <span style="color: #C76A40;
            font-weight: 800;">array</span>[]::<span style="color: #C76A40">uuid</span>[] ) )

            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( s )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __stoks s
              <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> s.<span style="color: #C76A40;
            font-weight: 800;">index</span>
              ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_branch {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_branch(args <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span>
            __branh <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  b.branch_uid,
                  b.branch_name,
                  b.branch_path,
                  b.branch_licence,
                  b.branch_grants,
                  b.branch_main_user,
                  b.branch_main_workspace,
                  b.branch_clusters,
                  b.branch_date,
                  b.branch_update,
                  b.branch_state,
                  tb.*,
                  e.espaco_id,
                  e.espaco_nome,
                  e.espaco_nivel,
                  e.espaco_estado,
                  e.espaco_codigo,
                  e.espaco_vender,
                  c.colaborador_id,
                  c.colaborador_nome,
                  c.colaborador_email,
                  c.colaborador_apelido,
                  c.colaborador_tipo
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.branch b
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.tbranch tb <span style="color: #C76A40;
            font-weight: 800;">on</span>  b.branch_tbranch_id = tb.tbranch_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> b.branch_uid = e.espaco_branch_uid
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> e.espaco_id = b.branch_main_workspace
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> auth.colaborador c <span style="color: #C76A40;
            font-weight: 800;">on</span> b.branch_uid = c.colaborador_branch_uid
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> c.colaborador_id = b.branch_main_user
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _b )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __branh _b
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_serie_distribuicao_pos {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_serie_distribuicao_pos(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          __series <span style="color: #C76A40">int2</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">array</span>( <span style="color: #C76A40;
            font-weight: 800;">select</span> e.text::<span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements_text( args-&gt;<span style="color: #4d99bf">&#x27;tseries&#x27;</span> ) e ( <span style="color: #C76A40">text</span> ));
          ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _espaco tweeks.espaco;
          __next <span style="color: #C76A40">record</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          
          <span style="color: #C76A40;
            font-weight: 800;">for</span> __next <span style="color: #C76A40;
            font-weight: 800;">in</span> 
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">from</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth ) c ( childrens )
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> unnest( c.childrens ) e ( espaco_id )  <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
          <span style="color: #C76A40;
            font-weight: 800;">loop</span>
            
            <span style="color: #888">-- Obter o espaço superior que pode gerar numero de seire</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> <span style="color: #C76A40;
            font-weight: 800;">recursive</span> __espaco <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                e.*,
                e.espaco_gerarfatura <span style="color: #C76A40;
            font-weight: 800;">as</span> __generate_serie
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.espaco e
              <span style="color: #C76A40;
            font-weight: 800;">where</span> e.espaco_id = __next.espaco_id
              <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
                <span style="color: #C76A40;
            font-weight: 800;">select</span> 
                  w.*,
                  w.espaco_gerarfatura
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __espaco _e
                <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco w <span style="color: #C76A40;
            font-weight: 800;">on</span> _e.espaco_espaco_id = w.espaco_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> _e.__generate_serie
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> *
              <span style="color: #C76A40;
            font-weight: 800;">into</span> _espaco 
                <span style="color: #C76A40;
            font-weight: 800;">from</span> __espaco __e
                <span style="color: #C76A40;
            font-weight: 800;">where</span> __e.__generate_serie
            ;
            
            <span style="color: #C76A40;
            font-weight: 800;">return query</span>
              <span style="color: #C76A40;
            font-weight: 800;">with</span> __autorizacao <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    __next.espaco_id,
                    s.serie_id,
                    s.serie_numero,
                    s.serie_designacao,
                    s.serie_sequencia,
                    s.serie_numcertificacao,
                    s.serie_quantidade,
                    a.autorizacao_uid,
                    a.autorizacao_ano,
                    ts.tserie_id,
                    ts.tserie_financa,
                    ts.tserie_desc,
                    ts.tserie_numlimit,
                    ts.tserie_seqlimit
                    
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.serie s
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.autorizacao a <span style="color: #C76A40;
            font-weight: 800;">on</span> s.serie_autorizacao_uid = a.autorizacao_uid
                    <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.tserie ts <span style="color: #C76A40;
            font-weight: 800;">on</span> s.serie_tserie_id = ts.tserie_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> s.serie_autorizacao_uid = a.autorizacao_uid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> s._branch_uid = ___branch
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> a._branch_uid = ___branch
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_espaco_id = _espaco.espaco_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_tserie_id = <span style="color: #C76A40;
            font-weight: 800;">any</span>( __series )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> s.serie_estado = _const.maguita_serie_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> a.autorizacao_estado = _const.maguita_autorizacao_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> a.autorizacao_ano = extract( years <span style="color: #C76A40;
            font-weight: 800;">from</span> now() )::<span style="color: #C76A40">int</span>
              ), __espaco <span style="color: #C76A40;
            font-weight: 800;">as</span>(
                <span style="color: #C76A40;
            font-weight: 800;">select</span> 
                    e.espaco_id,
                    e.espaco_nome,
                    e.espaco_codigo,
                    coalesce(jsonb_agg( to_jsonb( _a ) ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> _a.serie_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> ), jsonb_build_array()) <span style="color: #C76A40;
            font-weight: 800;">as</span> espaco_series
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.espaco e 
                    <span style="color: #C76A40;
            font-weight: 800;">left join</span> __autorizacao _a <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
                  <span style="color: #C76A40;
            font-weight: 800;">where</span> e.espaco_id = __next.espaco_id
                  <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> e.espaco_id
              ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( _e )
                  <span style="color: #C76A40;
            font-weight: 800;">from</span> __espaco _e
            ;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_change_caixa_close {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_change_caixa_close(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.res
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para fechar uma posto
            args := {
              arg_caixa_id: ID,
              arg_espaco_auth: ID,
              arg_colaborador_id: ID,
              arg_caixa_montantefecho: MONTANTE,
              arg_caixa_quantidadecheque: QUANT,
              arg_caixa_observacao: OBS,
            }
          \*\/</span>

          arg_caixa_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_caixa_id&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_caixa_montantefecho  <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_caixa_montantefecho&#x27;</span>;
          arg_caixa_quantidadecheque <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_caixa_quantidadecheque&#x27;</span>;
          arg_caixa_observacao <span style="color: #C76A40">varchar</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_caixa_observacao&#x27;</span>;

          _posto <span style="color: #C76A40">record</span>;
          _caixa tweeks.caixa;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _movimentos <span style="color: #C76A40">record</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _caixa := tweeks._get_caixa( arg_caixa_id );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _caixa.caixa_estado != _const.maguita_caixa_estado_ativo <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_false( <span style="color: #4d99bf">&#x27;Essa caixa não se encontra mais aberta!&#x27;</span> );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">select</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _posto
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.posto cx
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.caixa ab <span style="color: #C76A40;
            font-weight: 800;">on</span> cx.posto_id = ab.caixa_posto_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span> ab.caixa_id = arg_caixa_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> ab.caixa_estado = _const.maguita_caixa_estado_ativo
              <span style="color: #C76A40;
            font-weight: 800;">and</span> cx.posto_estado = _const.maguita_posto_estado_aberto
          ;

          <span style="color: #888">-- Obter a quantidade de cheque de venda</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * ) <span style="color: #C76A40;
            font-weight: 800;">into</span> arg_caixa_quantidadecheque
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.deposito de
            <span style="color: #C76A40;
            font-weight: 800;">where</span> de.deposito_caixa_id = _caixa.caixa_id
              <span style="color: #C76A40;
            font-weight: 800;">and</span> de.deposito_tpaga_id = _const.maguita_tpaga_cheque
              <span style="color: #C76A40;
            font-weight: 800;">and</span> de._tgrupo_id = _const.maguita_tgrupo_cnormal
          ;

          <span style="color: #C76A40;
            font-weight: 800;">with</span> __deposito <span style="color: #C76A40;
            font-weight: 800;">as</span>  (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                sum( de.deposito_montantefinal ) <span style="color: #C76A40;
            font-weight: 800;">as</span> deposito_montantefinal,
                count( de.deposito_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> depositos,
                count( de.deposito_id ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> de.deposito_tpaga_id = _const.maguita_tpaga_cheque ) <span style="color: #C76A40;
            font-weight: 800;">as</span> depositos_cheques
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.deposito de
              <span style="color: #C76A40;
            font-weight: 800;">where</span> de.deposito_posto_id = _caixa.caixa_posto_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> de._tgrupo_id = _const.maguita_tgrupo_cnormal
                <span style="color: #C76A40;
            font-weight: 800;">and</span> de.deposito_estado = _const.maguita_deposito_estado_ativo
          ), __transacao <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                sum( tr.transacao_montante ) <span style="color: #C76A40;
            font-weight: 800;">as</span> transacao_montante,
                sum( tr.transacao_montante ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> tr.transacao_montante &gt;= <span style="color: #C76A40">0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> transacao_montantecredito,
                sum( abs( tr.transacao_montante ) ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> tr.transacao_montante &lt; <span style="color: #C76A40">0</span> )  <span style="color: #C76A40;
            font-weight: 800;">as</span> transacao_montantedebito
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.transacao tr
              <span style="color: #C76A40;
            font-weight: 800;">where</span> tr.transacao_posto_id = _caixa.caixa_posto_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> tr.transacao_estado = _const.maguita_transacao_estado_ativo
          ), __coa <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                _de.depositos,
                _de.depositos_cheques,
                coalesce( _de.deposito_montantefinal, <span style="color: #C76A40">0.0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> deposito_montantefinal,
                coalesce( _tr.transacao_montante, <span style="color: #C76A40">0.0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> transacao_montante,
                coalesce( _tr.transacao_montantecredito, <span style="color: #C76A40">0.0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> transacao_montantecredito,
                coalesce( _tr.transacao_montantedebito, <span style="color: #C76A40">0.0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> transacao_montantedebito
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __deposito _de, __transacao _tr
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
              _c.*,
              _c.transacao_montante + _c.deposito_montantefinal <span style="color: #C76A40;
            font-weight: 800;">as</span> posto_montantefinal
              <span style="color: #C76A40;
            font-weight: 800;">into</span> _movimentos
            <span style="color: #C76A40;
            font-weight: 800;">from</span> __coa _c
            ;

          _caixa.caixa_estado                   := _const.maguita_caixa_estado_fechado;
          _caixa.caixa_dataatualizacao          := <span style="color: #397300">current_timestamp</span>;
          _caixa.caixa_colaborador_atualizacao  := arg_colaborador_id;
          _caixa.caixa_quantidadecheque         := arg_caixa_quantidadecheque;
          _caixa.caixa_quantidadechequeposto    := arg_caixa_quantidadecheque;
          _caixa.caixa_montantefecho            := arg_caixa_montantefecho;
          _caixa.caixa_montantefechoposto       := _movimentos.posto_montantefinal;
          _caixa.caixa_observacao               := arg_caixa_observacao;

          <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _caixa
            <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets_up( _caixa );

          <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.res_true(jsonb_build_object(
            <span style="color: #4d99bf">&#x27;caixa&#x27;</span>, _caixa
          ));
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface sets_tipoimposto {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.sets_tipoimposto(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para registar os tipos de imposto
            args := {
              arg_colaborador_id: ID,
              arg_espaco_auth: ID,
              arg_links :[ { arg_espaco_destino: ID  } ]

              tipoimposto_id
              tipoimposto_nome: NOME,
              tipoimposto_codigo: CODIGO,
              taxa_taxa: VALOR,
              taxa_percentagem: PERCENTAGEM,

            }
           \*\/</span>

          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;


          arg_tipoimposto_codigo <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;tipoimposto_codigo&#x27;</span>;
          arg_taxa_percentagem <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;taxa_percentagem&#x27;</span>;
          arg_taxa_taxa <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;taxa_taxa&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );
          _tipoimposto tweeks.tipoimposto;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          arg_tipoimposto_codigo := lib.str_normalize( upper( <span style="color: #397300">public</span>.unaccent( arg_tipoimposto_codigo ) ) );

          _tipoimposto := jsonb_populate_record( _tipoimposto, args );

          <span style="color: #C76A40;
            font-weight: 800;">if</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * ) &gt; <span style="color: #C76A40">0</span>
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.tipoimposto tip
              <span style="color: #C76A40;
            font-weight: 800;">where</span> tip.tipoimposto_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> tip.tipoimposto_id != coalesce( _tipoimposto.tipoimposto_id, lib.to_uuid( <span style="color: #C76A40">0</span> ) )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> lib.str_normalize( upper( <span style="color: #397300">public</span>.unaccent( tip.tipoimposto_codigo ) ) ) = arg_tipoimposto_codigo
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;@tweeks.tipoimposto.codigo-already-exist&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _tipoimposto.tipoimposto_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            _tipoimposto.tipoimposto_colaborador_id := arg_colaborador_id;
            _tipoimposto.tipoimposto_espaco_auth := arg_espaco_auth;
          <span style="color: #C76A40;
            font-weight: 800;">else</span>
            _tipoimposto.tipoimposto_colaborador_atualizacao := arg_colaborador_id;
            _tipoimposto.tipoimposto_dataatuzaliacao := now();
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _tipoimposto
            <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets( _tipoimposto, args );

          <span style="color: #C76A40;
            font-weight: 800;">perform</span> tweeks.funct_reg_taxa(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth,
              <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
              <span style="color: #4d99bf">&#x27;arg_tipoimposto_id&#x27;</span>, _tipoimposto.tipoimposto_id,
              <span style="color: #4d99bf">&#x27;arg_taxa_percentagem&#x27;</span>, arg_taxa_percentagem,
              <span style="color: #4d99bf">&#x27;arg_taxa_taxa&#x27;</span>, arg_taxa_taxa
            )
          );

          <span style="color: #C76A40;
            font-weight: 800;">perform</span> tweeks.funct_reg_link_associacao(
            jsonb_build_object(
              <span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>, arg_colaborador_id,
              <span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>, arg_espaco_auth,
              <span style="color: #4d99bf">&#x27;arg_link_nome&#x27;</span>, _tipoimposto.tipoimposto_nome,
              <span style="color: #4d99bf">&#x27;arg_link_referencia&#x27;</span>, jsonb_build_object( <span style="color: #4d99bf">&#x27;tipoimposto_id&#x27;</span>, _tipoimposto.tipoimposto_id ),
              <span style="color: #4d99bf">&#x27;arg_links&#x27;</span>, args-&gt;<span style="color: #4d99bf">&#x27;arg_links&#x27;</span>
            )
          );

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;tipoimposto&#x27;</span>, _tipoimposto
          );

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __sync_branch_map {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__sync_branch_map()
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">text</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          __branch_auto <span style="color: #C76A40">regprocedure</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #4d99bf">&#x27;tweeks.__tg_use_branch()&#x27;</span>::<span style="color: #C76A40">regprocedure</span>;
          _tg <span style="color: #C76A40">record</span>;
          _data <span style="color: #C76A40">record</span>;
          _base_name <span style="color: #C76A40">text</span>;
          _trigger_name <span style="color: #C76A40">text</span>;
          _statement <span style="color: #C76A40">text</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">for</span> _tg <span style="color: #C76A40;
            font-weight: 800;">in</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
              tg.tgrelid::<span style="color: #C76A40">regclass</span>::<span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> share_regclass,
              tg.tgname <span style="color: #C76A40;
            font-weight: 800;">as</span> trigger_name,
              tg.*
            <span style="color: #C76A40;
            font-weight: 800;">from</span> pg_trigger tg
            <span style="color: #C76A40;
            font-weight: 800;">where</span> tg.tgfoid <span style="color: #C76A40;
            font-weight: 800;">in</span>( __branch_auto )
            <span style="color: #C76A40;
            font-weight: 800;">loop</span>
                _statement  :=  format( <span style="color: #4d99bf">&#x27;drop trigger %I on %s&#x27;</span>, _tg.trigger_name, _tg.share_regclass );
                <span style="color: #C76A40;
            font-weight: 800;">return next</span> _statement;
              <span style="color: #C76A40;
            font-weight: 800;">begin</span>
                <span style="color: #C76A40;
            font-weight: 800;">execute</span> _statement;
              <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
              <span style="color: #C76A40;
            font-weight: 800;">end</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

          <span style="color: #C76A40;
            font-weight: 800;">for</span> _tg <span style="color: #C76A40;
            font-weight: 800;">in</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> *
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.branchmap _b
          <span style="color: #C76A40;
            font-weight: 800;">loop</span>
            <span style="color: #888">--language=PostgreSQL</span>
            _statement := $<span style="color: #C76A40;
            font-weight: 800;">sql</span>$
              <span style="color: #C76A40;
            font-weight: 800;">alter</span> <span style="color: #C76A40;
            font-weight: 800;">table</span> __schema_name.__table_name <span style="color: #C76A40;
            font-weight: 800;">add</span> <span style="color: #C76A40;
            font-weight: 800;">column</span> <span style="color: #C76A40;
            font-weight: 800;">if</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">exists</span> _branch_uid <span style="color: #C76A40">uuid</span>;
            $<span style="color: #C76A40;
            font-weight: 800;">sql</span>$;
            _statement := replace( _statement, <span style="color: #4d99bf">&#x27;__schema_name&#x27;</span>, <span style="color: #4d99bf">&#x27;%I&#x27;</span> );
            _statement := replace( _statement, <span style="color: #4d99bf">&#x27;__table_name&#x27;</span>, <span style="color: #4d99bf">&#x27;%I&#x27;</span> );
            _statement := format( _statement, _tg.map_sch, _tg.map_tbl );
            <span style="color: #C76A40;
            font-weight: 800;">return next</span> _statement;
        <span style="color: #888">--     begin</span>
              <span style="color: #C76A40;
            font-weight: 800;">execute</span> _statement;
        <span style="color: #888">--     exception when others then null; end;</span>

         <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

          <span style="color: #C76A40;
            font-weight: 800;">for</span> _tg <span style="color: #C76A40;
            font-weight: 800;">in</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __when ( <span style="color: #C76A40;
            font-weight: 800;">class</span>, <span style="color: #C76A40;
            font-weight: 800;">schema</span>, tbl, _tg_op, _procedure ) <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>  _b.<span style="color: #C76A40;
            font-weight: 800;">class</span>, _b.map_sch, _b.map_tbl, <span style="color: #4d99bf">&#x27;insert&#x27;</span>, __branch_auto <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.branchmap _b
              <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span> <span style="color: #C76A40;
            font-weight: 800;">select</span>  _b.<span style="color: #C76A40;
            font-weight: 800;">class</span>, _b.map_sch, _b.map_tbl, <span style="color: #4d99bf">&#x27;update&#x27;</span>,  __branch_auto <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.branchmap _b
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> *
            <span style="color: #C76A40;
            font-weight: 800;">from</span> __when w
            <span style="color: #C76A40;
            font-weight: 800;">loop</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span> array_agg( tgname ) <span style="color: #C76A40;
            font-weight: 800;">as</span> triggers <span style="color: #C76A40;
            font-weight: 800;">into</span> _data
                <span style="color: #C76A40;
            font-weight: 800;">from</span> pg_trigger tg
                <span style="color: #C76A40;
            font-weight: 800;">where</span> tg.tgrelid::<span style="color: #C76A40">regclass</span> = _tg.<span style="color: #C76A40;
            font-weight: 800;">class</span>::<span style="color: #C76A40">regclass</span>
              ;

              _base_name := format( <span style="color: #4d99bf">&#x27;sync_branch_map_before_%s_on_%s_%s&#x27;</span>, _tg._tg_op, _tg.<span style="color: #C76A40;
            font-weight: 800;">schema</span>, _tg.tbl );

              _trigger_name := format( <span style="color: #4d99bf">&#x27;%s_%s&#x27;</span>, _base_name, ( random() * (<span style="color: #C76A40">999999</span> - <span style="color: #C76A40">100000</span> )+<span style="color: #C76A40">100000</span>)::<span style="color: #C76A40">int</span> );
              <span style="color: #C76A40;
            font-weight: 800;">while</span> _trigger_name = <span style="color: #C76A40;
            font-weight: 800;">any</span>( _data.triggers ) <span style="color: #C76A40;
            font-weight: 800;">loop</span>
                _trigger_name := format( <span style="color: #4d99bf">&#x27;%s_%s&#x27;</span>, _base_name, ( random() * (<span style="color: #C76A40">999999</span> - <span style="color: #C76A40">100000</span> )+<span style="color: #C76A40">100000</span>)::<span style="color: #C76A40">int</span> );
              <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

              <span style="color: #888">--language=PostgreSQL</span>
              _statement := $<span style="color: #C76A40;
            font-weight: 800;">sql</span>$
                <span style="color: #C76A40;
            font-weight: 800;">create</span> <span style="color: #C76A40;
            font-weight: 800;">trigger</span> _tg_name
                  <span style="color: #C76A40;
            font-weight: 800;">before</span> <span style="color: #C76A40;
            font-weight: 800;">delete</span>
                  <span style="color: #C76A40;
            font-weight: 800;">on</span> _table_name
                  <span style="color: #C76A40;
            font-weight: 800;">for</span> <span style="color: #C76A40;
            font-weight: 800;">each</span> <span style="color: #C76A40;
            font-weight: 800;">row</span>
                  <span style="color: #C76A40;
            font-weight: 800;">when</span> ( <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.__is_replication() )
                <span style="color: #C76A40;
            font-weight: 800;">execute</span> <span style="color: #C76A40;
            font-weight: 800;">procedure</span> _use_procedure
              ;
              $<span style="color: #C76A40;
            font-weight: 800;">sql</span>$;

              _statement := replace( _statement, <span style="color: #4d99bf">&#x27;_tg_name&#x27;</span>, <span style="color: #4d99bf">&#x27;%I&#x27;</span> );
              _statement := replace( _statement, <span style="color: #4d99bf">&#x27;delete&#x27;</span>, <span style="color: #4d99bf">&#x27;%s&#x27;</span> );
              _statement := replace( _statement, <span style="color: #4d99bf">&#x27;_table_name&#x27;</span>, <span style="color: #4d99bf">&#x27;%s&#x27;</span> );
              _statement := replace( _statement, <span style="color: #4d99bf">&#x27;_use_procedure&#x27;</span>, <span style="color: #4d99bf">&#x27;%s&#x27;</span> );
              _statement := format( _statement, _trigger_name, _tg._tg_op, _tg.<span style="color: #C76A40;
            font-weight: 800;">class</span>, _tg._procedure );

              <span style="color: #C76A40;
            font-weight: 800;">begin</span>
                <span style="color: #C76A40;
            font-weight: 800;">execute</span> _statement;
              <span style="color: #C76A40;
            font-weight: 800;">return next</span> _statement;
              <span style="color: #C76A40;
            font-weight: 800;">exception</span> <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>;
              <span style="color: #C76A40;
            font-weight: 800;">end</span>;
            <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __generate_artigo_code {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__generate_artigo_code(arg_classe_id <span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _classe tweeks.classe;
          _cluster <span style="color: #C76A40;
            font-weight: 800;">cluster</span>.<span style="color: #C76A40;
            font-weight: 800;">cluster</span>;
          code <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _cluster := <span style="color: #C76A40;
            font-weight: 800;">cluster</span>._get_cluster_local();

          <span style="color: #C76A40;
            font-weight: 800;">while</span> code <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>
            <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.classe
              <span style="color: #C76A40;
            font-weight: 800;">set</span> classe_lastcodigo = classe.classe_lastcodigo +<span style="color: #C76A40">1</span>
              <span style="color: #C76A40;
            font-weight: 800;">where</span> classe_id = arg_classe_id
              <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _classe
            ;

            code := lib.str_nospace( format( <span style="color: #4d99bf">&#x27;%s%s%s&#x27;</span>,
              _cluster.cluster_code,
              &quot;right&quot;( _classe.classe_codigo, <span style="color: #C76A40">2</span> ),
              greatest( _classe.classe_codigo::<span style="color: #C76A40">text</span>, lpad( _classe.classe_codigo, <span style="color: #C76A40">2</span>, <span style="color: #4d99bf">&#x27;0&#x27;</span>) )
            ));

            <span style="color: #C76A40;
            font-weight: 800;">if</span>( <span style="color: #C76A40;
            font-weight: 800;">exists</span>(
              <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo a
                <span style="color: #C76A40;
            font-weight: 800;">where</span> a.artigo_codigo = code
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> a._branch_uid = _classe._branch_uid
            )) <span style="color: #C76A40;
            font-weight: 800;">then</span> code := <span style="color: #C76A40;
            font-weight: 800;">null</span>; <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> code;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_report_estatistica_venda {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_report_estatistica_venda(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Esse relatório gera a estatistica de venda
            filter := {
              arg_periodo_required: { &quot;key&quot;: KEY, &quot;label&quot;: NAME, &quot;title&quot;: TITLE },
              arg_estatistica_tipo: { &quot;key&quot;: KEY, &quot;title&quot;: TITLE, &quot;class&quot;: CLASSE }
              arg_data_operacao: { start: DATE, end: DATE },
              arg_data_registro: { start: DATE, end: DATE },
              arg_artigo_id: ID,
              arg_classe_id: ID,
              arg_show_empty: 1 | 0
              arg_periodos: PERIODO
           \*\/</span>

          arg_periodo_requiere_key <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;<span style="color: #4d99bf">&#x27;arg_periodo_required&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;key&#x27;</span>;
          arg_periodo_requiere_label <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;<span style="color: #4d99bf">&#x27;arg_periodo_required&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;label&#x27;</span>;
          arg_periodo_requiere_title <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;<span style="color: #4d99bf">&#x27;arg_periodo_required&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;title&#x27;</span>;
          arg_periodo_requiere_interval <span style="color: #C76A40">interval</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;<span style="color: #4d99bf">&#x27;arg_periodo_required&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;interval&#x27;</span>;
          arg_periodo_requiere_increment <span style="color: #C76A40">interval</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;<span style="color: #4d99bf">&#x27;arg_periodo_required&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;increment&#x27;</span>;
          arg_periodo_requiere_length <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;<span style="color: #4d99bf">&#x27;arg_periodo_required&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;length&#x27;</span>;
          arg_periodo_requiere_loop <span style="color: #C76A40">integer</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;<span style="color: #4d99bf">&#x27;arg_periodo_required&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;loop&#x27;</span>;
          arg_periodo_requiere_type <span style="color: #C76A40">text</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;<span style="color: #4d99bf">&#x27;arg_periodo_required&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;type&#x27;</span>;

          arg_estatistica_tipo_key <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;<span style="color: #4d99bf">&#x27;arg_estatistica_tipo&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;key&#x27;</span>;
          arg_estatistica_tipo_title <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;<span style="color: #4d99bf">&#x27;arg_estatistica_tipo&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;title&#x27;</span>;
          arg_estatistica_tipo_class <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;<span style="color: #4d99bf">&#x27;arg_estatistica_tipo&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;class&#x27;</span>;

          arg_data_registro_start <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;<span style="color: #4d99bf">&#x27;arg_data_registro&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;start&#x27;</span>;
          arg_data_registro_end <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span>   <span style="color: #C76A40;
            font-weight: 800;">filter</span> -&gt;<span style="color: #4d99bf">&#x27;arg_data_registro&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;end&#x27;</span>;

          arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span>;
          arg_posto_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_id&#x27;</span>;
          arg_classe_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_classe_id&#x27;</span>;
          arg_periodos <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_periodos&#x27;</span>;
          arg_show_empty <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_show_empty&#x27;</span>;

          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #888">-- Garantir que a data não ultrapassa o limite de tempo para o periodo</span>
          <span style="color: #888">-- Pirodo Diario 30 dias = 1 mes</span>

          <span style="color: #C76A40;
            font-weight: 800;">if</span>  arg_estatistica_tipo_class = <span style="color: #4d99bf">&#x27;Money&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            arg_periodo_requiere_loop := <span style="color: #C76A40">8</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- Periodo Mensal 365 dias = 12 meses = 1 ano</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_data_registro_end::<span style="color: #C76A40">timestamptz</span> - arg_data_registro_start::<span style="color: #C76A40">timestamptz</span> &gt;= arg_periodo_requiere_interval <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;


          arg_show_empty := coalesce( arg_show_empty, <span style="color: #C76A40;
            font-weight: 800;">true</span> );
          arg_periodos := coalesce( arg_periodos, arg_periodo_requiere_loop );

          <span style="color: #888">-- Determinar a data limite inferior</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_data_registro_start <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">and</span> arg_data_registro_end <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            arg_data_registro_start := <span style="color: #397300">current_date</span> - ( arg_periodo_requiere_increment * arg_periodos );
          elseif  arg_data_registro_start <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            arg_data_registro_start := arg_data_registro_end - ( arg_periodo_requiere_increment * ( arg_periodos ) );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- Determinar a data limit superior</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> arg_data_registro_end <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            arg_data_registro_end := arg_data_registro_start + ( arg_periodo_requiere_increment * ( arg_periodos ) );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">--   raise exception &#x27;start: %, end: %&#x27;, arg_data_registro_start, arg_data_registro_end;</span>



          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> <span style="color: #C76A40;
            font-weight: 800;">recursive</span> periode ( <span style="color: #C76A40">date</span>, <span style="color: #C76A40;
            font-weight: 800;">loop</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">values</span> ( arg_data_registro_start, <span style="color: #C76A40">1</span> )
              <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span> ( p.date + arg_periodo_requiere_increment )::<span style="color: #C76A40">date</span>, p.<span style="color: #C76A40;
            font-weight: 800;">loop</span> +<span style="color: #C76A40">1</span>
              <span style="color: #C76A40;
            font-weight: 800;">from</span> periode p
              <span style="color: #C76A40;
            font-weight: 800;">where</span> p.date &lt; arg_data_registro_end
            ), reporte <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                to_char( p2.date, arg_periodo_requiere_key ) <span style="color: #C76A40;
            font-weight: 800;">as</span> key,
                to_char( p2.date, arg_periodo_requiere_label ) <span style="color: #C76A40;
            font-weight: 800;">as</span> label,
                to_char( p2.date, arg_periodo_requiere_title ) <span style="color: #C76A40;
            font-weight: 800;">as</span> period_title,
                art.*,
                coalesce( count( <span style="color: #C76A40;
            font-weight: 800;">distinct</span> ct.conta_id ), <span style="color: #C76A40">0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> conta_quantidade,
                coalesce( count( <span style="color: #C76A40;
            font-weight: 800;">distinct</span> ve.venda_id ), <span style="color: #C76A40">0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_totalvenda,
                coalesce( sum( ve.venda_quantidade ), <span style="color: #C76A40">0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_quantidade,
                coalesce( sum( ve.venda_montantetotal ), <span style="color: #C76A40">0</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_montante
              <span style="color: #C76A40;
            font-weight: 800;">from</span> periode p2
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.conta ct <span style="color: #C76A40;
            font-weight: 800;">on</span> to_char( p2.date, arg_periodo_requiere_key ) = to_char( ct.conta_dataregistro, arg_periodo_requiere_key )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_estado =  _const.conta_estado_pago
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.venda ve <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_id = ve.venda_conta_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_estado =  _const.venda_estado_fechado
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> ve.venda_artigo_id = art.artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_id = coalesce( arg_artigo_id, art.artigo_id )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_classe_id = coalesce( arg_classe_id, art.artigo_classe_id )
                <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.caixa cx <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_caixa_fechopagamento = cx.caixa_id
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> cx.caixa_posto_id = coalesce( arg_posto_id, cx.caixa_posto_id )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> cx.caixa_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
              <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> art.artigo_id,
                p2.date
              <span style="color: #C76A40;
            font-weight: 800;">having</span> arg_show_empty <span style="color: #C76A40;
            font-weight: 800;">or</span> count( ve.venda_id ) &gt; <span style="color: #C76A40">0</span>
            )
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                jsonb_build_object(
                <span style="color: #4d99bf">&#x27;header&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">array</span>(
                  <span style="color: #C76A40;
            font-weight: 800;">select</span>
                    jsonb_build_object(
                      <span style="color: #4d99bf">&#x27;key&#x27;</span>, p.key,
                      <span style="color: #4d99bf">&#x27;label&#x27;</span>, p.label,
                      <span style="color: #4d99bf">&#x27;class&#x27;</span>, arg_estatistica_tipo_class,
                      <span style="color: #4d99bf">&#x27;length&#x27;</span>, arg_periodo_requiere_length,
                      <span style="color: #4d99bf">&#x27;title&#x27;</span>, format( <span style="color: #4d99bf">&#x27;%s em %s&#x27;</span>, arg_estatistica_tipo_title, p.period_title ),
                      <span style="color: #4d99bf">&#x27;sumRow&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">true</span>
                    )
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> reporte p
                    <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> p.key, p.label, p.period_title
                    <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> p.key <span style="color: #C76A40;
            font-weight: 800;">asc</span>
                ) || <span style="color: #C76A40;
            font-weight: 800;">array</span> [
                  jsonb_build_object( <span style="color: #4d99bf">&#x27;key&#x27;</span>, <span style="color: #4d99bf">&#x27;sum&#x27;</span>, <span style="color: #4d99bf">&#x27;label&#x27;</span>, <span style="color: #4d99bf">&#x27;SUN&#x27;</span>, <span style="color: #4d99bf">&#x27;class&#x27;</span>, arg_estatistica_tipo_class, <span style="color: #4d99bf">&#x27;title&#x27;</span>, <span style="color: #4d99bf">&#x27;Somatorio&#x27;</span>, <span style="color: #4d99bf">&#x27;sumRow&#x27;</span>, <span style="color: #C76A40;
            font-weight: 800;">true</span>, <span style="color: #4d99bf">&#x27;length&#x27;</span>, <span style="color: #4d99bf">&#x27;normal&#x27;</span> )
                ]
              )
            <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
              <span style="color: #C76A40;
            font-weight: 800;">select</span> jsonb_build_object(
                  <span style="color: #4d99bf">&#x27;artigo_id&#x27;</span>, p.artigo_id,
                  <span style="color: #4d99bf">&#x27;artigo_nome&#x27;</span>, p.artigo_nome,
                  <span style="color: #4d99bf">&#x27;artigo_codigo&#x27;</span>, p.artigo_codigo,
                  <span style="color: #4d99bf">&#x27;artigo_montantetotalvendido&#x27;</span>, sum( p.venda_montante ),
                  <span style="color: #4d99bf">&#x27;artigo_quantidadetotalvendida&#x27;</span>, sum( p.venda_quantidade ),
                  <span style="color: #4d99bf">&#x27;sum&#x27;</span>, sum( ( to_jsonb( p ) -&gt;&gt; ( arg_estatistica_tipo_key ) ) ::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> ),
                  <span style="color: #4d99bf">&#x27;avg&#x27;</span>, avg( ( to_jsonb( p ) -&gt;&gt; ( arg_estatistica_tipo_key ) ) ::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> )
                ) || jsonb_object_agg( p.key, to_jsonb( p ) -&gt;&gt; ( arg_estatistica_tipo_key ) )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> reporte p
                <span style="color: #C76A40;
            font-weight: 800;">where</span> p.artigo_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span>
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                  p.artigo_id,
                  p.artigo_codigo,
                  p.artigo_nome
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_link_tecla {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_link_tecla(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para registar as link
            args := {
              arg_link_id: ID,
              arg_link_associacao: ID,
              arg_tlink_id: ID,
              arg_artigo_id: ID,
              arg_espaco_auth: ID,
              arg_espaco_destino: ID,
              arg_colaborador_id: ID,
              arg_link_posicao: POSICAO,
              arg_link_nome: NOME,
              arg_link_config: JSON,
            }
          \*\/</span>

          arg_link_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_link_id&#x27;</span>;
          arg_link_associacao <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_link_associacao&#x27;</span>;
          arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_destino <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_destino&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span> ;

          arg_tlink_id <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_tlink_id&#x27;</span>;
          arg_link_posicao <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_link_posicao&#x27;</span>;
          arg_link_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_link_nome&#x27;</span>;
          arg_link_config <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;<span style="color: #4d99bf">&#x27;arg_link_config&#x27;</span>;

          arg_link_estado <span style="color: #C76A40">int2</span>;

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _link tweeks.link;
          _link_associacao tweeks.link;
          _artigo tweeks.artigo;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          <span style="color: #C76A40;
            font-weight: 800;">lock</span> <span style="color: #C76A40;
            font-weight: 800;">table</span> tweeks.link <span style="color: #C76A40;
            font-weight: 800;">in</span> <span style="color: #C76A40;
            font-weight: 800;">share mode</span>;
          <span style="color: #C76A40;
            font-weight: 800;">lock</span> <span style="color: #C76A40;
            font-weight: 800;">table</span> tweeks.artigo <span style="color: #C76A40;
            font-weight: 800;">in</span> <span style="color: #C76A40;
            font-weight: 800;">share mode</span>;

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          _link := tweeks._get_link( arg_link_id );
          _link_associacao := tweeks._get_link( arg_link_associacao );
          _artigo := tweeks._get_artigo( arg_artigo_id );

          <span style="color: #888">-- Garantir que a link estejá livre</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> count( * ) &gt; <span style="color: #C76A40">0</span>
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.link a
              <span style="color: #C76A40;
            font-weight: 800;">where</span> a.link_espaco_destino = arg_espaco_destino
                <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( a.link_link_id, <span style="color: #C76A40">-1</span> ) = coalesce( arg_link_id, <span style="color: #C76A40">-1</span> )
                <span style="color: #C76A40;
            font-weight: 800;">and</span> a.link_posicao = arg_link_posicao
                <span style="color: #C76A40;
            font-weight: 800;">and</span> a.link_estado = _const.acerto_estado_ativo
          ) <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;@tweeks.link.position-is-occupied&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #888">-- Garantir que link do produto não entra nenhuma sub-link</span>
          <span style="color: #C76A40;
            font-weight: 800;">if</span> _link.link_referencia-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_id&#x27;</span> <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;@tweeks.link.is-a-article&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _link.link_estado != _const.link_estado_ativo <span style="color: #C76A40;
            font-weight: 800;">then</span>
            <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">false</span> ? <span style="color: #4d99bf">&#x27;@tweeks.link.is-closed&#x27;</span>;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">if</span> _artigo.artigo_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span>
            arg_link_nome := _artigo.artigo_nome;
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">if</span>;

          <span style="color: #C76A40;
            font-weight: 800;">insert</span> <span style="color: #C76A40;
            font-weight: 800;">into</span> tweeks.link (
            link_link_id,
            link_link_associacao,
            link_tlink_id,
            link_referencia,
            link_espaco_destino,
            link_espaco_auth,
            link_colaborador_id,
            link_posicao,
            link_nome,
            link_config,
            link_extras
          ) <span style="color: #C76A40;
            font-weight: 800;">values</span> (
            arg_link_id,
            arg_link_associacao,
            arg_tlink_id,
            jsonb_build_object( <span style="color: #4d99bf">&#x27;artigo_id&#x27;</span>, arg_artigo_id ),
            arg_espaco_destino,
            arg_espaco_auth,
            arg_colaborador_id,
            arg_link_posicao,
            arg_link_nome,
            arg_link_config,
            _link_associacao.link_extras
          ) <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _link;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;link&#x27;</span>, _link
          );

        <span style="color: #C76A40;
            font-weight: 800;">exception</span>  <span style="color: #C76A40;
            font-weight: 800;">when</span> others <span style="color: #C76A40;
            font-weight: 800;">then</span>
          <span style="color: #bc6060">&lt;&lt;_ex&gt;&gt;</span> <span style="color: #C76A40;
            font-weight: 800;">declare</span> e <span style="color: #C76A40">text</span>; m <span style="color: #C76A40">text</span>; d <span style="color: #C76A40">text</span>; h <span style="color: #C76A40">text</span>; c <span style="color: #C76A40">text</span>;
          <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            <span style="color: #C76A40;
            font-weight: 800;">get</span> <span style="color: #C76A40;
            font-weight: 800;">stacked</span> <span style="color: #C76A40;
            font-weight: 800;">diagnostics</span> e=<span style="color: #397300">returned_sqlstate</span>, m=<span style="color: #397300">message_text</span>, d=pg_exception_detail, h=pg_exception_hint, c=pg_exception_context;
            <span style="color: #C76A40;
            font-weight: 800;">return</span> lib.result_catch( _ex.e, _ex.m, _ex.h, _ex.d, _ex.c );
          <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_reg_acerto {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_reg_acerto(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função serve para efetuar o acerto do stock
            args = {
              arg_espaco_auth: ID
              arg_espaco_id: ID,
              arg_colaborador_id := ID,

              acerto_observacao: OBS
              arg_acerto: [{
                artigo_id:UUID,
                acerto_quantidade: QUANTIDADE
              }]
            }
          \*\/</span>

          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_espaco_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_id&#x27;</span>;
          arg_acerto_observacao <span style="color: #C76A40">varchar</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;acerto_observacao&#x27;</span>;

          arg_acerto_corecao <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>;

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _stock <span style="color: #C76A40">record</span>;
          _acerto tweeks.acerto;
          _new tweeks.acerto;

          _acerto_group <span style="color: #C76A40">uuid</span>;
          _data <span style="color: #C76A40">record</span>;
          acertos <span style="color: #C76A40">jsonb</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> jsonb_build_array();
          ___branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">for</span> _data <span style="color: #C76A40;
            font-weight: 800;">in</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
                (e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_id&#x27;</span>)::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> artigo_id,
                (e.doc-&gt;&gt;<span style="color: #4d99bf">&#x27;acerto_quantidade&#x27;</span>)::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> acerto_quantidade
              <span style="color: #C76A40;
            font-weight: 800;">from</span> jsonb_array_elements( args-&gt;<span style="color: #4d99bf">&#x27;arg_acerto&#x27;</span> ) e( doc )
          <span style="color: #C76A40;
            font-weight: 800;">loop</span>

            <span style="color: #C76A40;
            font-weight: 800;">select</span> 
                stock_quantidade,
                stock_artigo_id,
                stock_espaco_id
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks._get_stock( _data.artigo_id, arg_espaco_id )
              <span style="color: #C76A40;
            font-weight: 800;">into</span> _stock;
            arg_acerto_corecao := _stock.stock_quantidade - _data.acerto_quantidade;
            _acerto_group := <span style="color: #397300">public</span>.uuid_generate_v4();
            _new.acerto_codigo := tweeks.__generate_acerto_code( ___branch );
            _new.acerto_colaborador_id :=    arg_colaborador_id;
            _new.acerto_quantidade :=        _data.acerto_quantidade;
            _new.acerto_quantidadeinicial := _stock.stock_quantidade;
            _new.acerto_correcao :=          arg_acerto_corecao;
            _new.acerto_observacao :=        arg_acerto_observacao;
            _new.acerto_espaco_auth :=       arg_espaco_auth;
            _new.acerto_oprgroup :=          _acerto_group;
            _new.acerto_artigo_id :=         _data.artigo_id;
            _new.acerto_espaco_id :=         arg_espaco_id;

            <span style="color: #888">-- Save acerto</span>
            <span style="color: #C76A40;
            font-weight: 800;">select</span> ( &quot;returning&quot; ).* <span style="color: #C76A40;
            font-weight: 800;">into</span> _acerto
              <span style="color: #C76A40;
            font-weight: 800;">from</span> lib.sets_in( _new )
            ;

            _stock := tweeks._get_stock( _data.artigo_id, arg_espaco_id );
            acertos := acertos || jsonb_build_object(
              <span style="color: #4d99bf">&#x27;acerto&#x27;</span>, _acerto,
              <span style="color: #4d99bf">&#x27;stock&#x27;</span>, _stock,
              <span style="color: #4d99bf">&#x27;artigo&#x27;</span>, tweeks._get_artigo( _stock.stock_artigo_id )
            );
          <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">loop</span>;

          <span style="color: #C76A40;
            font-weight: 800;">return</span>  lib.result_true( acertos );
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_posto_by_endereco {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_posto_by_endereco(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para devolver um posto a partir do seu endereço IP
            filter := {
              arg_posto_endereco: IP
            }
          \*\/</span>
          arg_posto_endereco <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_endereco&#x27;</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

            <span style="color: #C76A40;
            font-weight: 800;">return query</span>
              <span style="color: #C76A40;
            font-weight: 800;">with</span> aux <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  post.*,
                  tp.*,
                  esp.*,
                  cx.*
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.posto post
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.tposto tp <span style="color: #C76A40;
            font-weight: 800;">on</span> post.posto_tposto_id = tp.tposto_id
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.espaco esp <span style="color: #C76A40;
            font-weight: 800;">on</span> post.posto_espaco_destino = esp.espaco_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.caixa cx <span style="color: #C76A40;
            font-weight: 800;">on</span> post.posto_id = cx.caixa_posto_id
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> cx.caixa_estado = _const.caixa_estado_ativo
                <span style="color: #C76A40;
            font-weight: 800;">where</span> post.posto_endereco = arg_posto_endereco
                <span style="color: #C76A40;
            font-weight: 800;">limit</span> <span style="color: #C76A40">1</span>

              ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  jsonb_build_object(
                    <span style="color: #4d99bf">&#x27;posto&#x27;</span>, lib.jsonb_values( a, <span style="color: #4d99bf">&#x27;posto_id&#x27;</span>, <span style="color: #4d99bf">&#x27;posto_montante&#x27;</span>, <span style="color: #4d99bf">&#x27;posto_endereco&#x27;</span>, <span style="color: #4d99bf">&#x27;posto_multipleuser&#x27;</span>, <span style="color: #4d99bf">&#x27;posto_estado&#x27;</span>, <span style="color: #4d99bf">&#x27;posto_designacao&#x27;</span> ),
                    <span style="color: #4d99bf">&#x27;caixa&#x27;</span>, lib.jsonb_values( a, <span style="color: #4d99bf">&#x27;caixa_id&#x27;</span>, <span style="color: #4d99bf">&#x27;caixa_montanteinicial&#x27;</span>, <span style="color: #4d99bf">&#x27;caixa_montanteinicialposto&#x27;</span> ),
                    <span style="color: #4d99bf">&#x27;espaco&#x27;</span>, lib.jsonb_values( a, <span style="color: #4d99bf">&#x27;espaco_id&#x27;</span>, <span style="color: #4d99bf">&#x27;espaco_nome&#x27;</span> ),
                    <span style="color: #4d99bf">&#x27;tposto&#x27;</span>, lib.jsonb_values( a, <span style="color: #4d99bf">&#x27;tposto_id&#x27;</span>, <span style="color: #4d99bf">&#x27;tposto_designacao&#x27;</span> )
                  )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> aux a;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_conta_preparacao {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_conta_preparacao(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(conta_id <span style="color: #C76A40">uuid</span>, conta_numero <span style="color: #C76A40">integer</span>, conta_titular <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, conta_titularnif <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, conta_data <span style="color: #C76A40">date</span>, conta_numerofatura <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, conta_montante <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, conta_montanteamortizado <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, conta_estado <span style="color: #C76A40">smallint</span>, conta_imprensa <span style="color: #C76A40">smallint</span>, conta_dataregistro <span style="color: #C76A40">timestamp</span> <span style="color: #C76A40">with time zone</span>, conta_dataatualizacao <span style="color: #C76A40">timestamp</span> <span style="color: #C76A40">with time zone</span>, mesa_id <span style="color: #C76A40">uuid</span>, mesa_numero <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, mesa_lotacao <span style="color: #C76A40">smallint</span>, mesa_designacao <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, currency_id <span style="color: #C76A40">smallint</span>, currency_code <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, currency_name <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, tpaga_id <span style="color: #C76A40">smallint</span>, tpaga_designacao <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_id <span style="color: #C76A40">uuid</span>, colaborador_nome <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, colaborador_apelido <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span>, vendas <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            Essa função devolve uma mesa juntamente com as conta associada que ainda esta aberta
            filter := {
              arg_conta_id
            }
           \*\/</span>
          arg_conta_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_conta_id&#x27;</span>;

          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>

          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> conta_venda <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  art.*,
                  ve.*,
                  coalesce(
                    jsonb_agg(
                    lib.jsonb_values_as(
                      to_jsonb( agg ) || to_jsonb( it ),
                      <span style="color: #4d99bf">&#x27;artigo_id&#x27;</span>, <span style="color: #4d99bf">&#x27;item_id&#x27;</span>,
                      <span style="color: #4d99bf">&#x27;artigo_nome&#x27;</span>, <span style="color: #4d99bf">&#x27;item_nome&#x27;</span>,
                      <span style="color: #4d99bf">&#x27;artigo_custo&#x27;</span>, <span style="color: #4d99bf">&#x27;item_custo&#x27;</span>,
                      <span style="color: #4d99bf">&#x27;agrega_id&#x27;</span>, <span style="color: #4d99bf">&#x27;agrega_id&#x27;</span>,
                      <span style="color: #4d99bf">&#x27;agrega_quantidade&#x27;</span>, <span style="color: #4d99bf">&#x27;agrega_quantidade&#x27;</span>,
                      <span style="color: #4d99bf">&#x27;agrega_custounitario&#x27;</span>, <span style="color: #4d99bf">&#x27;agrega_custounitario&#x27;</span>,
                      <span style="color: #4d99bf">&#x27;agrega_montante&#x27;</span>, <span style="color: #4d99bf">&#x27;agrega_montante&#x27;</span>
                    ) <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> it.artigo_nome <span style="color: #C76A40;
            font-weight: 800;">asc</span> ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> it.artigo_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> ),
                    jsonb_build_array()
                  ) <span style="color: #C76A40;
            font-weight: 800;">as</span> items
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.venda ve
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> ve.venda_artigo_id = art.artigo_id
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.agrega agg <span style="color: #C76A40;
            font-weight: 800;">on</span> ve.venda_id = agg.agrega_venda_id
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> agg.agrega_estado <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.agrega_estado_aberto, _const.agrega_estado_fechado )
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.artigo it <span style="color: #C76A40;
            font-weight: 800;">on</span> agg.agrega_artigo_item = it.artigo_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> ve.venda_estado <span style="color: #C76A40;
            font-weight: 800;">in</span> ( _const.venda_estado_aberto )
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_estadopreparacao = _const.venda_estadopreparacao_pendente
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> art.artigo_id,
                ve.venda_id
            )
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
              ct.conta_id,
              ct.conta_numero,
              ct.conta_titular,
              ct.conta_titularnif,
              ct.conta_data,
              ct.conta_numerofatura,
              ct.conta_montante,
              ct.conta_montanteamortizado,
              ct.conta_estado,
              ct.conta_imprensa,
              ct.conta_dataregistro,
              ct.conta_dataatualizacao,

              m.mesa_id,
              m.mesa_numero,
              m.mesa_lotacao,
              m.mesa_designacao,

              cur.currency_id,
              cur.currency_code,
              cur.currency_name,

              tpag.tpaga_id,
              tpag.tpaga_designacao,

              col.colaborador_id,
              col.colaborador_nome,
              col.colaborador_apelido,
              jsonb_agg(
                  lib.jsonb_values(
                    to_jsonb( vd ),
                    <span style="color: #4d99bf">&#x27;artigo_id&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;artigo_codigo&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;artigo_nome&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;artigo_custo&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;artigo_stocknegativo&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;venda_id&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;venda_quantidade&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;venda_custounitario&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;venda_montente&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;venda_montanteagregado&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;venda_montantetotal&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;venda_estado&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;items&#x27;</span>
                    )
                  <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> vd.artigo_nome <span style="color: #C76A40;
            font-weight: 800;">asc</span>
                )
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.conta ct
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.colaborador col <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_colaborador_id = col.colaborador_id
              <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.mesa m <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_mesa_id = m.mesa_id
              <span style="color: #C76A40;
            font-weight: 800;">left join</span> geoinfo.currency cur <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_currency_id = cur.currency_id
              <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.tpaga tpag <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_tpaga_id = tpag.tpaga_id
              <span style="color: #C76A40;
            font-weight: 800;">left join</span> conta_venda vd <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_id = vd.venda_conta_id

            <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_id = arg_conta_id
            <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
              ct.conta_id,
              m.mesa_id,
              col.colaborador_id,
              tpag.tpaga_id,
              cur.currency_id
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_load_artigo {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_load_artigo(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              arg_colaborador_id: UID,
              arg_espaco_auth: UID
              arg_classe_id: UID
              arg_artigo_nome:TXT
            }
           \*\/</span>
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          arg_classe_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_classe_id&#x27;</span>;
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
          _branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> __artigo <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  art.artigo_id,
                  art.artigo_classe_id,
                  art.artigo_nome,
                  art.artigo_foto,
                  art.artigo_stocknegativo,
                  art.artigo_estado,
                  s.stock_quantidade,
                  l.link_metadata,
                  u.unit_id,
                  u.unit_code,
                  u.unit_name,
                  count( di.dispoe_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> artigos_extras
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo art
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.link l <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_id =(  l.link_referencia-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_id&#x27;</span> )::<span style="color: #C76A40">uuid</span>
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_estado = _const.maguita_link_estado_ativo
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_tlink_id = _const.maguita_tlink_preco
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_espaco_destino = arg_espaco_auth
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.stock s <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_id = s.artigo_id 
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> s.espaco_id = arg_espaco_auth
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> s._branch_uid = _branch
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.dispoe di <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_id = di.dispoe_artigo_id
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> di.dispoe_estado = _const.dispoe_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.unit u <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_unit_id = u.unit_id
              
              <span style="color: #C76A40;
            font-weight: 800;">where</span> art.artigo_classe_id = coalesce( arg_classe_id, art.artigo_classe_id )
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> art.artigo_id,
                  s.stock_quantidade,
                  l.link_metadata,
                  art.artigo_stocknegativo,
                  art.artigo_nome,
                  art.artigo_foto,
                  u.unit_id
                <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> <span style="color: #C76A40;
            font-weight: 800;">case</span>
                    <span style="color: #C76A40;
            font-weight: 800;">when</span> s.stock_quantidade &gt; <span style="color: #C76A40">0</span> <span style="color: #C76A40;
            font-weight: 800;">or</span> art.artigo_stocknegativo <span style="color: #C76A40;
            font-weight: 800;">then</span> <span style="color: #C76A40">1</span>
                    <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">2</span>
                  <span style="color: #C76A40;
            font-weight: 800;">end</span>,
                  art.artigo_nome
          ) <span style="color: #C76A40;
            font-weight: 800;">select</span> to_jsonb( a ) <span style="color: #C76A40;
            font-weight: 800;">from</span> __artigo a;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_pos_load_class {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_pos_load_class(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              arg_espaco_auth: UID,
              arg_colaborador_id: UID
            }
           \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          _branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> tweeks.__branch_uid( arg_colaborador_id, arg_espaco_auth );
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span> <span style="color: #C76A40;
            font-weight: 800;">with</span>
            __classe <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span>
                  c.classe_id,
                  c.classe_classe_id,
                  c.classe_nome,
                  c.classe_codigo,
                  c.classe_foto,
                  count( <span style="color: #C76A40;
            font-weight: 800;">distinct</span> lart.link_id ) <span style="color: #C76A40;
            font-weight: 800;">filter</span> ( <span style="color: #C76A40;
            font-weight: 800;">where</span> lart.link_id <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> classe_artigos
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.classe c
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.link lcla <span style="color: #C76A40;
            font-weight: 800;">on</span> c.classe_id = (lcla.link_referencia-&gt;&gt;<span style="color: #4d99bf">&#x27;classe_id&#x27;</span>)::<span style="color: #C76A40">uuid</span>
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> lcla.link_estado = _const.maguita_link_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> c.classe_id = art.artigo_classe_id
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_estado = _const.artigo_estado_ativo
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.link lart <span style="color: #C76A40;
            font-weight: 800;">on</span> art.artigo_id = ( lart.link_referencia-&gt;&gt;<span style="color: #4d99bf">&#x27;artigo_id&#x27;</span> )::<span style="color: #C76A40">uuid</span>
                    <span style="color: #C76A40;
            font-weight: 800;">and</span> lart.link_estado = _const.maguita_link_estado_ativo
        <span style="color: #888">--             and lart.link_espaco_destino = artigo_espaco_auth</span>
                <span style="color: #C76A40;
            font-weight: 800;">where</span> lcla.link_espaco_destino = arg_espaco_auth
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> lcla.link_tlink_id = _const.maguita_tlink_classe
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> c._branch_uid = _branch
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> art._branch_uid = _branch
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> lcla._branch_uid = c._branch_uid
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> lart._branch_uid = c._branch_uid
                <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> c.classe_id
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span>  to_jsonb( c )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> __classe c;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_change_tipoimposto_estado {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_change_tipoimposto_estado(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> lib.result
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\**
            args := {
              arg_tipoimposto_id: ID,
              arg_colaborador_id: ID,
            }
           \*\/</span>
          arg_tipoimposto_id <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_tipoimposto_id&#x27;</span>;
          arg_colaborador_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_id&#x27;</span>;
          _tipoimposto tweeks.tipoimposto;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();
          <span style="color: #C76A40;
            font-weight: 800;">update</span> tweeks.tipoimposto
            <span style="color: #C76A40;
            font-weight: 800;">set</span> tipoimposto_estado = lib.swith( tipoimposto_estado, _const.tipoimposto_estado_ativo, _const.tipoimposto_estado_fechado ),
                tipoimposto_colaborador_atualizacao = arg_colaborador_id,
                tipoimposto_dataatuzaliacao = <span style="color: #397300">current_timestamp</span>
            <span style="color: #C76A40;
            font-weight: 800;">where</span> tipoimposto_id = arg_tipoimposto_id
            <span style="color: #C76A40;
            font-weight: 800;">returning</span> * <span style="color: #C76A40;
            font-weight: 800;">into</span> _tipoimposto
          ;

          <span style="color: #C76A40;
            font-weight: 800;">return</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> ? jsonb_build_object(
            <span style="color: #4d99bf">&#x27;tipoimposto&#x27;</span>, _tipoimposto
          );

        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_artigo_associar {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_artigo_associar(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          <span style="color: #888">\/\** Essa função serve para carregar os artigos associados
            filter := {
              arg_espaco_auth: ID
            }
          \*\/</span>
          arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
          _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

          <span style="color: #C76A40;
            font-weight: 800;">return query</span>
            <span style="color: #C76A40;
            font-weight: 800;">with</span> aux <span style="color: #C76A40;
            font-weight: 800;">as</span> (
              <span style="color: #C76A40;
            font-weight: 800;">select</span> *
                <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.link l
                  <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> l.link_artigo_id = art.artigo_id
                <span style="color: #C76A40;
            font-weight: 800;">where</span> l.link_estado = _const.link_estado_associacao
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_tlink_id = _const.tlink_associacao
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> l.link_espaco_destino = arg_espaco_auth
                  <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_estado = _const.artigo_estado_ativo
            ) <span style="color: #C76A40;
            font-weight: 800;">select</span> lib.jsonb_values(
              aux,
              <span style="color: #4d99bf">&#x27;link_id&#x27;</span>,
              <span style="color: #4d99bf">&#x27;artigo_id&#x27;</span>,
              <span style="color: #4d99bf">&#x27;artigo_nome&#x27;</span>
            )
            <span style="color: #C76A40;
            font-weight: 800;">from</span> aux;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface __fluxo_scan {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.__fluxo_scan(_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>, _espaco_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>, _resume <span style="color: #C76A40">boolean</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>, _branch <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">DEFAULT</span> <span style="color: #C76A40;
            font-weight: 800;">NULL</span>::<span style="color: #C76A40">uuid</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">TABLE</span>(fluxo_artigo_id <span style="color: #C76A40">uuid</span>, fluxo_espaco_id <span style="color: #C76A40">uuid</span>, fluxo_preview <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, fluxo_resultado <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, fluxo_checkmarks <span style="color: #C76A40">uuid</span>, fluxo_check <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, fluxo_order <span style="color: #C76A40">bigint</span>, fluxo_end <span style="color: #C76A40">bigint</span>, fluxo_resume <span style="color: #C76A40">boolean</span>, fluxo_credito <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, fluxo_debito <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, fluxo_calc <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, fluxo_quantidade <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span>, fluxo_id <span style="color: #C76A40">uuid</span>, fluxo_date <span style="color: #C76A40">timestamp</span> <span style="color: #C76A40">with time zone</span>, fluxo_sequencia <span style="color: #C76A40">bigint</span>)
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> <span style="color: #C76A40;
            font-weight: 800;">sql</span>
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">with</span> <span style="color: #C76A40;
            font-weight: 800;">recursive</span>
          __map <span style="color: #C76A40;
            font-weight: 800;">as</span> ( <span style="color: #C76A40;
            font-weight: 800;">select</span> maguita_fluxo_estado_ativo, maguita_fluxo_estado_fechado, maguita_fluxo_estado_anulado <span style="color: #C76A40;
            font-weight: 800;">from</span> map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>()

          ), __espaco <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> a.espaco_id
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.espaco a
              <span style="color: #C76A40;
            font-weight: 800;">where</span> a.espaco_id = coalesce( _espaco_id, a.espaco_id )
              <span style="color: #C76A40;
            font-weight: 800;">and</span> a._branch_uid = coalesce( _branch, a._branch_uid )
          ), __artigo <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span> a.artigo_id
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.artigo a
              <span style="color: #C76A40;
            font-weight: 800;">where</span> a.artigo_id = coalesce( _artigo_id, a.artigo_id )
              <span style="color: #C76A40;
            font-weight: 800;">and</span> a._branch_uid = coalesce( _branch, a._branch_uid )
         ), __stock_point <span style="color: #C76A40;
            font-weight: 800;">as</span>(
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
              a.artigo_id,
              e.espaco_id,
              mode() <span style="color: #C76A40;
            font-weight: 800;">within</span> <span style="color: #C76A40;
            font-weight: 800;">group</span> ( <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> f.fluxo_dataregistro <span style="color: #C76A40;
            font-weight: 800;">desc</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> <span style="color: #C76A40">point</span>
            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.fluxo f
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __map _const <span style="color: #C76A40;
            font-weight: 800;">on</span> f.fluxo_estado = _const.maguita_fluxo_estado_ativo
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __artigo a <span style="color: #C76A40;
            font-weight: 800;">on</span> a.artigo_id <span style="color: #C76A40;
            font-weight: 800;">in</span> ( f.fluxo_artigo_in, f.fluxo_artigo_out )
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> e.espaco_id <span style="color: #C76A40;
            font-weight: 800;">in</span> ( f.fluxo_espaco_in, f.fluxo_espaco_out )
            <span style="color: #C76A40;
            font-weight: 800;">where</span> f.fluxo_checkpoint = <span style="color: #C76A40">0</span>
              <span style="color: #C76A40;
            font-weight: 800;">and</span> f._branch_uid = coalesce( _branch, f._branch_uid )
              <span style="color: #C76A40;
            font-weight: 800;">and</span> f.fluxo_estado = _const.maguita_fluxo_estado_ativo
            <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> a.artigo_id,
              e.espaco_id
          ),
          __fluxo <span style="color: #C76A40;
            font-weight: 800;">as</span> (
            <span style="color: #C76A40;
            font-weight: 800;">select</span>
              a.artigo_id,
              e.espaco_id,
              f.fluxo_id,
              f.fluxo_dataregistro,
              f.fluxo_sequencia,
              f.fluxo_checkpoint,
              <span style="color: #C76A40;
            font-weight: 800;">case</span>
                <span style="color: #C76A40;
            font-weight: 800;">when</span> e.espaco_id = f.fluxo_espaco_in <span style="color: #C76A40;
            font-weight: 800;">and</span> a.artigo_id = f.fluxo_artigo_in <span style="color: #C76A40;
            font-weight: 800;">then</span> f.fluxo_quantidadein
                <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">0</span>
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> fluxo_credito,
              <span style="color: #C76A40;
            font-weight: 800;">case</span>
                <span style="color: #C76A40;
            font-weight: 800;">when</span> e.espaco_id = f.fluxo_espaco_out <span style="color: #C76A40;
            font-weight: 800;">and</span> a.artigo_id = f.fluxo_artigo_out <span style="color: #C76A40;
            font-weight: 800;">then</span> f.fluxo_quantidadeout
                <span style="color: #C76A40;
            font-weight: 800;">else</span> <span style="color: #C76A40">0</span>
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> fluxo_debito,
              <span style="color: #C76A40;
            font-weight: 800;">case</span>
                <span style="color: #C76A40;
            font-weight: 800;">when</span> f.fluxo_quantidadefinal <span style="color: #C76A40;
            font-weight: 800;">is</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">then</span> f.fluxo_quantidadefinal
                <span style="color: #C76A40;
            font-weight: 800;">when</span> e.espaco_id = f.fluxo_espaco_in <span style="color: #C76A40;
            font-weight: 800;">and</span> a.artigo_id = f.fluxo_artigo_in <span style="color: #C76A40;
            font-weight: 800;">then</span> f.fluxo_quantidadein * <span style="color: #C76A40">1</span>
                <span style="color: #C76A40;
            font-weight: 800;">when</span> e.espaco_id = f.fluxo_espaco_out <span style="color: #C76A40;
            font-weight: 800;">and</span> a.artigo_id = f.fluxo_artigo_out <span style="color: #C76A40;
            font-weight: 800;">then</span> f.fluxo_quantidadeout * <span style="color: #C76A40">-1</span>
                <span style="color: #C76A40;
            font-weight: 800;">end</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> fluxo_quantidade,
              row_number() <span style="color: #C76A40;
            font-weight: 800;">over</span> ( <span style="color: #C76A40;
            font-weight: 800;">partition</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> a.artigo_id, e.espaco_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> fluxo_order,
              count( f.fluxo_id ) <span style="color: #C76A40;
            font-weight: 800;">over</span> ( <span style="color: #C76A40;
            font-weight: 800;">partition</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> a.artigo_id, e.espaco_id ) <span style="color: #C76A40;
            font-weight: 800;">as</span> fluxo_end

            <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.fluxo f
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __map _const <span style="color: #C76A40;
            font-weight: 800;">on</span> f.fluxo_estado = _const.maguita_fluxo_estado_ativo
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __artigo a <span style="color: #C76A40;
            font-weight: 800;">on</span> a.artigo_id <span style="color: #C76A40;
            font-weight: 800;">in</span> ( f.fluxo_artigo_in, f.fluxo_artigo_out )
              <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __espaco e <span style="color: #C76A40;
            font-weight: 800;">on</span> e.espaco_id <span style="color: #C76A40;
            font-weight: 800;">in</span> ( f.fluxo_espaco_in, f.fluxo_espaco_out )
              <span style="color: #C76A40;
            font-weight: 800;">left join</span> __stock_point _sp <span style="color: #C76A40;
            font-weight: 800;">on</span> _sp.artigo_id = a.artigo_id <span style="color: #C76A40;
            font-weight: 800;">and</span> _sp.espaco_id = e.espaco_id
            <span style="color: #C76A40;
            font-weight: 800;">where</span>  f.fluxo_dataregistro &gt;= coalesce( _sp.point, f.fluxo_dataregistro )
              <span style="color: #C76A40;
            font-weight: 800;">and</span> f._branch_uid = coalesce( _branch, f._branch_uid )
            <span style="color: #C76A40;
            font-weight: 800;">order</span> <span style="color: #C76A40;
            font-weight: 800;">by</span> a.artigo_id,
              e.espaco_id,
              f.fluxo_dataregistro,
              f.fluxo_sequencia
          ), __fluxo_stock <span style="color: #C76A40;
            font-weight: 800;">as</span> (
          <span style="color: #C76A40;
            font-weight: 800;">select</span>
            _f.artigo_id,
            _f.espaco_id,
            _f.fluxo_order,
            _f.fluxo_end,
            _f.fluxo_credito,
            _f.fluxo_debito,
            _f.fluxo_quantidade,
            _f.fluxo_id,
        <span style="color: #888">--     _f.fluxo_dataregistro,</span>
        <span style="color: #888">--     _f.fluxo_sequencia,</span>

            _f.fluxo_quantidade <span style="color: #C76A40;
            font-weight: 800;">as</span> fluxo_resultado,
            <span style="color: #C76A40">0.0</span>::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> fluxo_preview,
        <span style="color: #888">--     _f.fluxo_id as fluxo_checkmarks,</span>
        <span style="color: #888">--     _f.fluxo_quantidade as fluxo_checkquant,</span>
            _f.fluxo_order = _f.fluxo_end <span style="color: #C76A40;
            font-weight: 800;">as</span> fluxo_resume
          <span style="color: #C76A40;
            font-weight: 800;">from</span> __fluxo _f
            <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __map _const <span style="color: #C76A40;
            font-weight: 800;">on</span> <span style="color: #C76A40;
            font-weight: 800;">true</span>
          <span style="color: #C76A40;
            font-weight: 800;">where</span> _f.fluxo_order = <span style="color: #C76A40">1</span>
          <span style="color: #C76A40;
            font-weight: 800;">union</span> <span style="color: #C76A40;
            font-weight: 800;">all</span>
          <span style="color: #C76A40;
            font-weight: 800;">select</span>
            _f.artigo_id,
            _f.espaco_id,
            _f.fluxo_order,
            _f.fluxo_end,
            _f.fluxo_credito,
            _f.fluxo_debito,
            _f.fluxo_quantidade,
            _f.fluxo_id,
        <span style="color: #888">--     _f.fluxo_dataregistro,</span>
        <span style="color: #888">--     _f.fluxo_sequencia,</span>
            
            ( _fs.fluxo_resultado * _f.fluxo_checkpoint ) + ( _f.fluxo_quantidade ),
            _fs.fluxo_resultado <span style="color: #C76A40;
            font-weight: 800;">as</span> fluxo_priview,
        <span style="color: #888">--     case</span>
        <span style="color: #888">--       when _f.fluxo_checkpoint = 0 then _f.fluxo_id</span>
        <span style="color: #888">--       else _fs.fluxo_checkmarks</span>
        <span style="color: #888">--       end,</span>
        <span style="color: #888">--     case</span>
        <span style="color: #888">--       when _f.fluxo_checkpoint = 0 then _f.fluxo_quantidade</span>
        <span style="color: #888">--       else _fs.fluxo_checkquant</span>
        <span style="color: #888">--       end,</span>
            _f.fluxo_order = _f.fluxo_end <span style="color: #C76A40;
            font-weight: 800;">as</span> fluxo_resume

          <span style="color: #C76A40;
            font-weight: 800;">from</span> __fluxo_stock _fs
            <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> __fluxo _f <span style="color: #C76A40;
            font-weight: 800;">on</span> _fs.espaco_id = _f.espaco_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> _fs.artigo_id = _f.artigo_id
                <span style="color: #C76A40;
            font-weight: 800;">and</span> _fs.fluxo_order +<span style="color: #C76A40">1</span> = _f.fluxo_order
        ) <span style="color: #C76A40;
            font-weight: 800;">select</span>
            _fs.artigo_id <span style="color: #C76A40;
            font-weight: 800;">as</span> stock_artigo_id,
            _fs.espaco_id <span style="color: #C76A40;
            font-weight: 800;">as</span> stock_espaco_id,
            _fs.fluxo_preview,
            _fs.fluxo_resultado,

            <span style="color: #C76A40;
            font-weight: 800;">null</span>::<span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> fluxo_checkmarks,<span style="color: #888">--     _fs.fluxo_checkmarks,</span>
            <span style="color: #C76A40;
            font-weight: 800;">null</span>::<span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">as</span> fluxo_checkquant, <span style="color: #888">--     _fs.fluxo_checkquant,</span>
            _fs.fluxo_order,
            _fs.fluxo_end,
            _fs.fluxo_resume,

            _fs.fluxo_credito,
            _fs.fluxo_debito,
            _fs.fluxo_credito - _fs.fluxo_debito,
            _fs.fluxo_quantidade,
            _fs.fluxo_id,
            <span style="color: #C76A40;
            font-weight: 800;">null</span>::<span style="color: #C76A40">timestamptz</span>, <span style="color: #888">---_fs.fluxo_dataregistro,</span>
            <span style="color: #C76A40;
            font-weight: 800;">null</span>::<span style="color: #C76A40">int8</span> <span style="color: #888">-- _fs.fluxo_sequencia</span>
        <span style="color: #C76A40;
            font-weight: 800;">from</span> __fluxo_stock _fs
        <span style="color: #C76A40;
            font-weight: 800;">where</span> <span style="color: #C76A40;
            font-weight: 800;">true</span> <span style="color: #C76A40;
            font-weight: 800;">in</span> (
            coalesce( _resume, <span style="color: #C76A40;
            font-weight: 800;">true</span> ) = _fs.fluxo_resume,
            <span style="color: #C76A40;
            font-weight: 800;">not</span> _resume
          )
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_load_conta_documento_limit {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_load_conta_documento_limit(args <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
          _limit <span style="color: #C76A40">int8</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;limit&#x27;</span>;
          _offset <span style="color: #C76A40">int8</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> args-&gt;&gt;<span style="color: #4d99bf">&#x27;offset&#x27;</span>;
        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
          <span style="color: #C76A40;
            font-weight: 800;">return query</span> 
            <span style="color: #C76A40;
            font-weight: 800;">select</span> e.document || jsonb_build_object(
                <span style="color: #4d99bf">&#x27;_rowcounts&#x27;</span>, count( e.document ) <span style="color: #C76A40;
            font-weight: 800;">over</span> ()
              )
              <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.funct_load_conta_documento( args ) e( document )
              <span style="color: #C76A40;
            font-weight: 800;">limit</span> _limit
              <span style="color: #C76A40;
            font-weight: 800;">offset</span> _offset
          ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }

      export interface funct_report_venda {
        /*
        <pre style='pre code.hljs {
            display: block;
            overflow-x: auto;
            padding: 1em
        }

        code.hljs {
            padding: 3px 5px
        }

        .hljs {
            background: #f0f0f0;
            color: #444
        }

        .hljs-comment {
            color: #888
        }

        .hljs-punctuation, .hljs-tag {
            color: #444a
        }

        .hljs-tag .hljs-attr, .hljs-tag .hljs-name {
            color: #444
        }

        .hljs-attribute, .hljs-doctag, .hljs-keyword, .hljs-meta .hljs-keyword, .hljs-name, .hljs-selector-tag {
            font-weight: 700
        }
        .hljs-keyword {
            color: #C76A40;
            font-weight: 800;
        }

        .hljs-deletion, .hljs-number, .hljs-quote, .hljs-selector-class, .hljs-selector-id, .hljs-string, .hljs-template-tag, .hljs-type {
            color: #C76A40
        }

        .hljs-section, .hljs-title {
            color: #800;
            font-weight: 700
        }

        .hljs-link, .hljs-operator, .hljs-regexp, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-symbol, .hljs-template-variable, .hljs-variable {
            color: #bc6060
        }

        .hljs-literal {
            color: #78a960
        }

        .hljs-addition, .hljs-built_in, .hljs-bullet, .hljs-code {
            color: #397300
        }

        .hljs-meta {
            color: #1f7199
        }

        .hljs-meta .hljs-string {
            color: #4d99bf
        }

        .hljs-emphasis {
            font-style: italic
        }

        .hljs-strong {
            font-weight: 700;
            color: #C76A40
        }'>
        <span style="color: #C76A40;
            font-weight: 800;">CREATE</span> <span style="color: #C76A40;
            font-weight: 800;">OR REPLACE</span> <span style="color: #C76A40;
            font-weight: 800;">FUNCTION</span> tweeks.funct_report_venda(<span style="color: #C76A40;
            font-weight: 800;">filter</span> <span style="color: #C76A40">jsonb</span>)
         <span style="color: #C76A40;
            font-weight: 800;">RETURNS</span> <span style="color: #C76A40;
            font-weight: 800;">SETOF</span> <span style="color: #C76A40">jsonb</span>
         <span style="color: #C76A40;
            font-weight: 800;">LANGUAGE</span> plpgsql
        <span style="color: #C76A40;
            font-weight: 800;">AS</span> $<span style="color: #C76A40;
            font-weight: 800;">function</span>$
        <span style="color: #C76A40;
            font-weight: 800;">declare</span>
            <span style="color: #888">\/\** Relatorio de vendas
              filter := {
                arg_data_operacao:{ start: DATE, end: DATE },
                arg_data_registro:{ start: DATE, end: DATE },
                arg_artigo_id: ID
                arg_posto_id: ID,
                arg_colaborador_vendedor: ID,
                arg_currency_pagamento: ID,
                arg_colaborador_vendedor: ID,
                arg_tpaga_id: ID,
                arg_classe_id: ID,
                arg _conta_fatura: FATURA,
              }
             \*\/</span>

            arg_data_operacao_start <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_operacao&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;start&#x27;</span>;
            arg_data_operacao_end <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_operacao&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;end&#x27;</span>;

            arg_data_registro_start <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_registro&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;start&#x27;</span>;
            arg_data_registro_end <span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_data_registro&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;end&#x27;</span>;

            arg_artigo_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_artigo_id&#x27;</span>;
            arg_posto_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_posto_id&#x27;</span>;
            arg_colaborador_vendedor <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_colaborador_vendedor&#x27;</span>;
            arg_classe_id <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_classe_id&#x27;</span>;

            arg_espaco_auth <span style="color: #C76A40">uuid</span> <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_espaco_auth&#x27;</span>;
            arg_espaco_child <span style="color: #C76A40">uuid</span>[] <span style="color: #C76A40;
            font-weight: 800;">not</span> <span style="color: #C76A40;
            font-weight: 800;">null</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">rule</span>.espaco_get_childrens( arg_espaco_auth );

            arg_currency_pagamento <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_currency_pagamento&#x27;</span>;
            arg_tpaga_id <span style="color: #C76A40">int2</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_tpaga_id&#x27;</span>;
            arg_conta_montante_start <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_conta_montante&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;start&#x27;</span>;
            arg_conta_montante_end <span style="color: #C76A40">double</span> <span style="color: #C76A40">precision</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;<span style="color: #4d99bf">&#x27;arg_conta_montante&#x27;</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;end&#x27;</span>;
            arg_conta_fatura <span style="color: #C76A40">character</span> <span style="color: #C76A40">varying</span> <span style="color: #C76A40;
            font-weight: 800;">default</span> <span style="color: #C76A40;
            font-weight: 800;">filter</span>-&gt;&gt;<span style="color: #4d99bf">&#x27;arg_conta_fatura&#x27;</span>;

            _const map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>;

        <span style="color: #C76A40;
            font-weight: 800;">begin</span>
            _const := map.<span style="color: #C76A40;
            font-weight: 800;">constant</span>();

            <span style="color: #C76A40;
            font-weight: 800;">return query</span>
                <span style="color: #C76A40;
            font-weight: 800;">with</span> report <span style="color: #C76A40;
            font-weight: 800;">as</span> (
                    <span style="color: #C76A40;
            font-weight: 800;">select</span> ve.*,
                           art.*,
                           ct.*,
                           col.*,
                           trim( format( <span style="color: #4d99bf">&#x27;%s %s&#x27;</span>, col.colaborador_nome, col.colaborador_apelido ) ) <span style="color: #C76A40;
            font-weight: 800;">as</span> colaborador_nomecompleto,
                           string_agg( it.artigo_nome, <span style="color: #4d99bf">&#x27;, &#x27;</span> ) <span style="color: #C76A40;
            font-weight: 800;">as</span> venda_itens
                    <span style="color: #C76A40;
            font-weight: 800;">from</span> tweeks.venda ve
                             <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.artigo art <span style="color: #C76A40;
            font-weight: 800;">on</span> ve.venda_artigo_id = art.artigo_id
                             <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.conta ct <span style="color: #C76A40;
            font-weight: 800;">on</span> ve.venda_conta_id = ct.conta_id
                             <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> tweeks.caixa cx <span style="color: #C76A40;
            font-weight: 800;">on</span> ct.conta_caixa_fechopagamento = cx.caixa_id
                             <span style="color: #C76A40;
            font-weight: 800;">inner</span> <span style="color: #C76A40;
            font-weight: 800;">join</span> auth.colaborador col <span style="color: #C76A40;
            font-weight: 800;">on</span> coalesce ( ct.conta_colaborador_atualizacao, ct.conta_colaborador_id ) = col.colaborador_id
                             <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.agrega agg <span style="color: #C76A40;
            font-weight: 800;">on</span> ve.venda_id = agg.agrega_venda_id
                              <span style="color: #C76A40;
            font-weight: 800;">and</span> agg.agrega_estado = _const.agrega_estado_fechado
                            <span style="color: #C76A40;
            font-weight: 800;">left join</span> tweeks.artigo it <span style="color: #C76A40;
            font-weight: 800;">on</span> agg.agrega_artigo_item = it.artigo_id

                    <span style="color: #C76A40;
            font-weight: 800;">where</span> ct.conta_estado = _const.conta_estado_pago
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> ve.venda_estado = _const.venda_estado_fechado
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_data <span style="color: #C76A40;
            font-weight: 800;">between</span> coalesce( arg_data_operacao_start, ct.conta_data ) <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( arg_data_operacao_end, ct.conta_data )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_dataregistro::<span style="color: #C76A40">date</span> <span style="color: #C76A40;
            font-weight: 800;">between</span> coalesce( arg_data_registro_start, ct.conta_dataregistro::<span style="color: #C76A40">date</span> ) <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( arg_data_registro_end, ct.conta_dataregistro::<span style="color: #C76A40">date</span> )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> cx.caixa_posto_id = coalesce( arg_posto_id, cx.caixa_posto_id )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( ct.conta_colaborador_atualizacao, ct.conta_colaborador_id ) = coalesce( arg_colaborador_vendedor, ct.conta_colaborador_atualizacao, ct.conta_colaborador_id )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_currency_id = coalesce( arg_currency_pagamento, ct.conta_currency_id )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_tpaga_id = coalesce( arg_tpaga_id, ct.conta_tpaga_id )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_montante <span style="color: #C76A40;
            font-weight: 800;">between</span>  coalesce( arg_conta_montante_start, ct.conta_montante ) <span style="color: #C76A40;
            font-weight: 800;">and</span> coalesce( arg_conta_montante_end, ct.conta_montante )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_classe_id = coalesce( arg_classe_id, art.artigo_classe_id )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> art.artigo_id = coalesce( arg_artigo_id, art.artigo_id )
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> lower( ct.conta_numerofatura ) <span style="color: #C76A40;
            font-weight: 800;">like</span> <span style="color: #4d99bf">&#x27;%&#x27;</span> ||lower( coalesce( arg_conta_fatura, ct.conta_numerofatura ) ) ||<span style="color: #4d99bf">&#x27;%&#x27;</span>
                      <span style="color: #C76A40;
            font-weight: 800;">and</span> ct.conta_espaco_auth = <span style="color: #C76A40;
            font-weight: 800;">any</span>( arg_espaco_child )
                    <span style="color: #C76A40;
            font-weight: 800;">group</span> <span style="color: #C76A40;
            font-weight: 800;">by</span>
                        art.artigo_id,
                        ct.conta_id,
                        ve.venda_id,
                        col.colaborador_id
                ) <span style="color: #C76A40;
            font-weight: 800;">select</span> lib.jsonb_values( r,
                    <span style="color: #4d99bf">&#x27;venda_id&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;venda_quantidade&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;venda_montente&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;venda_montanteagregado&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;venda_montantetotal&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;venda_custounitario&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;venda_imposto&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;venda_montantecomimposto&#x27;</span>,

                    <span style="color: #4d99bf">&#x27;artigo_nome&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;artigo_codigo&#x27;</span>,

                    <span style="color: #4d99bf">&#x27;conta_numerofatura&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;conta_titular&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;conta_montante&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;conta_data&#x27;</span>,

                    <span style="color: #4d99bf">&#x27;conta_dataregistro&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;colaborador_nome&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;colaborador_nomecompleto&#x27;</span>,
                    <span style="color: #4d99bf">&#x27;venda_itens&#x27;</span>
                 )
                <span style="color: #C76A40;
            font-weight: 800;">from</span> report r
            ;
        <span style="color: #C76A40;
            font-weight: 800;">end</span>;
        $<span style="color: #C76A40;
            font-weight: 800;">function</span>$

        </pre>
        */ source(): void;
      }
    }
  }
}

export default def;
